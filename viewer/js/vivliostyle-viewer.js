/**
 * @vivliostyle/viewer v2.0.0-pre.6
 * Vivliostyle Viewer UI component, for rich paged viewing and printing in browser.
 *
 * @author Vivliostyle Foundation
 * @license AGPL-3.0
 * @preserve
 */
!function(e){"function"==typeof define&&define.amd?define(e):e()}((function(){"use strict";function e(e,t){return e(t={exports:{}},t.exports),t.exports}var t,n,i=e((function(e,t){
/*!
	   * Knockout JavaScript library v3.5.1
	   * (c) The Knockout.js team - http://knockoutjs.com/
	   * License: MIT (http://www.opensource.org/licenses/mit-license.php)
	   */
!function(n){var i=this||(0,eval)("this"),o=i.document,s=i.navigator,r=i.jQuery,a=i.JSON;r||"undefined"==typeof jQuery||(r=jQuery),function(n){n(e.exports||t)}((function(e,t){function l(e,t){return(null===e||typeof e in S)&&e===t}function h(e,t){var i;return function(){i||(i=y.a.setTimeout((function(){i=n,e()}),t))}}function c(e,t){var n;return function(){clearTimeout(n),n=y.a.setTimeout(e,t)}}function u(e,t){t&&"change"!==t?"beforeChange"===t?this.pc(e):this.gb(e,t):this.qc(e)}function d(e,t){null!==t&&t.s&&t.s()}function p(e,t){var n=this.qd,i=n[x];i.ra||(this.Qb&&this.mb[t]?(n.uc(t,e,this.mb[t]),this.mb[t]=null,--this.Qb):i.I[t]||n.uc(t,e,i.J?{da:e}:n.$c(e)),e.Ja&&e.gd())}var f,g,m,b,w,E,y=void 0!==e?e:{};y.b=function(e,t){for(var n=e.split("."),i=y,o=0;o<n.length-1;o++)i=i[n[o]];i[n[n.length-1]]=t},y.L=function(e,t,n){e[t]=n},y.version="3.5.1",y.b("version",y.version),y.options={deferUpdates:!1,useOnlyNativeEvents:!1,foreachHidesDestroyed:!1},y.a=function(){function e(e,t){for(var n in e)c.call(e,n)&&t(n,e[n])}function t(e,t){if(t)for(var n in t)c.call(t,n)&&(e[n]=t[n]);return e}function l(e,t){return e.__proto__=t,e}function h(e,t,n,i){var o=e[t].match(w)||[];y.a.D(n.match(w),(function(e){y.a.Na(o,e,i)})),e[t]=o.join(" ")}var c=Object.prototype.hasOwnProperty,u={__proto__:[]}instanceof Array,d="function"==typeof Symbol,p={},f={};p[s&&/Firefox\/2/i.test(s.userAgent)?"KeyboardEvent":"UIEvents"]=["keyup","keydown","keypress"],p.MouseEvents="click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave".split(" "),e(p,(function(e,t){if(t.length)for(var n=0,i=t.length;n<i;n++)f[t[n]]=e}));var g,m={propertychange:!0},b=o&&function(){for(var e=3,t=o.createElement("div"),i=t.getElementsByTagName("i");t.innerHTML="\x3c!--[if gt IE "+ ++e+"]><i></i><![endif]--\x3e",i[0];);return 4<e?e:n}(),w=/\S+/g;return{Jc:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],D:function(e,t,n){for(var i=0,o=e.length;i<o;i++)t.call(n,e[i],i,e)},A:"function"==typeof Array.prototype.indexOf?function(e,t){return Array.prototype.indexOf.call(e,t)}:function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},Lb:function(e,t,i){for(var o=0,s=e.length;o<s;o++)if(t.call(i,e[o],o,e))return e[o];return n},Pa:function(e,t){var n=y.a.A(e,t);0<n?e.splice(n,1):0===n&&e.shift()},wc:function(e){var t=[];return e&&y.a.D(e,(function(e){0>y.a.A(t,e)&&t.push(e)})),t},Mb:function(e,t,n){var i=[];if(e)for(var o=0,s=e.length;o<s;o++)i.push(t.call(n,e[o],o));return i},jb:function(e,t,n){var i=[];if(e)for(var o=0,s=e.length;o<s;o++)t.call(n,e[o],o)&&i.push(e[o]);return i},Nb:function(e,t){if(t instanceof Array)e.push.apply(e,t);else for(var n=0,i=t.length;n<i;n++)e.push(t[n]);return e},Na:function(e,t,n){var i=y.a.A(y.a.bc(e),t);0>i?n&&e.push(t):n||e.splice(i,1)},Ba:u,extend:t,setPrototypeOf:l,Ab:u?l:t,P:e,Ga:function(e,t,n){if(!e)return e;var i,o={};for(i in e)c.call(e,i)&&(o[i]=t.call(n,e[i],i,e));return o},Tb:function(e){for(;e.firstChild;)y.removeNode(e.firstChild)},Yb:function(e){for(var t=((e=y.a.la(e))[0]&&e[0].ownerDocument||o).createElement("div"),n=0,i=e.length;n<i;n++)t.appendChild(y.oa(e[n]));return t},Ca:function(e,t){for(var n=0,i=e.length,o=[];n<i;n++){var s=e[n].cloneNode(!0);o.push(t?y.oa(s):s)}return o},va:function(e,t){if(y.a.Tb(e),t)for(var n=0,i=t.length;n<i;n++)e.appendChild(t[n])},Xc:function(e,t){var n=e.nodeType?[e]:e;if(0<n.length){for(var i=n[0],o=i.parentNode,s=0,r=t.length;s<r;s++)o.insertBefore(t[s],i);for(s=0,r=n.length;s<r;s++)y.removeNode(n[s])}},Ua:function(e,t){if(e.length){for(t=8===t.nodeType&&t.parentNode||t;e.length&&e[0].parentNode!==t;)e.splice(0,1);for(;1<e.length&&e[e.length-1].parentNode!==t;)e.length--;if(1<e.length){var n=e[0],i=e[e.length-1];for(e.length=0;n!==i;)e.push(n),n=n.nextSibling;e.push(i)}}return e},Zc:function(e,t){7>b?e.setAttribute("selected",t):e.selected=t},Db:function(e){return null===e||e===n?"":e.trim?e.trim():e.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},Ud:function(e,t){return e=e||"",!(t.length>e.length)&&e.substring(0,t.length)===t},vd:function(e,t){if(e===t)return!0;if(11===e.nodeType)return!1;if(t.contains)return t.contains(1!==e.nodeType?e.parentNode:e);if(t.compareDocumentPosition)return 16==(16&t.compareDocumentPosition(e));for(;e&&e!=t;)e=e.parentNode;return!!e},Sb:function(e){return y.a.vd(e,e.ownerDocument.documentElement)},kd:function(e){return!!y.a.Lb(e,y.a.Sb)},R:function(e){return e&&e.tagName&&e.tagName.toLowerCase()},Ac:function(e){return y.onError?function(){try{return e.apply(this,arguments)}catch(e){throw y.onError&&y.onError(e),e}}:e},setTimeout:function(e,t){return setTimeout(y.a.Ac(e),t)},Gc:function(e){setTimeout((function(){throw y.onError&&y.onError(e),e}),0)},B:function(e,t,n){var i=y.a.Ac(n);if(n=m[t],y.options.useOnlyNativeEvents||n||!r)if(n||"function"!=typeof e.addEventListener){if(void 0===e.attachEvent)throw Error("Browser doesn't support addEventListener or attachEvent");var o=function(t){i.call(e,t)},s="on"+t;e.attachEvent(s,o),y.a.K.za(e,(function(){e.detachEvent(s,o)}))}else e.addEventListener(t,i,!1);else g||(g="function"==typeof r(e).on?"on":"bind"),r(e)[g](t,i)},Fb:function(e,t){if(!e||!e.nodeType)throw Error("element must be a DOM node when calling triggerEvent");var n;if(n=!("input"!==y.a.R(e)||!e.type||"click"!=t.toLowerCase())&&("checkbox"==(n=e.type)||"radio"==n),y.options.useOnlyNativeEvents||!r||n)if("function"==typeof o.createEvent){if("function"!=typeof e.dispatchEvent)throw Error("The supplied element doesn't support dispatchEvent");(n=o.createEvent(f[t]||"HTMLEvents")).initEvent(t,!0,!0,i,0,0,0,0,0,!1,!1,!1,!1,0,e),e.dispatchEvent(n)}else if(n&&e.click)e.click();else{if(void 0===e.fireEvent)throw Error("Browser doesn't support triggering events");e.fireEvent("on"+t)}else r(e).trigger(t)},f:function(e){return y.O(e)?e():e},bc:function(e){return y.O(e)?e.v():e},Eb:function(e,t,n){var i;t&&("object"==typeof e.classList?(i=e.classList[n?"add":"remove"],y.a.D(t.match(w),(function(t){i.call(e.classList,t)}))):"string"==typeof e.className.baseVal?h(e.className,"baseVal",t,n):h(e,"className",t,n))},Bb:function(e,t){var i=y.a.f(t);null!==i&&i!==n||(i="");var o=y.h.firstChild(e);!o||3!=o.nodeType||y.h.nextSibling(o)?y.h.va(e,[e.ownerDocument.createTextNode(i)]):o.data=i,y.a.Ad(e)},Yc:function(e,t){if(e.name=t,7>=b)try{var n=e.name.replace(/[&<>'"]/g,(function(e){return"&#"+e.charCodeAt(0)+";"}));e.mergeAttributes(o.createElement("<input name='"+n+"'/>"),!1)}catch(e){}},Ad:function(e){9<=b&&(e=1==e.nodeType?e:e.parentNode).style&&(e.style.zoom=e.style.zoom)},wd:function(e){if(b){var t=e.style.width;e.style.width=0,e.style.width=t}},Pd:function(e,t){e=y.a.f(e),t=y.a.f(t);for(var n=[],i=e;i<=t;i++)n.push(i);return n},la:function(e){for(var t=[],n=0,i=e.length;n<i;n++)t.push(e[n]);return t},Da:function(e){return d?Symbol(e):e},Zd:6===b,$d:7===b,W:b,Lc:function(e,t){for(var n=y.a.la(e.getElementsByTagName("input")).concat(y.a.la(e.getElementsByTagName("textarea"))),i="string"==typeof t?function(e){return e.name===t}:function(e){return t.test(e.name)},o=[],s=n.length-1;0<=s;s--)i(n[s])&&o.push(n[s]);return o},Nd:function(e){return"string"==typeof e&&(e=y.a.Db(e))?a&&a.parse?a.parse(e):new Function("return "+e)():null},hc:function(e,t,n){if(!a||!a.stringify)throw Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return a.stringify(y.a.f(e),t,n)},Od:function(t,n,i){var s=(i=i||{}).params||{},r=i.includeFields||this.Jc,a=t;if("object"==typeof t&&"form"===y.a.R(t)){a=t.action;for(var l=r.length-1;0<=l;l--)for(var h=y.a.Lc(t,r[l]),c=h.length-1;0<=c;c--)s[h[c].name]=h[c].value}n=y.a.f(n);var u=o.createElement("form");for(var d in u.style.display="none",u.action=a,u.method="post",n)(t=o.createElement("input")).type="hidden",t.name=d,t.value=y.a.hc(y.a.f(n[d])),u.appendChild(t);e(s,(function(e,t){var n=o.createElement("input");n.type="hidden",n.name=e,n.value=t,u.appendChild(n)})),o.body.appendChild(u),i.submitter?i.submitter(u):u.submit(),setTimeout((function(){u.parentNode.removeChild(u)}),0)}}}(),y.b("utils",y.a),y.b("utils.arrayForEach",y.a.D),y.b("utils.arrayFirst",y.a.Lb),y.b("utils.arrayFilter",y.a.jb),y.b("utils.arrayGetDistinctValues",y.a.wc),y.b("utils.arrayIndexOf",y.a.A),y.b("utils.arrayMap",y.a.Mb),y.b("utils.arrayPushAll",y.a.Nb),y.b("utils.arrayRemoveItem",y.a.Pa),y.b("utils.cloneNodes",y.a.Ca),y.b("utils.createSymbolOrString",y.a.Da),y.b("utils.extend",y.a.extend),y.b("utils.fieldsIncludedWithJsonPost",y.a.Jc),y.b("utils.getFormFields",y.a.Lc),y.b("utils.objectMap",y.a.Ga),y.b("utils.peekObservable",y.a.bc),y.b("utils.postJson",y.a.Od),y.b("utils.parseJson",y.a.Nd),y.b("utils.registerEventHandler",y.a.B),y.b("utils.stringifyJson",y.a.hc),y.b("utils.range",y.a.Pd),y.b("utils.toggleDomNodeCssClass",y.a.Eb),y.b("utils.triggerEvent",y.a.Fb),y.b("utils.unwrapObservable",y.a.f),y.b("utils.objectForEach",y.a.P),y.b("utils.addOrRemoveItem",y.a.Na),y.b("utils.setTextContent",y.a.Bb),y.b("unwrap",y.a.f),Function.prototype.bind||(Function.prototype.bind=function(e){var t=this;if(1===arguments.length)return function(){return t.apply(e,arguments)};var n=Array.prototype.slice.call(arguments,1);return function(){var i=n.slice(0);return i.push.apply(i,arguments),t.apply(e,i)}}),y.a.g=new function(){var e,t,i=0,o="__ko__"+(new Date).getTime(),s={};return y.a.W?(e=function(e,t){var r=e[o];if(!r||"null"===r||!s[r]){if(!t)return n;r=e[o]="ko"+i++,s[r]={}}return s[r]},t=function(e){var t=e[o];return!!t&&(delete s[t],e[o]=null,!0)}):(e=function(e,t){var n=e[o];return!n&&t&&(n=e[o]={}),n},t=function(e){return!!e[o]&&(delete e[o],!0)}),{get:function(t,n){var i=e(t,!1);return i&&i[n]},set:function(t,i,o){(t=e(t,o!==n))&&(t[i]=o)},Ub:function(t,n,i){return(t=e(t,!0))[n]||(t[n]=i)},clear:t,Z:function(){return i+++o}}},y.b("utils.domData",y.a.g),y.b("utils.domData.clear",y.a.g.clear),y.a.K=new function(){function e(e,t){var i=y.a.g.get(e,o);return i===n&&t&&(i=[],y.a.g.set(e,o,i)),i}function t(t){if(n=e(t,!1))for(var n=n.slice(0),o=0;o<n.length;o++)n[o](t);y.a.g.clear(t),y.a.K.cleanExternalData(t),a[t.nodeType]&&i(t.childNodes,!0)}function i(e,n){for(var i,o=[],s=0;s<e.length;s++)if((!n||8===e[s].nodeType)&&(t(o[o.length]=i=e[s]),e[s]!==i))for(;s--&&-1==y.a.A(o,e[s]););}var o=y.a.g.Z(),s={1:!0,8:!0,9:!0},a={1:!0,9:!0};return{za:function(t,n){if("function"!=typeof n)throw Error("Callback must be a function");e(t,!0).push(n)},yb:function(t,i){var s=e(t,!1);s&&(y.a.Pa(s,i),0==s.length&&y.a.g.set(t,o,n))},oa:function(e){return y.u.G((function(){s[e.nodeType]&&(t(e),a[e.nodeType]&&i(e.getElementsByTagName("*")))})),e},removeNode:function(e){y.oa(e),e.parentNode&&e.parentNode.removeChild(e)},cleanExternalData:function(e){r&&"function"==typeof r.cleanData&&r.cleanData([e])}}},y.oa=y.a.K.oa,y.removeNode=y.a.K.removeNode,y.b("cleanNode",y.oa),y.b("removeNode",y.removeNode),y.b("utils.domNodeDisposal",y.a.K),y.b("utils.domNodeDisposal.addDisposeCallback",y.a.K.za),y.b("utils.domNodeDisposal.removeDisposeCallback",y.a.K.yb),f=[0,"",""],w={thead:g=[1,"<table>","</table>"],tbody:g,tfoot:g,tr:[2,"<table><tbody>","</tbody></table>"],td:m=[3,"<table><tbody><tr>","</tr></tbody></table>"],th:m,option:b=[1,"<select multiple='multiple'>","</select>"],optgroup:b},E=8>=y.a.W,y.a.ua=function(e,t){var n;if(r){if(r.parseHTML)n=r.parseHTML(e,t)||[];else if((n=r.clean([e],t))&&n[0]){for(var s=n[0];s.parentNode&&11!==s.parentNode.nodeType;)s=s.parentNode;s.parentNode&&s.parentNode.removeChild(s)}}else{(n=t)||(n=o),s=n.parentWindow||n.defaultView||i;var a,l=y.a.Db(e).toLowerCase(),h=n.createElement("div");for(a=(l=l.match(/^(?:\x3c!--.*?--\x3e\s*?)*?<([a-z]+)[\s>]/))&&w[l[1]]||f,l=a[0],a="ignored<div>"+a[1]+e+a[2]+"</div>","function"==typeof s.innerShiv?h.appendChild(s.innerShiv(a)):(E&&n.body.appendChild(h),h.innerHTML=a,E&&h.parentNode.removeChild(h));l--;)h=h.lastChild;n=y.a.la(h.lastChild.childNodes)}return n},y.a.Md=function(e,t){var n=y.a.ua(e,t);return n.length&&n[0].parentElement||y.a.Yb(n)},y.a.fc=function(e,t){if(y.a.Tb(e),null!==(t=y.a.f(t))&&t!==n)if("string"!=typeof t&&(t=t.toString()),r)r(e).html(t);else for(var i=y.a.ua(t,e.ownerDocument),o=0;o<i.length;o++)e.appendChild(i[o])},y.b("utils.parseHtmlFragment",y.a.ua),y.b("utils.setHtml",y.a.fc),y.aa=function(){var e={};return{Xb:function(t){if("function"!=typeof t)throw Error("You can only pass a function to ko.memoization.memoize()");var n=(4294967296*(1+Math.random())|0).toString(16).substring(1)+(4294967296*(1+Math.random())|0).toString(16).substring(1);return e[n]=t,"\x3c!--[ko_memo:"+n+"]--\x3e"},bd:function(t,i){var o=e[t];if(o===n)throw Error("Couldn't find any memo with ID "+t+". Perhaps it's already been unmemoized.");try{return o.apply(null,i||[]),!0}finally{delete e[t]}},cd:function(e,t){var n=[];!function e(t,n){if(t)if(8==t.nodeType)null!=(i=y.aa.Uc(t.nodeValue))&&n.push({ud:t,Kd:i});else if(1==t.nodeType)for(var i=0,o=t.childNodes,s=o.length;i<s;i++)e(o[i],n)}(e,n);for(var i=0,o=n.length;i<o;i++){var s=n[i].ud,r=[s];t&&y.a.Nb(r,t),y.aa.bd(n[i].Kd,r),s.nodeValue="",s.parentNode&&s.parentNode.removeChild(s)}},Uc:function(e){return(e=e.match(/^\[ko_memo\:(.*?)\]$/))?e[1]:null}}}(),y.b("memoization",y.aa),y.b("memoization.memoize",y.aa.Xb),y.b("memoization.unmemoize",y.aa.bd),y.b("memoization.parseMemoText",y.aa.Uc),y.b("memoization.unmemoizeDomNodeAndDescendants",y.aa.cd),y.na=function(){function e(){if(s)for(var e,t=s,i=0;a<s;)if(e=n[a++]){if(a>t){if(5e3<=++i){a=s,y.a.Gc(Error("'Too much recursion' after processing "+i+" task groups."));break}t=s}try{e()}catch(e){y.a.Gc(e)}}}function t(){e(),a=s=n.length=0}var n=[],s=0,r=1,a=0;return{scheduler:i.MutationObserver?function(e){var t=o.createElement("div");return new MutationObserver(e).observe(t,{attributes:!0}),function(){t.classList.toggle("foo")}}(t):o&&"onreadystatechange"in o.createElement("script")?function(e){var t=o.createElement("script");t.onreadystatechange=function(){t.onreadystatechange=null,o.documentElement.removeChild(t),t=null,e()},o.documentElement.appendChild(t)}:function(e){setTimeout(e,0)},zb:function(e){return s||y.na.scheduler(t),n[s++]=e,r++},cancel:function(e){(e-=r-s)>=a&&e<s&&(n[e]=null)},resetForTesting:function(){var e=s-a;return a=s=n.length=0,e},Sd:e}}(),y.b("tasks",y.na),y.b("tasks.schedule",y.na.zb),y.b("tasks.runEarly",y.na.Sd),y.Ta={throttle:function(e,t){e.throttleEvaluation=t;var n=null;return y.$({read:e,write:function(i){clearTimeout(n),n=y.a.setTimeout((function(){e(i)}),t)}})},rateLimit:function(e,t){var n,i,o;"number"==typeof t?n=t:(n=t.timeout,i=t.method),e.Hb=!1,o="function"==typeof i?i:"notifyWhenChangesStop"==i?c:h,e.ub((function(e){return o(e,n,t)}))},deferred:function(e,t){if(!0!==t)throw Error("The 'deferred' extender only accepts the value 'true', because it is not supported to turn deferral off once enabled.");e.Hb||(e.Hb=!0,e.ub((function(t){var i,o=!1;return function(){if(!o){y.na.cancel(i),i=y.na.zb(t);try{o=!0,e.notifySubscribers(n,"dirty")}finally{o=!1}}}})))},notify:function(e,t){e.equalityComparer="always"==t?null:l}};var S={undefined:1,boolean:1,number:1,string:1};y.b("extenders",y.Ta),y.ic=function(e,t,n){this.da=e,this.lc=t,this.mc=n,this.Ib=!1,this.fb=this.Jb=null,y.L(this,"dispose",this.s),y.L(this,"disposeWhenNodeIsRemoved",this.l)},y.ic.prototype.s=function(){this.Ib||(this.fb&&y.a.K.yb(this.Jb,this.fb),this.Ib=!0,this.mc(),this.da=this.lc=this.mc=this.Jb=this.fb=null)},y.ic.prototype.l=function(e){this.Jb=e,y.a.K.za(e,this.fb=this.s.bind(this))},y.T=function(){y.a.Ab(this,N),N.qb(this)};var N={qb:function(e){e.U={change:[]},e.sc=1},subscribe:function(e,t,n){var i=this;n=n||"change";var o=new y.ic(i,t?e.bind(t):e,(function(){y.a.Pa(i.U[n],o),i.hb&&i.hb(n)}));return i.Qa&&i.Qa(n),i.U[n]||(i.U[n]=[]),i.U[n].push(o),o},notifySubscribers:function(e,t){if("change"===(t=t||"change")&&this.Gb(),this.Wa(t)){var n="change"===t&&this.ed||this.U[t].slice(0);try{y.u.xc();for(var i,o=0;i=n[o];++o)i.Ib||i.lc(e)}finally{y.u.end()}}},ob:function(){return this.sc},Dd:function(e){return this.ob()!==e},Gb:function(){++this.sc},ub:function(e){var t,n,i,o,s,r=this,a=y.O(r);r.gb||(r.gb=r.notifySubscribers,r.notifySubscribers=u);var l=e((function(){r.Ja=!1,a&&o===r&&(o=r.nc?r.nc():r());var e=n||s&&r.sb(i,o);s=n=t=!1,e&&r.gb(i=o)}));r.qc=function(e,n){n&&r.Ja||(s=!n),r.ed=r.U.change.slice(0),r.Ja=t=!0,o=e,l()},r.pc=function(e){t||(i=e,r.gb(e,"beforeChange"))},r.rc=function(){s=!0},r.gd=function(){r.sb(i,r.v(!0))&&(n=!0)}},Wa:function(e){return this.U[e]&&this.U[e].length},Bd:function(e){if(e)return this.U[e]&&this.U[e].length||0;var t=0;return y.a.P(this.U,(function(e,n){"dirty"!==e&&(t+=n.length)})),t},sb:function(e,t){return!this.equalityComparer||!this.equalityComparer(e,t)},toString:function(){return"[object Object]"},extend:function(e){var t=this;return e&&y.a.P(e,(function(e,n){var i=y.Ta[e];"function"==typeof i&&(t=i(t,n)||t)})),t}};y.L(N,"init",N.qb),y.L(N,"subscribe",N.subscribe),y.L(N,"extend",N.extend),y.L(N,"getSubscriptionsCount",N.Bd),y.a.Ba&&y.a.setPrototypeOf(N,Function.prototype),y.T.fn=N,y.Qc=function(e){return null!=e&&"function"==typeof e.subscribe&&"function"==typeof e.notifySubscribers},y.b("subscribable",y.T),y.b("isSubscribable",y.Qc),y.S=y.u=function(){function e(e){i.push(n),n=e}function t(){n=i.pop()}var n,i=[],o=0;return{xc:e,end:t,cc:function(e){if(n){if(!y.Qc(e))throw Error("Only subscribable things can act as dependencies");n.od.call(n.pd,e,e.fd||(e.fd=++o))}},G:function(n,i,o){try{return e(),n.apply(i,o||[])}finally{t()}},qa:function(){if(n)return n.o.qa()},Va:function(){if(n)return n.o.Va()},Ya:function(){if(n)return n.Ya},o:function(){if(n)return n.o}}}(),y.b("computedContext",y.S),y.b("computedContext.getDependenciesCount",y.S.qa),y.b("computedContext.getDependencies",y.S.Va),y.b("computedContext.isInitial",y.S.Ya),y.b("computedContext.registerDependency",y.S.cc),y.b("ignoreDependencies",y.Yd=y.u.G);var v=y.a.Da("_latestValue");y.ta=function(e){function t(){return 0<arguments.length?(t.sb(t[v],arguments[0])&&(t.ya(),t[v]=arguments[0],t.xa()),this):(y.u.cc(t),t[v])}return t[v]=e,y.a.Ba||y.a.extend(t,y.T.fn),y.T.fn.qb(t),y.a.Ab(t,C),y.options.deferUpdates&&y.Ta.deferred(t,!0),t};var C={equalityComparer:l,v:function(){return this[v]},xa:function(){this.notifySubscribers(this[v],"spectate"),this.notifySubscribers(this[v])},ya:function(){this.notifySubscribers(this[v],"beforeChange")}};y.a.Ba&&y.a.setPrototypeOf(C,y.T.fn);var T=y.ta.Ma="__ko_proto__";C[T]=y.ta,y.O=function(e){if((e="function"==typeof e&&e[T])&&e!==C[T]&&e!==y.o.fn[T])throw Error("Invalid object that looks like an observable; possibly from another Knockout instance");return!!e},y.Za=function(e){return"function"==typeof e&&(e[T]===C[T]||e[T]===y.o.fn[T]&&e.Nc)},y.b("observable",y.ta),y.b("isObservable",y.O),y.b("isWriteableObservable",y.Za),y.b("isWritableObservable",y.Za),y.b("observable.fn",C),y.L(C,"peek",C.v),y.L(C,"valueHasMutated",C.xa),y.L(C,"valueWillMutate",C.ya),y.Ha=function(e){if("object"!=typeof(e=e||[])||!("length"in e))throw Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");return e=y.ta(e),y.a.Ab(e,y.Ha.fn),e.extend({trackArrayChanges:!0})},y.Ha.fn={remove:function(e){for(var t=this.v(),n=[],i="function"!=typeof e||y.O(e)?function(t){return t===e}:e,o=0;o<t.length;o++){var s=t[o];if(i(s)){if(0===n.length&&this.ya(),t[o]!==s)throw Error("Array modified during remove; cannot remove item");n.push(s),t.splice(o,1),o--}}return n.length&&this.xa(),n},removeAll:function(e){if(e===n){var t=this.v(),i=t.slice(0);return this.ya(),t.splice(0,t.length),this.xa(),i}return e?this.remove((function(t){return 0<=y.a.A(e,t)})):[]},destroy:function(e){var t=this.v(),n="function"!=typeof e||y.O(e)?function(t){return t===e}:e;this.ya();for(var i=t.length-1;0<=i;i--){var o=t[i];n(o)&&(o._destroy=!0)}this.xa()},destroyAll:function(e){return e===n?this.destroy((function(){return!0})):e?this.destroy((function(t){return 0<=y.a.A(e,t)})):[]},indexOf:function(e){var t=this();return y.a.A(t,e)},replace:function(e,t){var n=this.indexOf(e);0<=n&&(this.ya(),this.v()[n]=t,this.xa())},sorted:function(e){var t=this().slice(0);return e?t.sort(e):t.sort()},reversed:function(){return this().slice(0).reverse()}},y.a.Ba&&y.a.setPrototypeOf(y.Ha.fn,y.ta.fn),y.a.D("pop push reverse shift sort splice unshift".split(" "),(function(e){y.Ha.fn[e]=function(){var t=this.v();this.ya(),this.zc(t,e,arguments);var n=t[e].apply(t,arguments);return this.xa(),n===t?this:n}})),y.a.D(["slice"],(function(e){y.Ha.fn[e]=function(){var t=this();return t[e].apply(t,arguments)}})),y.Pc=function(e){return y.O(e)&&"function"==typeof e.remove&&"function"==typeof e.push},y.b("observableArray",y.Ha),y.b("isObservableArray",y.Pc),y.Ta.trackArrayChanges=function(e,t){function i(){function t(){if(h){var t,n=[].concat(e.v()||[]);e.Wa("arrayChange")&&((!l||1<h)&&(l=y.a.Pb(r,n,e.Ob)),t=l),r=n,l=null,h=0,t&&t.length&&e.notifySubscribers(t,"arrayChange")}}a?t():(a=!0,s=e.subscribe((function(){++h}),null,"spectate"),r=[].concat(e.v()||[]),l=null,o=e.subscribe(t))}if(e.Ob={},t&&"object"==typeof t&&y.a.extend(e.Ob,t),e.Ob.sparse=!0,!e.zc){var o,s,r,a=!1,l=null,h=0,c=e.Qa,u=e.hb;e.Qa=function(t){c&&c.call(e,t),"arrayChange"===t&&i()},e.hb=function(t){u&&u.call(e,t),"arrayChange"!==t||e.Wa("arrayChange")||(o&&o.s(),s&&s.s(),s=o=null,a=!1,r=n)},e.zc=function(e,t,n){function i(e,t,n){return o[o.length]={status:e,value:t,index:n}}if(a&&!h){var o=[],s=e.length,r=n.length,c=0;switch(t){case"push":c=s;case"unshift":for(t=0;t<r;t++)i("added",n[t],c+t);break;case"pop":c=s-1;case"shift":s&&i("deleted",e[c],c);break;case"splice":t=Math.min(Math.max(0,0>n[0]?s+n[0]:n[0]),s),s=1===r?s:Math.min(t+(n[1]||0),s),r=t+r-2,c=Math.max(s,r);for(var u=[],d=[],p=2;t<c;++t,++p)t<s&&d.push(i("deleted",e[t],t)),t<r&&u.push(i("added",n[p],t));y.a.Kc(d,u);break;default:return}l=o}}}};var x=y.a.Da("_state");y.o=y.$=function(e,t,i){function o(){if(0<arguments.length){if("function"!=typeof s)throw Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");return s.apply(r.nb,arguments),this}return r.ra||y.u.cc(o),(r.ka||r.J&&o.Xa())&&o.ha(),r.X}if("object"==typeof e?i=e:(i=i||{},e&&(i.read=e)),"function"!=typeof i.read)throw Error("Pass a function that returns the value of the ko.computed");var s=i.write,r={X:n,sa:!0,ka:!0,rb:!1,jc:!1,ra:!1,wb:!1,J:!1,Wc:i.read,nb:t||i.owner,l:i.disposeWhenNodeIsRemoved||i.l||null,Sa:i.disposeWhen||i.Sa,Rb:null,I:{},V:0,Ic:null};return o[x]=r,o.Nc="function"==typeof s,y.a.Ba||y.a.extend(o,y.T.fn),y.T.fn.qb(o),y.a.Ab(o,I),i.pure?(r.wb=!0,r.J=!0,y.a.extend(o,P)):i.deferEvaluation&&y.a.extend(o,A),y.options.deferUpdates&&y.Ta.deferred(o,!0),r.l&&(r.jc=!0,r.l.nodeType||(r.l=null)),r.J||i.deferEvaluation||o.ha(),r.l&&o.ja()&&y.a.K.za(r.l,r.Rb=function(){o.s()}),o};var I={equalityComparer:l,qa:function(){return this[x].V},Va:function(){var e=[];return y.a.P(this[x].I,(function(t,n){e[n.Ka]=n.da})),e},Vb:function(e){if(!this[x].V)return!1;var t=this.Va();return-1!==y.a.A(t,e)||!!y.a.Lb(t,(function(t){return t.Vb&&t.Vb(e)}))},uc:function(e,t,n){if(this[x].wb&&t===this)throw Error("A 'pure' computed must not be called recursively");this[x].I[e]=n,n.Ka=this[x].V++,n.La=t.ob()},Xa:function(){var e,t,n=this[x].I;for(e in n)if(Object.prototype.hasOwnProperty.call(n,e)&&(t=n[e],this.Ia&&t.da.Ja||t.da.Dd(t.La)))return!0},Jd:function(){this.Ia&&!this[x].rb&&this.Ia(!1)},ja:function(){var e=this[x];return e.ka||0<e.V},Rd:function(){this.Ja?this[x].ka&&(this[x].sa=!0):this.Hc()},$c:function(e){if(e.Hb){var t=e.subscribe(this.Jd,this,"dirty"),n=e.subscribe(this.Rd,this);return{da:e,s:function(){t.s(),n.s()}}}return e.subscribe(this.Hc,this)},Hc:function(){var e=this,t=e.throttleEvaluation;t&&0<=t?(clearTimeout(this[x].Ic),this[x].Ic=y.a.setTimeout((function(){e.ha(!0)}),t)):e.Ia?e.Ia(!0):e.ha(!0)},ha:function(e){var t=this[x],n=t.Sa,i=!1;if(!t.rb&&!t.ra){if(t.l&&!y.a.Sb(t.l)||n&&n()){if(!t.jc)return void this.s()}else t.jc=!1;t.rb=!0;try{i=this.zd(e)}finally{t.rb=!1}return i}},zd:function(e){var t=this[x],i=!1,o=t.wb?n:!t.V;i={qd:this,mb:t.I,Qb:t.V},y.u.xc({pd:i,od:p,o:this,Ya:o}),t.I={},t.V=0;var s=this.yd(t,i);return t.V?i=this.sb(t.X,s):(this.s(),i=!0),i&&(t.J?this.Gb():this.notifySubscribers(t.X,"beforeChange"),t.X=s,this.notifySubscribers(t.X,"spectate"),!t.J&&e&&this.notifySubscribers(t.X),this.rc&&this.rc()),o&&this.notifySubscribers(t.X,"awake"),i},yd:function(e,t){try{var n=e.Wc;return e.nb?n.call(e.nb):n()}finally{y.u.end(),t.Qb&&!e.J&&y.a.P(t.mb,d),e.sa=e.ka=!1}},v:function(e){var t=this[x];return(t.ka&&(e||!t.V)||t.J&&this.Xa())&&this.ha(),t.X},ub:function(e){y.T.fn.ub.call(this,e),this.nc=function(){return this[x].J||(this[x].sa?this.ha():this[x].ka=!1),this[x].X},this.Ia=function(e){this.pc(this[x].X),this[x].ka=!0,e&&(this[x].sa=!0),this.qc(this,!e)}},s:function(){var e=this[x];!e.J&&e.I&&y.a.P(e.I,(function(e,t){t.s&&t.s()})),e.l&&e.Rb&&y.a.K.yb(e.l,e.Rb),e.I=n,e.V=0,e.ra=!0,e.sa=!1,e.ka=!1,e.J=!1,e.l=n,e.Sa=n,e.Wc=n,this.Nc||(e.nb=n)}},P={Qa:function(e){var t=this,n=t[x];if(!n.ra&&n.J&&"change"==e){if(n.J=!1,n.sa||t.Xa())n.I=null,n.V=0,t.ha()&&t.Gb();else{var i=[];y.a.P(n.I,(function(e,t){i[t.Ka]=e})),y.a.D(i,(function(e,i){var o=n.I[e],s=t.$c(o.da);s.Ka=i,s.La=o.La,n.I[e]=s})),t.Xa()&&t.ha()&&t.Gb()}n.ra||t.notifySubscribers(n.X,"awake")}},hb:function(e){var t=this[x];t.ra||"change"!=e||this.Wa("change")||(y.a.P(t.I,(function(e,n){n.s&&(t.I[e]={da:n.da,Ka:n.Ka,La:n.La},n.s())})),t.J=!0,this.notifySubscribers(n,"asleep"))},ob:function(){var e=this[x];return e.J&&(e.sa||this.Xa())&&this.ha(),y.T.fn.ob.call(this)}},A={Qa:function(e){"change"!=e&&"beforeChange"!=e||this.v()}};y.a.Ba&&y.a.setPrototypeOf(I,y.T.fn);var O=y.ta.Ma;I[O]=y.o,y.Oc=function(e){return"function"==typeof e&&e[O]===I[O]},y.Fd=function(e){return y.Oc(e)&&e[x]&&e[x].wb},y.b("computed",y.o),y.b("dependentObservable",y.o),y.b("isComputed",y.Oc),y.b("isPureComputed",y.Fd),y.b("computed.fn",I),y.L(I,"peek",I.v),y.L(I,"dispose",I.s),y.L(I,"isActive",I.ja),y.L(I,"getDependenciesCount",I.qa),y.L(I,"getDependencies",I.Va),y.xb=function(e,t){return"function"==typeof e?y.o(e,t,{pure:!0}):((e=y.a.extend({},e)).pure=!0,y.o(e,t))},y.b("pureComputed",y.xb),function(){function e(i,o,s){if(s=s||new t,"object"!=typeof(i=o(i))||null===i||i===n||i instanceof RegExp||i instanceof Date||i instanceof String||i instanceof Number||i instanceof Boolean)return i;var r=i instanceof Array?[]:{};return s.save(i,r),function(e,t){if(e instanceof Array){for(var n=0;n<e.length;n++)t(n);"function"==typeof e.toJSON&&t("toJSON")}else for(n in e)t(n)}(i,(function(t){var a=o(i[t]);switch(typeof a){case"boolean":case"number":case"string":case"function":r[t]=a;break;case"object":case"undefined":var l=s.get(a);r[t]=l!==n?l:e(a,o,s)}})),r}function t(){this.keys=[],this.values=[]}y.ad=function(t){if(0==arguments.length)throw Error("When calling ko.toJS, pass the object you want to convert.");return e(t,(function(e){for(var t=0;y.O(e)&&10>t;t++)e=e();return e}))},y.toJSON=function(e,t,n){return e=y.ad(e),y.a.hc(e,t,n)},t.prototype={constructor:t,save:function(e,t){var n=y.a.A(this.keys,e);0<=n?this.values[n]=t:(this.keys.push(e),this.values.push(t))},get:function(e){return 0<=(e=y.a.A(this.keys,e))?this.values[e]:n}}}(),y.b("toJS",y.ad),y.b("toJSON",y.toJSON),y.Wd=function(e,t,n){function i(t){var i=y.xb(e,n).extend({ma:"always"}),o=i.subscribe((function(e){e&&(o.s(),t(e))}));return i.notifySubscribers(i.v()),o}return"function"!=typeof Promise||t?i(t.bind(n)):new Promise(i)},y.b("when",y.Wd),y.w={M:function(e){switch(y.a.R(e)){case"option":return!0===e.__ko__hasDomDataOptionValue__?y.a.g.get(e,y.c.options.$b):7>=y.a.W?e.getAttributeNode("value")&&e.getAttributeNode("value").specified?e.value:e.text:e.value;case"select":return 0<=e.selectedIndex?y.w.M(e.options[e.selectedIndex]):n;default:return e.value}},cb:function(e,t,i){switch(y.a.R(e)){case"option":"string"==typeof t?(y.a.g.set(e,y.c.options.$b,n),"__ko__hasDomDataOptionValue__"in e&&delete e.__ko__hasDomDataOptionValue__,e.value=t):(y.a.g.set(e,y.c.options.$b,t),e.__ko__hasDomDataOptionValue__=!0,e.value="number"==typeof t?t:"");break;case"select":""!==t&&null!==t||(t=n);for(var o,s=-1,r=0,a=e.options.length;r<a;++r)if((o=y.w.M(e.options[r]))==t||""===o&&t===n){s=r;break}(i||0<=s||t===n&&1<e.size)&&(e.selectedIndex=s,6===y.a.W&&y.a.setTimeout((function(){e.selectedIndex=s}),0));break;default:null!==t&&t!==n||(t=""),e.value=t}}},y.b("selectExtensions",y.w),y.b("selectExtensions.readValue",y.w.M),y.b("selectExtensions.writeValue",y.w.cb),y.m=function(){function e(e){123===(e=y.a.Db(e)).charCodeAt(0)&&(e=e.slice(1,-1));var t,n=[],r=(e+="\n,").match(i),a=[],l=0;if(1<r.length){for(var h,c=0;h=r[c];++c){var u=h.charCodeAt(0);if(44===u){if(0>=l){n.push(t&&a.length?{key:t,value:a.join("")}:{unknown:t||a.join("")}),t=l=0,a=[];continue}}else if(58===u){if(!l&&!t&&1===a.length){t=a.pop();continue}}else{if(47===u&&1<h.length&&(47===h.charCodeAt(1)||42===h.charCodeAt(1)))continue;47===u&&c&&1<h.length?(u=r[c-1].match(o))&&!s[u[0]]&&(r=(e=e.substr(e.indexOf(h)+1)).match(i),c=-1,h="/"):40===u||123===u||91===u?++l:41===u||125===u||93===u?--l:t||a.length||34!==u&&39!==u||(h=h.slice(1,-1))}a.push(h)}if(0<l)throw Error("Unbalanced parentheses, braces, or brackets")}return n}var t=["true","false","null","undefined"],n=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i,i=RegExp("\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|`(?:\\\\.|[^`])*`|/\\*(?:[^*]|\\*+[^*/])*\\*+/|//.*\n|/(?:\\\\.|[^/])+/w*|[^\\s:,/][^,\"'`{}()/:[\\]]*[^\\s,\"'`{}()/:[\\]]|[^\\s]","g"),o=/[\])"'A-Za-z0-9_$]+$/,s={in:1,return:1,typeof:1},r={};return{Ra:[],wa:r,ac:e,vb:function(i,o){function s(e,i){var o;if(!c){var u=y.getBindingHandler(e);if(u&&u.preprocess&&!(i=u.preprocess(i,e,s)))return;(u=r[e])&&(o=i,0<=y.a.A(t,o)?o=!1:(u=o.match(n),o=null!==u&&(u[1]?"Object("+u[1]+")"+u[2]:o)),u=o),u&&l.push("'"+("string"==typeof r[e]?r[e]:e)+"':function(_z){"+o+"=_z}")}h&&(i="function(){return "+i+" }"),a.push("'"+e+"':"+i)}var a=[],l=[],h=(o=o||{}).valueAccessors,c=o.bindingParams,u="string"==typeof i?e(i):i;return y.a.D(u,(function(e){s(e.key||e.unknown,e.value)})),l.length&&s("_ko_property_writers","{"+l.join(",")+" }"),a.join(",")},Id:function(e,t){for(var n=0;n<e.length;n++)if(e[n].key==t)return!0;return!1},eb:function(e,t,n,i,o){e&&y.O(e)?!y.Za(e)||o&&e.v()===i||e(i):(e=t.get("_ko_property_writers"))&&e[n]&&e[n](i)}}}(),y.b("expressionRewriting",y.m),y.b("expressionRewriting.bindingRewriteValidators",y.m.Ra),y.b("expressionRewriting.parseObjectLiteral",y.m.ac),y.b("expressionRewriting.preProcessBindings",y.m.vb),y.b("expressionRewriting._twoWayBindings",y.m.wa),y.b("jsonExpressionRewriting",y.m),y.b("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",y.m.vb),function(){function e(e){return 8==e.nodeType&&r.test(s?e.text:e.nodeValue)}function t(e){return 8==e.nodeType&&a.test(s?e.text:e.nodeValue)}function n(n,i){for(var o=n,s=1,r=[];o=o.nextSibling;){if(t(o)&&(y.a.g.set(o,h,!0),0==--s))return r;r.push(o),e(o)&&s++}if(!i)throw Error("Cannot find closing comment tag to match: "+n.nodeValue);return null}function i(e,t){var i=n(e,t);return i?0<i.length?i[i.length-1].nextSibling:e.nextSibling:null}var s=o&&"\x3c!--test--\x3e"===o.createComment("test").text,r=s?/^\x3c!--\s*ko(?:\s+([\s\S]+))?\s*--\x3e$/:/^\s*ko(?:\s+([\s\S]+))?\s*$/,a=s?/^\x3c!--\s*\/ko\s*--\x3e$/:/^\s*\/ko\s*$/,l={ul:!0,ol:!0},h="__ko_matchedEndComment__";y.h={ea:{},childNodes:function(t){return e(t)?n(t):t.childNodes},Ea:function(t){if(e(t))for(var n=0,i=(t=y.h.childNodes(t)).length;n<i;n++)y.removeNode(t[n]);else y.a.Tb(t)},va:function(t,n){if(e(t)){y.h.Ea(t);for(var i=t.nextSibling,o=0,s=n.length;o<s;o++)i.parentNode.insertBefore(n[o],i)}else y.a.va(t,n)},Vc:function(t,n){var i;e(t)?(i=t.nextSibling,t=t.parentNode):i=t.firstChild,i?n!==i&&t.insertBefore(n,i):t.appendChild(n)},Wb:function(t,n,i){i?(i=i.nextSibling,e(t)&&(t=t.parentNode),i?n!==i&&t.insertBefore(n,i):t.appendChild(n)):y.h.Vc(t,n)},firstChild:function(n){if(e(n))return!n.nextSibling||t(n.nextSibling)?null:n.nextSibling;if(n.firstChild&&t(n.firstChild))throw Error("Found invalid end comment, as the first child of "+n);return n.firstChild},nextSibling:function(n){if(e(n)&&(n=i(n)),n.nextSibling&&t(n.nextSibling)){var o=n.nextSibling;if(t(o)&&!y.a.g.get(o,h))throw Error("Found end comment without a matching opening comment, as child of "+n);return null}return n.nextSibling},Cd:e,Vd:function(e){return(e=(s?e.text:e.nodeValue).match(r))?e[1]:null},Sc:function(n){if(l[y.a.R(n)]){var o=n.firstChild;if(o)do{if(1===o.nodeType){var s,r=null;if(s=o.firstChild)do{if(r)r.push(s);else if(e(s)){var a=i(s,!0);a?s=a:r=[s]}else t(s)&&(r=[s])}while(s=s.nextSibling);if(s=r)for(r=o.nextSibling,a=0;a<s.length;a++)r?n.insertBefore(s[a],r):n.appendChild(s[a])}}while(o=o.nextSibling)}}}}(),y.b("virtualElements",y.h),y.b("virtualElements.allowedBindings",y.h.ea),y.b("virtualElements.emptyNode",y.h.Ea),y.b("virtualElements.insertAfter",y.h.Wb),y.b("virtualElements.prepend",y.h.Vc),y.b("virtualElements.setDomNodeChildren",y.h.va),y.ga=function(){this.nd={}},y.a.extend(y.ga.prototype,{nodeHasBindings:function(e){switch(e.nodeType){case 1:return null!=e.getAttribute("data-bind")||y.j.getComponentNameForNode(e);case 8:return y.h.Cd(e);default:return!1}},getBindings:function(e,t){var n=(n=this.getBindingsString(e,t))?this.parseBindingsString(n,t,e):null;return y.j.tc(n,e,t,!1)},getBindingAccessors:function(e,t){var n=(n=this.getBindingsString(e,t))?this.parseBindingsString(n,t,e,{valueAccessors:!0}):null;return y.j.tc(n,e,t,!0)},getBindingsString:function(e){switch(e.nodeType){case 1:return e.getAttribute("data-bind");case 8:return y.h.Vd(e);default:return null}},parseBindingsString:function(e,t,n,i){try{var o,s=this.nd,r=e+(i&&i.valueAccessors||"");if(!(o=s[r])){var a,l="with($context){with($data||{}){return{"+y.m.vb(e,i)+"}}}";a=new Function("$context","$element",l),o=s[r]=a}return o(t,n)}catch(t){throw t.message="Unable to parse bindings.\nBindings value: "+e+"\nMessage: "+t.message,t}}}),y.ga.instance=new y.ga,y.b("bindingProvider",y.ga),function(){function e(e){var t=(e=y.a.g.get(e,S))&&e.N;t&&(e.N=null,t.Tc())}function t(t,n,i){this.node=t,this.yc=n,this.kb=[],this.H=!1,n.N||y.a.K.za(t,e),i&&i.N&&(i.N.kb.push(t),this.Kb=i)}function s(e){return function(){return e}}function a(e){return e()}function l(e){return y.a.Ga(y.u.G(e),(function(t,n){return function(){return e()[n]}}))}function h(e,t,n){return"function"==typeof e?l(e.bind(null,t,n)):y.a.Ga(e,s)}function c(e,t){return l(this.getBindings.bind(this,e,t))}function u(e,t){var n=y.h.firstChild(t);if(n){var i,o=y.ga.instance,s=o.preprocessNode;if(s){for(;i=n;)n=y.h.nextSibling(i),s.call(o,i);n=y.h.firstChild(t)}for(;i=n;)n=y.h.nextSibling(i),d(e,i)}y.i.ma(t,y.i.H)}function d(e,t){var n=e,i=1===t.nodeType;i&&y.h.Sc(t),(i||y.ga.instance.nodeHasBindings(t))&&(n=p(t,null,e).bindingContextForDescendants),n&&!w[y.a.R(t)]&&u(n,t)}function p(e,t,i){var o,s=y.a.g.Ub(e,S,{}),r=s.hd;if(!t){if(r)throw Error("You cannot apply bindings multiple times to the same element.");s.hd=!0}if(r||(s.context=i),s.Zb||(s.Zb={}),t&&"function"!=typeof t)o=t;else{var l=y.ga.instance,h=l.getBindingAccessors||c,u=y.$((function(){return(o=t?t(i,e):h.call(l,e,i))&&(i[g]&&i[g](),i[b]&&i[b]()),o}),null,{l:e});o&&u.ja()||(u=null)}var d,p=i;if(o){var f=function(){return y.a.Ga(u?u():o,a)},m=u?function(e){return function(){return a(u()[e])}}:function(e){return o[e]};f.get=function(e){return o[e]&&a(m(e))},f.has=function(e){return e in o},y.i.H in o&&y.i.subscribe(e,y.i.H,(function(){var t=(0,o[y.i.H])();if(t){var n=y.h.childNodes(e);n.length&&t(n,y.Ec(n[0]))}})),y.i.pa in o&&(p=y.i.Cb(e,i),y.i.subscribe(e,y.i.pa,(function(){var t=(0,o[y.i.pa])();t&&y.h.firstChild(e)&&t(e)}))),s=function(e){var t=[],n={},i=[];return y.a.P(e,(function o(s){if(!n[s]){var r=y.getBindingHandler(s);r&&(r.after&&(i.push(s),y.a.D(r.after,(function(t){if(e[t]){if(-1!==y.a.A(i,t))throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+i.join(", "));o(t)}})),i.length--),t.push({key:s,Mc:r})),n[s]=!0}})),t}(o),y.a.D(s,(function(t){var i=t.Mc.init,s=t.Mc.update,r=t.key;if(8===e.nodeType&&!y.h.ea[r])throw Error("The binding '"+r+"' cannot be used with virtual elements");try{"function"==typeof i&&y.u.G((function(){var t=i(e,m(r),f,p.$data,p);if(t&&t.controlsDescendantBindings){if(d!==n)throw Error("Multiple bindings ("+d+" and "+r+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");d=r}})),"function"==typeof s&&y.$((function(){s(e,m(r),f,p.$data,p)}),null,{l:e})}catch(e){throw e.message='Unable to process binding "'+r+": "+o[r]+'"\nMessage: '+e.message,e}}))}return{shouldBindDescendants:s=d===n,bindingContextForDescendants:s&&p}}function f(e,t){return e&&e instanceof y.fa?e:new y.fa(e,n,n,t)}var g=y.a.Da("_subscribable"),m=y.a.Da("_ancestorBindingInfo"),b=y.a.Da("_dataDependency");y.c={};var w={script:!0,textarea:!0,template:!0};y.getBindingHandler=function(e){return y.c[e]};var E={};y.fa=function(e,t,i,o,s){function r(){var e=u?c():c,n=y.a.f(e);return t?(y.a.extend(l,t),m in t&&(l[m]=t[m])):(l.$parents=[],l.$root=n,l.ko=y),l[g]=a,h?n=l.$data:(l.$rawData=e,l.$data=n),i&&(l[i]=n),o&&o(l,t,n),t&&t[g]&&!y.S.o().Vb(t[g])&&t[g](),d&&(l[b]=d),l.$data}var a,l=this,h=e===E,c=h?n:e,u="function"==typeof c&&!y.O(c),d=s&&s.dataDependency;s&&s.exportDependencies?r():((a=y.xb(r)).v(),a.ja()?a.equalityComparer=null:l[g]=n)},y.fa.prototype.createChildContext=function(e,t,n,i){if(!i&&t&&"object"==typeof t&&(t=(i=t).as,n=i.extend),t&&i&&i.noChildContext){var o="function"==typeof e&&!y.O(e);return new y.fa(E,this,null,(function(i){n&&n(i),i[t]=o?e():e}),i)}return new y.fa(e,this,t,(function(e,t){e.$parentContext=t,e.$parent=t.$data,e.$parents=(t.$parents||[]).slice(0),e.$parents.unshift(e.$parent),n&&n(e)}),i)},y.fa.prototype.extend=function(e,t){return new y.fa(E,this,null,(function(t){y.a.extend(t,"function"==typeof e?e(t):e)}),t)};var S=y.a.g.Z();t.prototype.Tc=function(){this.Kb&&this.Kb.N&&this.Kb.N.sd(this.node)},t.prototype.sd=function(e){y.a.Pa(this.kb,e),!this.kb.length&&this.H&&this.Cc()},t.prototype.Cc=function(){this.H=!0,this.yc.N&&!this.kb.length&&(this.yc.N=null,y.a.K.yb(this.node,e),y.i.ma(this.node,y.i.pa),this.Tc())},y.i={H:"childrenComplete",pa:"descendantsComplete",subscribe:function(e,t,n,i,o){var s=y.a.g.Ub(e,S,{});return s.Fa||(s.Fa=new y.T),o&&o.notifyImmediately&&s.Zb[t]&&y.u.G(n,i,[e]),s.Fa.subscribe(n,i,t)},ma:function(e,t){var i=y.a.g.get(e,S);if(i&&(i.Zb[t]=!0,i.Fa&&i.Fa.notifySubscribers(e,t),t==y.i.H))if(i.N)i.N.Cc();else if(i.N===n&&i.Fa&&i.Fa.Wa(y.i.pa))throw Error("descendantsComplete event not supported for bindings on this node")},Cb:function(e,n){var i=y.a.g.Ub(e,S,{});return i.N||(i.N=new t(e,i,n[m])),n[m]==i?n:n.extend((function(e){e[m]=i}))}},y.Td=function(e){return(e=y.a.g.get(e,S))&&e.context},y.ib=function(e,t,n){return 1===e.nodeType&&y.h.Sc(e),p(e,t,f(n))},y.ld=function(e,t,n){return n=f(n),y.ib(e,h(t,n,e),n)},y.Oa=function(e,t){1!==t.nodeType&&8!==t.nodeType||u(f(e),t)},y.vc=function(e,t,n){if(!r&&i.jQuery&&(r=i.jQuery),2>arguments.length){if(!(t=o.body))throw Error("ko.applyBindings: could not find document.body; has the document been loaded?")}else if(!t||1!==t.nodeType&&8!==t.nodeType)throw Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");d(f(e,n),t)},y.Dc=function(e){return!e||1!==e.nodeType&&8!==e.nodeType?n:y.Td(e)},y.Ec=function(e){return(e=y.Dc(e))?e.$data:n},y.b("bindingHandlers",y.c),y.b("bindingEvent",y.i),y.b("bindingEvent.subscribe",y.i.subscribe),y.b("bindingEvent.startPossiblyAsyncContentBinding",y.i.Cb),y.b("applyBindings",y.vc),y.b("applyBindingsToDescendants",y.Oa),y.b("applyBindingAccessorsToNode",y.ib),y.b("applyBindingsToNode",y.ld),y.b("contextFor",y.Dc),y.b("dataFor",y.Ec)}(),function(e){function t(t,i){var r,a=Object.prototype.hasOwnProperty.call(o,t)?o[t]:e;a?a.subscribe(i):((a=o[t]=new y.T).subscribe(i),n(t,(function(e,n){var i=!(!n||!n.synchronous);s[t]={definition:e,Gd:i},delete o[t],r||i?a.notifySubscribers(e):y.na.zb((function(){a.notifySubscribers(e)}))})),r=!0)}function n(e,t){i("getConfig",[e],(function(n){n?i("loadComponent",[e,n],(function(e){t(e,n)})):t(null,null)}))}function i(t,n,o,s){s||(s=y.j.loaders.slice(0));var r=s.shift();if(r){var a=r[t];if(a){var l=!1;if(a.apply(r,n.concat((function(e){l?o(null):null!==e?o(e):i(t,n,o,s)})))!==e&&(l=!0,!r.suppressLoaderExceptions))throw Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.")}else i(t,n,o,s)}else o(null)}var o={},s={};y.j={get:function(n,i){var o=Object.prototype.hasOwnProperty.call(s,n)?s[n]:e;o?o.Gd?y.u.G((function(){i(o.definition)})):y.na.zb((function(){i(o.definition)})):t(n,i)},Bc:function(e){delete s[e]},oc:i},y.j.loaders=[],y.b("components",y.j),y.b("components.get",y.j.get),y.b("components.clearCachedDefinition",y.j.Bc)}(),function(){function e(e,t,n,i){function o(){0==--a&&i(s)}var s={},a=2,l=n.template;n=n.viewModel,l?r(t,l,(function(t){y.j.oc("loadTemplate",[e,t],(function(e){s.template=e,o()}))})):o(),n?r(t,n,(function(t){y.j.oc("loadViewModel",[e,t],(function(e){s[h]=e,o()}))})):o()}function n(e){switch(y.a.R(e)){case"script":return y.a.ua(e.text);case"textarea":return y.a.ua(e.value);case"template":if(s(e.content))return y.a.Ca(e.content.childNodes)}return y.a.Ca(e.childNodes)}function s(e){return i.DocumentFragment?e instanceof DocumentFragment:e&&11===e.nodeType}function r(e,n,o){"string"==typeof n.require?t||i.require?(t||i.require)([n.require],(function(e){e&&"object"==typeof e&&e.Xd&&e.default&&(e=e.default),o(e)})):e("Uses require, but no AMD loader is present"):o(n)}function a(e){return function(t){throw Error("Component '"+e+"': "+t)}}var l={};y.j.register=function(e,t){if(!t)throw Error("Invalid configuration for "+e);if(y.j.tb(e))throw Error("Component "+e+" is already registered");l[e]=t},y.j.tb=function(e){return Object.prototype.hasOwnProperty.call(l,e)},y.j.unregister=function(e){delete l[e],y.j.Bc(e)},y.j.Fc={getConfig:function(e,t){t(y.j.tb(e)?l[e]:null)},loadComponent:function(t,n,i){var o=a(t);r(o,n,(function(n){e(t,o,n,i)}))},loadTemplate:function(e,t,r){if(e=a(e),"string"==typeof t)r(y.a.ua(t));else if(t instanceof Array)r(t);else if(s(t))r(y.a.la(t.childNodes));else if(t.element)if(t=t.element,i.HTMLElement?t instanceof HTMLElement:t&&t.tagName&&1===t.nodeType)r(n(t));else if("string"==typeof t){var l=o.getElementById(t);l?r(n(l)):e("Cannot find element with ID "+t)}else e("Unknown element type: "+t);else e("Unknown template value: "+t)},loadViewModel:function(e,t,n){!function e(t,n,i){if("function"==typeof n)i((function(e){return new n(e)}));else if("function"==typeof n[h])i(n[h]);else if("instance"in n){var o=n.instance;i((function(){return o}))}else"viewModel"in n?e(t,n.viewModel,i):t("Unknown viewModel value: "+n)}(a(e),t,n)}};var h="createViewModel";y.b("components.register",y.j.register),y.b("components.isRegistered",y.j.tb),y.b("components.unregister",y.j.unregister),y.b("components.defaultLoader",y.j.Fc),y.j.loaders.push(y.j.Fc),y.j.dd=l}(),function(){function e(e,n){if(i=e.getAttribute("params")){var i=t.parseBindingsString(i,n,e,{valueAccessors:!0,bindingParams:!0}),o=(i=y.a.Ga(i,(function(t){return y.o(t,null,{l:e})})),y.a.Ga(i,(function(t){var n=t.v();return t.ja()?y.o({read:function(){return y.a.f(t())},write:y.Za(n)&&function(e){t()(e)},l:e}):n})));return Object.prototype.hasOwnProperty.call(o,"$raw")||(o.$raw=i),o}return{$raw:{}}}y.j.getComponentNameForNode=function(e){var t=y.a.R(e);if(y.j.tb(t)&&(-1!=t.indexOf("-")||"[object HTMLUnknownElement]"==""+e||8>=y.a.W&&e.tagName===t))return t},y.j.tc=function(t,n,i,o){if(1===n.nodeType){var s=y.j.getComponentNameForNode(n);if(s){if((t=t||{}).component)throw Error('Cannot use the "component" binding on a custom element matching a component');var r={name:s,params:e(n,i)};t.component=o?function(){return r}:r}}return t};var t=new y.ga;9>y.a.W&&(y.j.register=function(e){return function(t){return e.apply(this,arguments)}}(y.j.register),o.createDocumentFragment=function(e){return function(){var t=e();return y.j.dd,t}}(o.createDocumentFragment))}(),function(){var e=0;y.c.component={init:function(t,n,i,o,s){function r(){var e=a&&a.dispose;"function"==typeof e&&e.call(a),h&&h.s(),l=a=h=null}var a,l,h,c=y.a.la(y.h.childNodes(t));return y.h.Ea(t),y.a.K.za(t,r),y.o((function(){var i,o,u=y.a.f(n());if("string"==typeof u?i=u:(i=y.a.f(u.name),o=y.a.f(u.params)),!i)throw Error("No component name specified");var d=y.i.Cb(t,s),p=l=++e;y.j.get(i,(function(e){if(l===p){if(r(),!e)throw Error("Unknown component '"+i+"'");!function(e,t,n){if(!(t=t.template))throw Error("Component '"+e+"' has no template");e=y.a.Ca(t),y.h.va(n,e)}(i,e,t);var n=function(e,t,n){var i=e.createViewModel;return i?i.call(e,t,n):t}(e,o,{element:t,templateNodes:c});e=d.createChildContext(n,{extend:function(e){e.$component=n,e.$componentTemplateNodes=c}}),n&&n.koDescendantsComplete&&(h=y.i.subscribe(t,y.i.pa,n.koDescendantsComplete,n)),a=n,y.Oa(e,t)}}))}),null,{l:t}),{controlsDescendantBindings:!0}}},y.h.ea.component=!0}();var R={class:"className",for:"htmlFor"};y.c.attr={update:function(e,t){var i=y.a.f(t())||{};y.a.P(i,(function(t,i){i=y.a.f(i);var o=t.indexOf(":"),s=(o="lookupNamespaceURI"in e&&0<o&&e.lookupNamespaceURI(t.substr(0,o)),!1===i||null===i||i===n);s?o?e.removeAttributeNS(o,t):e.removeAttribute(t):i=i.toString(),8>=y.a.W&&t in R?(t=R[t],s?e.removeAttribute(t):e[t]=i):s||(o?e.setAttributeNS(o,t,i):e.setAttribute(t,i)),"name"===t&&y.a.Yc(e,s?"":i)}))}},y.c.checked={after:["value","attr"],init:function(e,t,i){function o(){var o=e.checked,l=s();if(!y.S.Ya()&&(o||!a&&!y.S.qa())){var u=y.u.G(t);if(h){var p=c?u.v():u,f=d;d=l,f!==l?o&&(y.a.Na(p,l,!0),y.a.Na(p,f,!1)):y.a.Na(p,l,o),c&&y.Za(u)&&u(p)}else r&&(l===n?l=o:o||(l=n)),y.m.eb(u,i,"checked",l,!0)}}var s=y.xb((function(){return i.has("checkedValue")?y.a.f(i.get("checkedValue")):u?i.has("value")?y.a.f(i.get("value")):e.value:void 0})),r="checkbox"==e.type,a="radio"==e.type;if(r||a){var l=t(),h=r&&y.a.f(l)instanceof Array,c=!(h&&l.push&&l.splice),u=a||h,d=h?s():n;a&&!e.name&&y.c.uniqueName.init(e,(function(){return!0})),y.o(o,null,{l:e}),y.a.B(e,"click",o),y.o((function(){var i=y.a.f(t()),o=s();h?(e.checked=0<=y.a.A(i,o),d=o):e.checked=r&&o===n?!!i:s()===i}),null,{l:e}),l=n}}},y.m.wa.checked=!0,y.c.checkedValue={update:function(e,t){e.value=y.a.f(t())}},y.c.class={update:function(e,t){var n=y.a.Db(y.a.f(t()));y.a.Eb(e,e.__ko__cssValue,!1),e.__ko__cssValue=n,y.a.Eb(e,n,!0)}},y.c.css={update:function(e,t){var n=y.a.f(t());null!==n&&"object"==typeof n?y.a.P(n,(function(t,n){n=y.a.f(n),y.a.Eb(e,t,n)})):y.c.class.update(e,t)}},y.c.enable={update:function(e,t){var n=y.a.f(t());n&&e.disabled?e.removeAttribute("disabled"):n||e.disabled||(e.disabled=!0)}},y.c.disable={update:function(e,t){y.c.enable.update(e,(function(){return!y.a.f(t())}))}},y.c.event={init:function(e,t,n,i,o){var s=t()||{};y.a.P(s,(function(s){"string"==typeof s&&y.a.B(e,s,(function(e){var r,a=t()[s];if(a){try{var l=y.a.la(arguments);i=o.$data,l.unshift(i),r=a.apply(i,l)}finally{!0!==r&&(e.preventDefault?e.preventDefault():e.returnValue=!1)}!1===n.get(s+"Bubble")&&(e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation())}}))}))}},y.c.foreach={Rc:function(e){return function(){var t=e(),n=y.a.bc(t);return n&&"number"!=typeof n.length?(y.a.f(t),{foreach:n.data,as:n.as,noChildContext:n.noChildContext,includeDestroyed:n.includeDestroyed,afterAdd:n.afterAdd,beforeRemove:n.beforeRemove,afterRender:n.afterRender,beforeMove:n.beforeMove,afterMove:n.afterMove,templateEngine:y.ba.Ma}):{foreach:t,templateEngine:y.ba.Ma}}},init:function(e,t){return y.c.template.init(e,y.c.foreach.Rc(t))},update:function(e,t,n,i,o){return y.c.template.update(e,y.c.foreach.Rc(t),n,i,o)}},y.m.Ra.foreach=!1,y.h.ea.foreach=!0,y.c.hasfocus={init:function(e,t,n){function i(i){e.__ko_hasfocusUpdating=!0;var o=e.ownerDocument;if("activeElement"in o){var s;try{s=o.activeElement}catch(e){s=o.body}i=s===e}o=t(),y.m.eb(o,n,"hasfocus",i,!0),e.__ko_hasfocusLastValue=i,e.__ko_hasfocusUpdating=!1}var o=i.bind(null,!0),s=i.bind(null,!1);y.a.B(e,"focus",o),y.a.B(e,"focusin",o),y.a.B(e,"blur",s),y.a.B(e,"focusout",s),e.__ko_hasfocusLastValue=!1},update:function(e,t){var n=!!y.a.f(t());e.__ko_hasfocusUpdating||e.__ko_hasfocusLastValue===n||(n?e.focus():e.blur(),!n&&e.__ko_hasfocusLastValue&&e.ownerDocument.body.focus(),y.u.G(y.a.Fb,null,[e,n?"focusin":"focusout"]))}},y.m.wa.hasfocus=!0,y.c.hasFocus=y.c.hasfocus,y.m.wa.hasFocus="hasfocus",y.c.html={init:function(){return{controlsDescendantBindings:!0}},update:function(e,t){y.a.fc(e,t())}},function(){function e(e,t,n){y.c[e]={init:function(e,i,o,s,r){var a,l,h,c,u,d={};if(t){s=o.get("as");var p=o.get("noChildContext");d={as:s,noChildContext:p,exportDependencies:u=!(s&&p)}}return c=(h="render"==o.get("completeOn"))||o.has(y.i.pa),y.o((function(){var o,s=y.a.f(i()),p=!n!=!s,f=!l;(u||p!==a)&&(c&&(r=y.i.Cb(e,r)),p&&(t&&!u||(d.dataDependency=y.S.o()),o=t?r.createChildContext("function"==typeof s?s:i,d):y.S.qa()?r.extend(null,d):r),f&&y.S.qa()&&(l=y.a.Ca(y.h.childNodes(e),!0)),p?(f||y.h.va(e,y.a.Ca(l)),y.Oa(o,e)):(y.h.Ea(e),h||y.i.ma(e,y.i.H)),a=p)}),null,{l:e}),{controlsDescendantBindings:!0}}},y.m.Ra[e]=!1,y.h.ea[e]=!0}e("if"),e("ifnot",!1,!0),e("with",!0)}(),y.c.let={init:function(e,t,n,i,o){return t=o.extend(t),y.Oa(t,e),{controlsDescendantBindings:!0}}},y.h.ea.let=!0;var L={};y.c.options={init:function(e){if("select"!==y.a.R(e))throw Error("options binding applies only to SELECT elements");for(;0<e.length;)e.remove(0);return{controlsDescendantBindings:!0}},update:function(e,t,i){function o(){return y.a.jb(e.options,(function(e){return e.selected}))}function s(e,t,n){var i=typeof t;return"function"==i?t(e):"string"==i?e[t]:n}function r(t,n){if(f&&c)y.i.ma(e,y.i.H);else if(p.length){var i=0<=y.a.A(p,y.w.M(n[0]));y.a.Zc(n[0],i),f&&!i&&y.u.G(y.a.Fb,null,[e,"change"])}}var a=e.multiple,l=0!=e.length&&a?e.scrollTop:null,h=y.a.f(t()),c=i.get("valueAllowUnset")&&i.has("value"),u=i.get("optionsIncludeDestroyed");t={};var d,p=[];c||(a?p=y.a.Mb(o(),y.w.M):0<=e.selectedIndex&&p.push(y.w.M(e.options[e.selectedIndex]))),h&&(void 0===h.length&&(h=[h]),d=y.a.jb(h,(function(e){return u||e===n||null===e||!y.a.f(e._destroy)})),i.has("optionsCaption")&&null!==(h=y.a.f(i.get("optionsCaption")))&&h!==n&&d.unshift(L));var f=!1;t.beforeRemove=function(t){e.removeChild(t)},h=r,i.has("optionsAfterRender")&&"function"==typeof i.get("optionsAfterRender")&&(h=function(e,t){r(0,t),y.u.G(i.get("optionsAfterRender"),null,[t[0],e!==L?e:n])}),y.a.ec(e,d,(function(t,o,r){return r.length&&(p=!c&&r[0].selected?[y.w.M(r[0])]:[],f=!0),o=e.ownerDocument.createElement("option"),t===L?(y.a.Bb(o,i.get("optionsCaption")),y.w.cb(o,n)):(r=s(t,i.get("optionsValue"),t),y.w.cb(o,y.a.f(r)),t=s(t,i.get("optionsText"),r),y.a.Bb(o,t)),[o]}),t,h),c||(a?p.length&&o().length<p.length:p.length&&0<=e.selectedIndex?y.w.M(e.options[e.selectedIndex])!==p[0]:p.length||0<=e.selectedIndex)&&y.u.G(y.a.Fb,null,[e,"change"]),(c||y.S.Ya())&&y.i.ma(e,y.i.H),y.a.wd(e),l&&20<Math.abs(l-e.scrollTop)&&(e.scrollTop=l)}},y.c.options.$b=y.a.g.Z(),y.c.selectedOptions={init:function(e,t,n){function i(){var i=t(),o=[];y.a.D(e.getElementsByTagName("option"),(function(e){e.selected&&o.push(y.w.M(e))})),y.m.eb(i,n,"selectedOptions",o)}function o(){var n=y.a.f(t()),i=e.scrollTop;n&&"number"==typeof n.length&&y.a.D(e.getElementsByTagName("option"),(function(e){var t=0<=y.a.A(n,y.w.M(e));e.selected!=t&&y.a.Zc(e,t)})),e.scrollTop=i}if("select"!=y.a.R(e))throw Error("selectedOptions binding applies only to SELECT elements");var s;y.i.subscribe(e,y.i.H,(function(){s?i():(y.a.B(e,"change",i),s=y.o(o,null,{l:e}))}),null,{notifyImmediately:!0})},update:function(){}},y.m.wa.selectedOptions=!0,y.c.style={update:function(e,t){var i=y.a.f(t()||{});y.a.P(i,(function(t,i){if(null!==(i=y.a.f(i))&&i!==n&&!1!==i||(i=""),r)r(e).css(t,i);else if(/^--/.test(t))e.style.setProperty(t,i);else{t=t.replace(/-(\w)/g,(function(e,t){return t.toUpperCase()}));var o=e.style[t];e.style[t]=i,i===o||e.style[t]!=o||isNaN(i)||(e.style[t]=i+"px")}}))}},y.c.submit={init:function(e,t,n,i,o){if("function"!=typeof t())throw Error("The value for a submit binding must be a function");y.a.B(e,"submit",(function(n){var i,s=t();try{i=s.call(o.$data,e)}finally{!0!==i&&(n.preventDefault?n.preventDefault():n.returnValue=!1)}}))}},y.c.text={init:function(){return{controlsDescendantBindings:!0}},update:function(e,t){y.a.Bb(e,t())}},y.h.ea.text=!0,function(){if(i&&i.navigator){var e,t,o,s,r,a=function(e){if(e)return parseFloat(e[1])},l=i.navigator.userAgent;(e=i.opera&&i.opera.version&&parseInt(i.opera.version()))||(r=a(l.match(/Edge\/([^ ]+)$/)))||a(l.match(/Chrome\/([^ ]+)/))||(t=a(l.match(/Version\/([^ ]+) Safari/)))||(o=a(l.match(/Firefox\/([^ ]+)/)))||(s=y.a.W||a(l.match(/MSIE ([^ ]+)/)))||(s=a(l.match(/rv:([^ )]+)/)))}if(8<=s&&10>s)var h=y.a.g.Z(),c=y.a.g.Z(),u=function(e){var t=this.activeElement;(t=t&&y.a.g.get(t,c))&&t(e)},d=function(e,t){var n=e.ownerDocument;y.a.g.get(n,h)||(y.a.g.set(n,h,!0),y.a.B(n,"selectionchange",u)),y.a.g.set(e,c,t)};y.c.textInput={init:function(i,a,l){function h(e,t){y.a.B(i,e,t)}function c(){p||(f=i.value,p=y.a.setTimeout(u,4))}function u(){clearTimeout(p),f=p=n;var e=i.value;g!==e&&(g=e,y.m.eb(a(),l,"textInput",e))}var p,f,g=i.value,m=9==y.a.W?c:u,b=!1;s&&h("keypress",u),11>s&&h("propertychange",(function(e){b||"value"!==e.propertyName||m(e)})),8==s&&(h("keyup",u),h("keydown",u)),d&&(d(i,m),h("dragend",c)),(!s||9<=s)&&h("input",m),5>t&&"textarea"===y.a.R(i)?(h("keydown",c),h("paste",c),h("cut",c)):11>e?h("keydown",c):4>o?(h("DOMAutoComplete",u),h("dragdrop",u),h("drop",u)):r&&"number"===i.type&&h("keydown",c),h("change",u),h("blur",u),y.o((function e(){var t=y.a.f(a());null!==t&&t!==n||(t=""),f!==n&&t===f?y.a.setTimeout(e,4):i.value!==t&&(b=!0,i.value=t,b=!1,g=i.value)}),null,{l:i})}},y.m.wa.textInput=!0,y.c.textinput={preprocess:function(e,t,n){n("textInput",e)}}}(),y.c.uniqueName={init:function(e,t){if(t()){var n="ko_unique_"+ ++y.c.uniqueName.rd;y.a.Yc(e,n)}}},y.c.uniqueName.rd=0,y.c.using={init:function(e,t,n,i,o){var s;return n.has("as")&&(s={as:n.get("as"),noChildContext:n.get("noChildContext")}),t=o.createChildContext(t,s),y.Oa(t,e),{controlsDescendantBindings:!0}}},y.h.ea.using=!0,y.c.value={init:function(e,t,i){var o=y.a.R(e),s="input"==o;if(!s||"checkbox"!=e.type&&"radio"!=e.type){var r=[],a=i.get("valueUpdate"),l=!1,h=null;a&&(r="string"==typeof a?[a]:y.a.wc(a),y.a.Pa(r,"change"));var c,u,d=function(){h=null,l=!1;var n=t(),o=y.w.M(e);y.m.eb(n,i,"value",o)};!y.a.W||!s||"text"!=e.type||"off"==e.autocomplete||e.form&&"off"==e.form.autocomplete||-1!=y.a.A(r,"propertychange")||(y.a.B(e,"propertychange",(function(){l=!0})),y.a.B(e,"focus",(function(){l=!1})),y.a.B(e,"blur",(function(){l&&d()}))),y.a.D(r,(function(t){var n=d;y.a.Ud(t,"after")&&(n=function(){h=y.w.M(e),y.a.setTimeout(d,0)},t=t.substring(5)),y.a.B(e,t,n)})),c=s&&"file"==e.type?function(){var i=y.a.f(t());null===i||i===n||""===i?e.value="":y.u.G(d)}:function(){var s=y.a.f(t()),r=y.w.M(e);null!==h&&s===h?y.a.setTimeout(c,0):s===r&&r!==n||("select"===o?(r=i.get("valueAllowUnset"),y.w.cb(e,s,r),r||s===y.w.M(e)||y.u.G(d)):y.w.cb(e,s))},"select"===o?y.i.subscribe(e,y.i.H,(function(){u?i.get("valueAllowUnset")?c():d():(y.a.B(e,"change",d),u=y.o(c,null,{l:e}))}),null,{notifyImmediately:!0}):(y.a.B(e,"change",d),y.o(c,null,{l:e}))}else y.ib(e,{checkedValue:t})},update:function(){}},y.m.wa.value=!0,y.c.visible={update:function(e,t){var n=y.a.f(t()),i="none"!=e.style.display;n&&!i?e.style.display="":!n&&i&&(e.style.display="none")}},y.c.hidden={update:function(e,t){y.c.visible.update(e,(function(){return!y.a.f(t())}))}},function(e){y.c[e]={init:function(t,n,i,o,s){return y.c.event.init.call(this,t,(function(){var t={};return t[e]=n(),t}),i,o,s)}}}("click"),y.ca=function(){},y.ca.prototype.renderTemplateSource=function(){throw Error("Override renderTemplateSource")},y.ca.prototype.createJavaScriptEvaluatorBlock=function(){throw Error("Override createJavaScriptEvaluatorBlock")},y.ca.prototype.makeTemplateSource=function(e,t){if("string"==typeof e){var n=(t=t||o).getElementById(e);if(!n)throw Error("Cannot find template with ID "+e);return new y.C.F(n)}if(1==e.nodeType||8==e.nodeType)return new y.C.ia(e);throw Error("Unknown template type: "+e)},y.ca.prototype.renderTemplate=function(e,t,n,i){return e=this.makeTemplateSource(e,i),this.renderTemplateSource(e,t,n,i)},y.ca.prototype.isTemplateRewritten=function(e,t){return!1===this.allowTemplateRewriting||this.makeTemplateSource(e,t).data("isRewritten")},y.ca.prototype.rewriteTemplate=function(e,t,n){t=t((e=this.makeTemplateSource(e,n)).text()),e.text(t),e.data("isRewritten",!0)},y.b("templateEngine",y.ca),y.kc=function(){function e(e,t,n,i){e=y.m.ac(e);for(var o=y.m.Ra,s=0;s<e.length;s++){var r=e[s].key;if(Object.prototype.hasOwnProperty.call(o,r)){var a=o[r];if("function"==typeof a){if(r=a(e[s].value))throw Error(r)}else if(!a)throw Error("This template engine does not support the '"+r+"' binding within its templates")}}return n="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+y.m.vb(e,{valueAccessors:!0})+" } })()},'"+n.toLowerCase()+"')",i.createJavaScriptEvaluatorBlock(n)+t}var t=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,n=/\x3c!--\s*ko\b\s*([\s\S]*?)\s*--\x3e/g;return{xd:function(e,t,n){t.isTemplateRewritten(e,n)||t.rewriteTemplate(e,(function(e){return y.kc.Ld(e,t)}),n)},Ld:function(i,o){return i.replace(t,(function(t,n,i,s,r){return e(r,n,i,o)})).replace(n,(function(t,n){return e(n,"\x3c!-- ko --\x3e","#comment",o)}))},md:function(e,t){return y.aa.Xb((function(n,i){var o=n.nextSibling;o&&o.nodeName.toLowerCase()===t&&y.ib(o,e,i)}))}}}(),y.b("__tr_ambtns",y.kc.md),function(){y.C={},y.C.F=function(e){if(this.F=e){var t=y.a.R(e);this.ab="script"===t?1:"textarea"===t?2:"template"==t&&e.content&&11===e.content.nodeType?3:4}},y.C.F.prototype.text=function(){var e=1===this.ab?"text":2===this.ab?"value":"innerHTML";if(0==arguments.length)return this.F[e];var t=arguments[0];"innerHTML"===e?y.a.fc(this.F,t):this.F[e]=t};var e=y.a.g.Z()+"_";y.C.F.prototype.data=function(t){if(1===arguments.length)return y.a.g.get(this.F,e+t);y.a.g.set(this.F,e+t,arguments[1])};var t=y.a.g.Z();y.C.F.prototype.nodes=function(){var e=this.F;if(0==arguments.length){var i=y.a.g.get(e,t)||{},o=i.lb||(3===this.ab?e.content:4===this.ab?e:n);if(!o||i.jd){var s=this.text();s&&s!==i.bb&&(o=y.a.Md(s,e.ownerDocument),y.a.g.set(e,t,{lb:o,bb:s,jd:!0}))}return o}i=arguments[0],this.ab!==n&&this.text(""),y.a.g.set(e,t,{lb:i})},y.C.ia=function(e){this.F=e},y.C.ia.prototype=new y.C.F,y.C.ia.prototype.constructor=y.C.ia,y.C.ia.prototype.text=function(){if(0==arguments.length){var e=y.a.g.get(this.F,t)||{};return e.bb===n&&e.lb&&(e.bb=e.lb.innerHTML),e.bb}y.a.g.set(this.F,t,{bb:arguments[0]})},y.b("templateSources",y.C),y.b("templateSources.domElement",y.C.F),y.b("templateSources.anonymousTemplate",y.C.ia)}(),function(){function e(e,t,n){var i;for(t=y.h.nextSibling(t);e&&(i=e)!==t;)n(i,e=y.h.nextSibling(i))}function t(t,n){if(t.length){var i=t[0],o=t[t.length-1],s=i.parentNode,r=y.ga.instance,a=r.preprocessNode;if(a){if(e(i,o,(function(e,t){var n=e.previousSibling,s=a.call(r,e);s&&(e===i&&(i=s[0]||t),e===o&&(o=s[s.length-1]||n))})),t.length=0,!i)return;i===o?t.push(i):(t.push(i,o),y.a.Ua(t,s))}e(i,o,(function(e){1!==e.nodeType&&8!==e.nodeType||y.vc(n,e)})),e(i,o,(function(e){1!==e.nodeType&&8!==e.nodeType||y.aa.cd(e,[n])})),y.a.Ua(t,s)}}function i(e){return e.nodeType?e:0<e.length?e[0]:null}function o(e,n,o,s,a){a=a||{};var l=(e&&i(e)||o||{}).ownerDocument,h=a.templateEngine||r;if(y.kc.xd(o,h,l),"number"!=typeof(o=h.renderTemplate(o,s,a,l)).length||0<o.length&&"number"!=typeof o[0].nodeType)throw Error("Template engine must return an array of DOM nodes");switch(l=!1,n){case"replaceChildren":y.h.va(e,o),l=!0;break;case"replaceNode":y.a.Xc(e,o),l=!0;break;case"ignoreTargetNode":break;default:throw Error("Unknown renderMode: "+n)}return l&&(t(o,s),a.afterRender&&y.u.G(a.afterRender,null,[o,s[a.as||"$data"]]),"replaceChildren"==n&&y.i.ma(e,y.i.H)),o}function s(e,t,n){return y.O(e)?e():"function"==typeof e?e(t,n):e}var r;y.gc=function(e){if(e!=n&&!(e instanceof y.ca))throw Error("templateEngine must inherit from ko.templateEngine");r=e},y.dc=function(e,t,a,l,h){if(((a=a||{}).templateEngine||r)==n)throw Error("Set a template engine before calling renderTemplate");if(h=h||"replaceChildren",l){var c=i(l);return y.$((function(){var n=t&&t instanceof y.fa?t:new y.fa(t,null,null,null,{exportDependencies:!0}),r=s(e,n.$data,n);n=o(l,h,r,n,a),"replaceNode"==h&&(c=i(l=n))}),null,{Sa:function(){return!c||!y.a.Sb(c)},l:c&&"replaceNode"==h?c.parentNode:c})}return y.aa.Xb((function(n){y.dc(e,t,a,n,"replaceNode")}))},y.Qd=function(e,i,r,a,l){function h(e,t){y.u.G(y.a.ec,null,[a,e,u,r,c,t]),y.i.ma(a,y.i.H)}function c(e,n){t(n,d),r.afterRender&&r.afterRender(n,e),d=null}function u(t,n){d=l.createChildContext(t,{as:p,noChildContext:r.noChildContext,extend:function(e){e.$index=n,p&&(e[p+"Index"]=n)}});var i=s(e,t,d);return o(a,"ignoreTargetNode",i,d,r)}var d,p=r.as,f=!1===r.includeDestroyed||y.options.foreachHidesDestroyed&&!r.includeDestroyed;if(f||r.beforeRemove||!y.Pc(i))return y.$((function(){var e=y.a.f(i)||[];void 0===e.length&&(e=[e]),f&&(e=y.a.jb(e,(function(e){return e===n||null===e||!y.a.f(e._destroy)}))),h(e)}),null,{l:a});h(i.v());var g=i.subscribe((function(e){h(i(),e)}),null,"arrayChange");return g.l(a),g};var a=y.a.g.Z(),l=y.a.g.Z();y.c.template={init:function(e,t){var n=y.a.f(t());if("string"==typeof n||"name"in n)y.h.Ea(e);else if("nodes"in n){if(n=n.nodes||[],y.O(n))throw Error('The "nodes" option must be a plain, non-observable array.');var i=n[0]&&n[0].parentNode;i&&y.a.g.get(i,l)||(i=y.a.Yb(n),y.a.g.set(i,l,!0)),new y.C.ia(e).nodes(i)}else{if(!(0<(n=y.h.childNodes(e)).length))throw Error("Anonymous template defined, but no template content was provided");i=y.a.Yb(n),new y.C.ia(e).nodes(i)}return{controlsDescendantBindings:!0}},update:function(e,t,i,o,s){var r=t();i=!0,o=null,"string"==typeof(t=y.a.f(r))?t={}:(r="name"in t?t.name:e,"if"in t&&(i=y.a.f(t.if)),i&&"ifnot"in t&&(i=!y.a.f(t.ifnot)),i&&!r&&(i=!1)),"foreach"in t?o=y.Qd(r,i&&t.foreach||[],t,e,s):i?(i=s,"data"in t&&(i=s.createChildContext(t.data,{as:t.as,noChildContext:t.noChildContext,exportDependencies:!0})),o=y.dc(r,i,t,e)):y.h.Ea(e),s=o,(t=y.a.g.get(e,a))&&"function"==typeof t.s&&t.s(),y.a.g.set(e,a,!s||s.ja&&!s.ja()?n:s)}},y.m.Ra.template=function(e){return 1==(e=y.m.ac(e)).length&&e[0].unknown||y.m.Id(e,"name")?null:"This template engine does not support anonymous templates nested within its templates"},y.h.ea.template=!0}(),y.b("setTemplateEngine",y.gc),y.b("renderTemplate",y.dc),y.a.Kc=function(e,t,n){var i,o,s,r,a;if(e.length&&t.length)for(i=o=0;(!n||i<n)&&(r=e[o]);++o){for(s=0;a=t[s];++s)if(r.value===a.value){r.moved=a.index,a.moved=r.index,t.splice(s,1),i=s=0;break}i+=s}},y.a.Pb=function(){function e(e,t,n,i,o){var s,r,a,l,h,c=Math.min,u=Math.max,d=[],p=e.length,f=t.length,g=f-p||1,m=p+f+1;for(s=0;s<=p;s++)for(l=a,d.push(a=[]),h=c(f,s+g),r=u(0,s-1);r<=h;r++)a[r]=r?s?e[s-1]===t[r-1]?l[r-1]:c(l[r]||m,a[r-1]||m)+1:r+1:s+1;for(c=[],u=[],g=[],s=p,r=f;s||r;)f=d[s][r]-1,r&&f===d[s][r-1]?u.push(c[c.length]={status:n,value:t[--r],index:r}):s&&f===d[s-1][r]?g.push(c[c.length]={status:i,value:e[--s],index:s}):(--r,--s,o.sparse||c.push({status:"retained",value:t[r]}));return y.a.Kc(g,u,!o.dontLimitMoves&&10*p),c.reverse()}return function(t,n,i){return i="boolean"==typeof i?{dontLimitMoves:i}:i||{},n=n||[],(t=t||[]).length<n.length?e(t,n,"added","deleted",i):e(n,t,"deleted","added",i)}}(),y.b("utils.compareArrays",y.a.Pb),function(){function e(e,t,i,o,s){var r=[],a=y.$((function(){var n=t(i,s,y.a.Ua(r,e))||[];0<r.length&&(y.a.Xc(r,n),o&&y.u.G(o,null,[i,n,s])),r.length=0,y.a.Nb(r,n)}),null,{l:e,Sa:function(){return!y.a.kd(r)}});return{Y:r,$:a.ja()?a:n}}var t=y.a.g.Z(),i=y.a.g.Z();y.a.ec=function(o,s,r,a,l,h){function c(e){p={Aa:e,pb:y.ta(N++)},E.push(p),w||I.push(p)}function u(e){p=b[e],N!==p.pb.v()&&x.push(p),p.pb(N++),y.a.Ua(p.Y,o),E.push(p)}function d(e,t){if(e)for(var n=0,i=t.length;n<i;n++)y.a.D(t[n].Y,(function(i){e(i,n,t[n].Aa)}))}void 0===(s=s||[]).length&&(s=[s]),a=a||{};var p,f,g,m,b=y.a.g.get(o,t),w=!b,E=[],S=0,N=0,v=[],C=[],T=[],x=[],I=[],P=0;if(w)y.a.D(s,c);else{if(!h||b&&b._countWaitingForRemove){var A=y.a.Mb(b,(function(e){return e.Aa}));h=y.a.Pb(A,s,{dontLimitMoves:a.dontLimitMoves,sparse:!0})}var O,R,L;for(A=0;O=h[A];A++)switch(R=O.moved,L=O.index,O.status){case"deleted":for(;S<L;)u(S++);R===n&&((p=b[S]).$&&(p.$.s(),p.$=n),y.a.Ua(p.Y,o).length&&(a.beforeRemove&&(E.push(p),P++,p.Aa===i?p=null:T.push(p)),p&&v.push.apply(v,p.Y))),S++;break;case"added":for(;N<L;)u(S++);R!==n?(C.push(E.length),u(R)):c(O.value)}for(;N<s.length;)u(S++);E._countWaitingForRemove=P}y.a.g.set(o,t,E),d(a.beforeMove,x),y.a.D(v,a.beforeRemove?y.oa:y.removeNode);try{m=o.ownerDocument.activeElement}catch(e){}if(C.length)for(;(A=C.shift())!=n;){for(p=E[A],f=n;A;)if((g=E[--A].Y)&&g.length){f=g[g.length-1];break}for(s=0;S=p.Y[s];f=S,s++)y.h.Wb(o,S,f)}for(A=0;p=E[A];A++){for(p.Y||y.a.extend(p,e(o,r,p.Aa,l,p.pb)),s=0;S=p.Y[s];f=S,s++)y.h.Wb(o,S,f);!p.Ed&&l&&(l(p.Aa,p.Y,p.pb),p.Ed=!0,f=p.Y[p.Y.length-1])}for(m&&o.ownerDocument.activeElement!=m&&m.focus(),d(a.beforeRemove,T),A=0;A<T.length;++A)T[A].Aa=i;d(a.afterMove,x),d(a.afterAdd,I)}}(),y.b("utils.setDomNodeChildrenFromArrayMapping",y.a.ec),y.ba=function(){this.allowTemplateRewriting=!1},y.ba.prototype=new y.ca,y.ba.prototype.constructor=y.ba,y.ba.prototype.renderTemplateSource=function(e,t,n,i){return(t=9>y.a.W||!e.nodes?null:e.nodes())?y.a.la(t.cloneNode(!0).childNodes):(e=e.text(),y.a.ua(e,i))},y.ba.Ma=new y.ba,y.gc(y.ba.Ma),y.b("nativeTemplateEngine",y.ba),function(){y.$a=function(){var e=this.Hd=function(){if(!r||!r.tmpl)return 0;try{if(0<=r.tmpl.tag.tmpl.open.toString().indexOf("__"))return 2}catch(e){}return 1}();this.renderTemplateSource=function(t,n,i,s){if(s=s||o,i=i||{},2>e)throw Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");var a=t.data("precompiled");return a||(a=t.text()||"",a=r.template(null,"{{ko_with $item.koBindingContext}}"+a+"{{/ko_with}}"),t.data("precompiled",a)),t=[n.$data],n=r.extend({koBindingContext:n},i.templateOptions),(n=r.tmpl(a,t,n)).appendTo(s.createElement("div")),r.fragments={},n},this.createJavaScriptEvaluatorBlock=function(e){return"{{ko_code ((function() { return "+e+" })()) }}"},this.addTemplate=function(e,t){o.write("<script type='text/html' id='"+e+"'>"+t+"<\/script>")},0<e&&(r.tmpl.tag.ko_code={open:"__.push($1 || '');"},r.tmpl.tag.ko_with={open:"with($1) {",close:"} "})},y.$a.prototype=new y.ca,y.$a.prototype.constructor=y.$a;var e=new y.$a;0<e.Hd&&y.gc(e),y.b("jqueryTmplTemplateEngine",y.$a)}()}))}()})),o=e((function(e,t){function n(e){t.isDebug=e}function i(e){switch(e){case"ltr":return t.PageProgression.LTR;case"rtl":return t.PageProgression.RTL;default:throw new Error(`unknown PageProgression: ${e}`)}}var o;Object.defineProperty(t,"__esModule",{value:!0}),t.isDebug=!1,(o=t.PageProgression||(t.PageProgression={})).LTR="ltr",o.RTL="rtl",function(e){e.LEFT="left",e.RIGHT="right"}(t.PageSide||(t.PageSide={})),function(e){e.LOADING="loading",e.INTERACTIVE="interactive",e.COMPLETE="complete"}(t.ReadyState||(t.ReadyState={}));const s={PageProgression:t.PageProgression,PageSide:t.PageSide,ReadyState:t.ReadyState};var r;!function(e){e[e.DEBUG=1]="DEBUG",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR"}(r||(r={}));function a(e){const t=Array.from(e);let n=null;return t[0]instanceof Error&&(n=t.shift()),{error:n,messages:t}}function l(e){const t=e.error,n=t&&(t.frameTrace||t.stack);let i=[].concat(e.messages);return t&&(i.length>0&&(i=i.concat(["\n"])),i=i.concat([t.toString()]),n&&(i=i.concat(["\n"]).concat(n))),i}const h=new class{constructor(e){this.opt_console=e,this.listeners={}}consoleDebug(e){this.opt_console?this.opt_console.debug?this.opt_console.debug(...e):this.opt_console.log(...e):console.debug(...e)}consoleInfo(e){this.opt_console?this.opt_console.info?this.opt_console.info(...e):this.opt_console.log(...e):console.info(...e)}consoleWarn(e){this.opt_console?this.opt_console.warn?this.opt_console.warn(...e):this.opt_console.log(...e):console.warn(...e)}consoleError(e){this.opt_console?this.opt_console.error?this.opt_console.error(...e):this.opt_console.log(...e):console.error(...e)}triggerListeners(e,t){const n=this.listeners[e];n&&n.forEach(e=>{e(t)})}addListener(e,t){let n=this.listeners[e];n||(n=this.listeners[e]=[]),n.push(t)}debug(...e){const t=a(arguments);this.consoleDebug(l(t)),this.triggerListeners(r.DEBUG,t)}info(...e){const t=a(arguments);this.consoleInfo(l(t)),this.triggerListeners(r.INFO,t)}warn(...e){const t=a(arguments);this.consoleWarn(l(t)),this.triggerListeners(r.WARN,t)}error(...e){const t=a(arguments);this.consoleError(l(t)),this.triggerListeners(r.ERROR,t)}};!function(e){e.SIMPLE_PROPERTY="SIMPLE_PROPERTY",e.PREPROCESS_SINGLE_DOCUMENT="PREPROCESS_SINGLE_DOCUMENT",e.PREPROCESS_TEXT_CONTENT="PREPROCESS_TEXT_CONTENT",e.PREPROCESS_ELEMENT_STYLE="PREPROCESS_ELEMENT_STYLE",e.POLYFILLED_INHERITED_PROPS="POLYFILLED_INHERITED_PROPS",e.CONFIGURATION="CONFIGURATION",e.RESOLVE_TEXT_NODE_BREAKER="RESOLVE_TEXT_NODE_BREAKER",e.RESOLVE_FORMATTING_CONTEXT="RESOLVE_FORMATTING_CONTEXT",e.RESOLVE_LAYOUT_PROCESSOR="RESOLVE_LAYOUT_PROCESSOR",e.POST_LAYOUT_BLOCK="POST_LAYOUT_BLOCK"}(t.HOOKS||(t.HOOKS={}));const c={};function u(e,n){if(t.HOOKS[e]){let t=c[e];t||(t=c[e]=[]),t.push(n)}else h.warn(new Error(`Skipping unknown plugin hook '${e}'.`))}function d(e,n){if(t.HOOKS[e]){const t=c[e];if(t){const e=t.indexOf(n);e>=0&&t.splice(e,1)}}else h.warn(new Error(`Ignoring unknown plugin hook '${e}'.`))}function p(e){return c[e]||[]}const f={registerHook:u,removeHook:d};class g{constructor(e){this.performanceInstance=e,this.timestamps={},this.registerTiming=m,this.registerStartTiming=this.registerStartTiming=m,this.registerEndTiming=this.registerEndTiming=m}forceRegisterStartTiming(e,t){b.call(this,e,"start",t)}forceRegisterEndTiming(e,t){b.call(this,e,"end",t)}printTimings(){const e=this.timestamps;let t="";Object.keys(e).forEach(n=>{const i=e[n],o=i.length;for(let e=0;e<o;e++){const s=i[e];t+=n,o>1&&(t+=`(${e})`),t+=` => start: ${s.start}, end: ${s.end}, duration: ${s.end-s.start}\n`}}),h.info(t)}disable(){this.registerTiming=m,this.registerStartTiming=this.registerStartTiming=m,this.registerEndTiming=this.registerEndTiming=m}enable(){this.registerTiming=b,this.registerStartTiming=this.registerStartTiming=w,this.registerEndTiming=this.registerEndTiming=E}isEnabled(){return this.registerStartTiming===w}}function m(){}function b(e,t,n){n||(n=this.performanceInstance.now());let i,o=this.timestamps[e];o||(o=this.timestamps[e]=[]);for(let e=o.length-1;e>=0&&(i=o[e],!i||i[t]);e--)i=null;i||(i={},o.push(i)),i[t]=n}function w(e,t){this.registerTiming(e,"start",t)}function E(e,t){this.registerTiming(e,"end",t)}const y={now:Date.now},S=new g(window&&window.performance||y);S.forceRegisterStartTiming("load_vivliostyle");const N={profiler:{registerStartTiming:S.registerStartTiming,registerEndTiming:S.registerEndTiming,printTimings:S.printTimings,disable:S.disable,enable:S.enable}};let v={};function C(e){return JSON.parse(e)}function T(e){const t=e.match(/^([^#]*)/);return t?t[1]:e}let x=window.location.href;function I(e){x=e}let P=window.location.href;function A(e){P=e}function O(e,t){if(t.startsWith("data:"))return e||t;if(!t||e.match(/^\w{2,}:/))return e.toLowerCase().match("^javascript:")?"#":(e.match(/^\w{2,}:\/\/[^\/]+$/)&&(e=`${e}/`),e);let n;if(t.match(/^\w{2,}:\/\/[^\/]+$/)&&(t=`${t}/`),e.match(/^\/\//))return n=t.match(/^(\w{2,}:)\/\//),n?n[1]+e:e;if(e.match(/^\//))return n=t.match(/^(\w{2,}:\/\/[^\/]+)\//),n?n[1]+e:e;if(e.match(/^\.(\/|$)/)&&(e=e.substr(2)),t=function(e){const t=e.match(/^([^#?]*)/);return t?t[1]:e}(t),e.match(/^#/))return t+e;let i=t.lastIndexOf("/");if(i<0)return e;if(i<t.length-1&&t.lastIndexOf(".")<i){if(""==e)return t;i=(t+="/").length-1}let o=t.substr(0,i+1)+e,s="";for(n=o.match(/^([^?#]*)([?#].*)$/),n&&(o=n[1],s=n[2]);i=o.indexOf("/../"),!(i<=0);){const e=o.lastIndexOf("/",i-1);if(e<=0)break;o=o.substr(0,e)+o.substr(i+3)}return o.replace(/\/(\.\/)+/g,"/")+s}function R(e){let t;return(t=/^(https?:)\/\/github\.com\/([^/]+\/[^/]+)\/(blob\/|tree\/|raw\/)?(.*)$/.exec(e))?e=`${t[1]}//raw.githubusercontent.com/${t[2]}/${t[3]?"":"master/"}${t[4]}`:(t=/^(https?:)\/\/www\.aozora\.gr\.jp\/(cards\/[^/]+\/files\/[^/.]+\.html)$/.exec(e))?e=`${t[1]}//raw.githubusercontent.com/aozorabunko/aozorabunko/master/${t[2]}`:(t=/^(https?:)\/\/gist\.github\.com\/([^/]+\/\w+)(\/|$)(raw(\/|$))?(.*)$/.exec(e))?e=`${t[1]}//gist.githubusercontent.com/${t[2]}/raw/${t[6]}`:(t=/^(https?:)\/\/(?:[^/.]+\.)?jsbin\.com\/(?!(?:blog|help)\b)(\w+)((\/\d+)?).*$/.exec(e))&&(e=`${t[1]}//output.jsbin.com/${t[2]}${t[3]}/`),e}var L;function k(e){return null==e?e:e.toString()}!function(e){e.FB2="http://www.gribuser.ru/xml/fictionbook/2.0",e.epub="http://www.idpf.org/2007/ops",e.EV="http://www.w3.org/2001/xml-events",e.MATHML="http://www.w3.org/1998/Math/MathML",e.XML="http://www.w3.org/XML/1998/namespace",e.XHTML="http://www.w3.org/1999/xhtml",e.XLINK="http://www.w3.org/1999/xlink",e.SHADOW="http://www.pyroxy.com/ns/shadow",e.SVG="http://www.w3.org/2000/svg",e.DC="http://purl.org/dc/elements/1.1/",e.NCX="http://www.daisy.org/z3986/2005/ncx/",e.SSE="http://example.com/sse"}(L||(L={}));class F{constructor(){this.queue=[null]}length(){return this.queue.length-1}add(e){let t=this.queue.length;for(;t>1;){const n=Math.floor(t/2),i=this.queue[n];if(i.compare(e)>0)return void(this.queue[t]=e);this.queue[t]=i,t=n}this.queue[1]=e}peek(){return this.queue[1]}remove(){const e=this.queue[1],t=this.queue.pop(),n=this.queue.length;if(n>1){let e=1;for(;;){let i=2*e;if(i>=n)break;if(this.queue[i].compare(t)>0)i+1<n&&this.queue[i+1].compare(this.queue[i])>0&&i++;else{if(!(i+1<n&&this.queue[i+1].compare(t)>0))break;i++}this.queue[e]=this.queue[i],e=i}this.queue[e]=t}return e}}const D=["","-webkit-","-moz-","-ms-","-o-","-epub-"],_={};function B(e,t){if("writing-mode"===t){const n=document.createElement("span");return"-ms-"===e?(n.style.setProperty(e+t,"tb-rl"),"tb-rl"===n.style["writing-mode"]):(n.style.setProperty(e+t,"vertical-rl"),"vertical-rl"===n.style[e+t])}return"string"==typeof document.documentElement.style[function(e,t){return e&&(t=`-${t}`,"moz"===(e=e.replace(/-/g,""))&&(e="Moz")),e+t.replace(/-[a-z]/g,e=>e.substr(1).toUpperCase())}(e,t)]}function M(e){let t=_[e];if(t||null===t)return t;switch(e){case"text-combine-upright":if(B("-webkit-","text-combine")&&!B("","text-combine-upright"))return _[e]=["-webkit-text-combine"],["-webkit-text-combine"];break;case"writing-mode":if(B("-ms-","writing-mode"))return _[e]=["-ms-writing-mode"],["-ms-writing-mode"];break;case"filter":if(B("-webkit-","filter"))return _[e]=["-webkit-filter"],["-webkit-filter"];break;case"clip-path":if(B("-webkit-","clip-path"))return _[e]=["-webkit-clip-path","clip-path"];break;case"margin-inline-start":if(B("-webkit-","margin-start"))return _[e]=["-webkit-margin-start"],["-webkit-margin-start"];break;case"margin-inline-end":if(B("-webkit-","margin-end"))return _[e]=["-webkit-margin-end"],["-webkit-margin-end"];break;case"padding-inline-start":if(B("-webkit-","padding-start"))return _[e]=["-webkit-padding-start"],["-webkit-padding-start"];break;case"padding-inline-end":if(B("-webkit-","padding-end"))return _[e]=["-webkit-padding-end"],["-webkit-padding-end"]}for(const n of D)if(B(n,e))return t=n+e,_[e]=[t],[t];return h.warn("Property not supported by the browser: ",e),_[e]=null,null}function U(e,t,n){try{const i=M(t);if(!i)return;i.forEach(t=>{if("-ms-writing-mode"===t)switch(n){case"horizontal-tb":n="lr-tb";break;case"vertical-rl":n="tb-rl";break;case"vertical-lr":n="tb-lr"}else if("-webkit-text-combine"===t)switch(n){case"all":n="horizontal"}e&&e.style&&e.style.setProperty(t,n)})}catch(e){h.warn(e)}}function z(e,t,n){try{const n=_[t];return e.style.getPropertyValue(n?n[0]:t)}catch(e){}return n||""}function V(e){let t=e.getAttributeNS(L.XML,"lang");return t||e.namespaceURI!=L.XHTML||(t=e.getAttribute("lang")),t}class H{constructor(){this.list=[]}append(e){return this.list.push(e),this}clear(){this.list=[]}toString(){const e=this.list.join("");return this.list=[e],e}}function G(e){return`\\${e.charCodeAt(0).toString(16)} `}function $(e){return e.replace(/[^-_a-zA-Z0-9\u0080-\uFFFF]/g,G)}function W(e){return e.replace(/[\u0000-\u001F"\\]/g,G)}function X(e){return e.replace(/[\s+&?=#\u007F-\uFFFF]+/g,encodeURIComponent)}function j(e){return!!e.match(/^[a-zA-Z\u009E\u009F\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u024F\u037B-\u037D\u0386\u0388-\u0482\u048A-\u0527]$/)}function K(e,t){return e.replace(/[^-a-zA-Z0-9_]/g,(function(e){return function(e,t){return(t="string"==typeof t?t:"\\u")+(65536|e.charCodeAt(0)).toString(16).substr(1)}(e,t)}))}function Y(e){return K(e)}function q(e,t){t="string"==typeof t?t:"\\u";const n=new RegExp(`${Y(t)}[0-9a-fA-F]{4}`,"g");return e.replace(n,(function(e){return function(e,t){return t="string"==typeof t?t:"\\u",0===e.indexOf(t)?String.fromCharCode(parseInt(e.substring(t.length),16)):e}(e,t)}))}function Z(e,t){let n=0,i=e;for(;;){if(0==n||t(n-1),i==e||t(i),n==i)return n;const o=n+i>>1;t(o)?i=o:n=o+1}}function Q(e,t){return e-t}function J(e,t){const n={};for(const i of e){const e=t(i);e&&!n[e]&&(n[e]=i)}return n}function ee(e,t){const n={};for(const i of e){const e=t(i);e&&(n[e]?n[e].push(i):n[e]=[i])}return n}class te{constructor(){this.listeners={}}dispatchEvent(e){const t=this.listeners[e.type];if(t){e.target=this,e.currentTarget=this;for(let n=0;n<t.length;n++)t[n](e)}}addEventListener(e,t,n){if(n)return;const i=this.listeners[e];i?i.push(t):this.listeners[e]=[t]}removeEventListener(e,t,n){if(n)return;const i=this.listeners[e];if(i){const e=i.indexOf(t);e>=0&&i.splice(e,1)}}}let ne=null;let ie=null;let oe=null;let se=null;function re(e){if(1==e.nodeType){const t=e.getAttribute("id");if(t&&t.match(/^[-a-zA-Z_0-9.\u007F-\uFFFF]+$/))return t}return null}function ae(e){return`^${e}`}function le(e){return e.replace(/[\[\]\(\),=;^]/g,ae)}function he(e){return e.substr(1)}function ce(e){return e?e.replace(/\^[\[\]\(\),=;^]/g,he):e}function ue(e){const t=[];do{const n=e.match(/^(\^,|[^,])*/),i=ce(n[0]);if(!(e=e.substr(n[0].length+1))&&!t.length)return i;t.push(i)}while(e);return t}function de(e){const t={};for(;e;){const n=e.match(/^;([^;=]+)=(([^;]|\^;)*)/);if(!n)return t;t[n[1]]=ue(n[2]),e=e.substr(n[0].length)}return t}class pe{appendTo(e){e.append("!")}applyTo(e){return!1}}class fe{constructor(e,t,n){this.index=e,this.id=t,this.sideBias=n}appendTo(e){e.append("/"),e.append(this.index.toString()),(this.id||this.sideBias)&&(e.append("["),this.id&&e.append(this.id),this.sideBias&&(e.append(";s="),e.append(this.sideBias)),e.append("]"))}applyTo(e){if(1!=e.node.nodeType)throw new Error("E_CFI_NOT_ELEMENT");const t=e.node,n=t.children,i=n.length;let o;const s=Math.floor(this.index/2)-1;if(s<0||0==i)o=t.firstChild,e.node=o||t;else{if(o=n[Math.min(s,i-1)],1&this.index){const t=o.nextSibling;t&&1!=t.nodeType?o=t:e.after=!0}e.node=o}if(this.id&&(e.after||this.id!=re(e.node)))throw new Error("E_CFI_ID_MISMATCH");return e.sideBias=this.sideBias,!0}}class ge{constructor(e,t,n,i){this.offset=e,this.textBefore=t,this.textAfter=n,this.sideBias=i}applyTo(e){if(this.offset>0&&!e.after){let t=this.offset,n=e.node;for(;;){const e=n.nodeType;if(1==e)break;const i=n.nextSibling;if(3<=e&&e<=5){const e=n.textContent.length;if(t<=e)break;if(!i){t=e;break}t-=e}if(!i){t=0;break}n=i}e.node=n,e.offset=t}return e.sideBias=this.sideBias,!0}appendTo(e){e.append(":"),e.append(this.offset.toString()),(this.textBefore||this.textAfter||this.sideBias)&&(e.append("["),(this.textBefore||this.textAfter)&&(this.textBefore&&e.append(le(this.textBefore)),e.append(","),this.textAfter&&e.append(le(this.textAfter))),this.sideBias&&(e.append(";s="),e.append(this.sideBias)),e.append("]"))}}class me{constructor(){this.steps=null}fromString(e){let t=e.match(/^#?epubcfi\((.*)\)$/);if(!t)throw new Error("E_CFI_NOT_CFI");const n=t[1];let i=0;const o=[];for(;;){let e;switch(n.charAt(i)){case"/":{if(i++,t=n.substr(i).match(/^(0|[1-9][0-9]*)(\[([-a-zA-Z_0-9.\u007F-\uFFFF]+)(;([^\]]|\^\])*)?\])?/),!t)throw new Error("E_CFI_NUMBER_EXPECTED");i+=t[0].length;const s=parseInt(t[1],10),r=t[3];e=de(t[4]),o.push(new fe(s,r,k(e.s)));break}case":":{if(i++,t=n.substr(i).match(/^(0|[1-9][0-9]*)(\[((([^\];,]|\^[\];,])*)(,(([^\];,]|\^[\];,])*))?)(;([^]]|\^\])*)?\])?/),!t)throw new Error("E_CFI_NUMBER_EXPECTED");i+=t[0].length;const s=parseInt(t[1],10);let r=t[4];r&&(r=ce(r));let a=t[7];a&&(a=ce(a)),e=de(t[10]),o.push(new ge(s,r,a,k(e.s)));break}case"!":i++,o.push(new pe);break;case"~":case"@":case"":return void(this.steps=o);default:throw new Error("E_CFI_PARSE_ERROR")}}}navigate(e){const t={node:e.documentElement,offset:0,after:!1,sideBias:null,ref:null};for(let e=0;e<this.steps.length;e++)if(!this.steps[e].applyTo(t)){t.ref=new me,t.ref.steps=this.steps.slice(e+1);break}return t}trim(e,t){return e.replace(/\s+/g," ").match(t?/^[ -\uD7FF\uE000-\uFFFF]{0,8}/:/[ -\uD7FF\uE000-\uFFFF]{0,8}$/)[0].replace(/^\s/,"").replace(/\s$/,"")}prependPathFromNode(e,t,n,i){const o=[];let s=e.parentNode,r="",a="";for(;e;){switch(e.nodeType){case 3:case 4:case 5:{const i=e.textContent,o=i.length;n?(t+=o,r||(r=i)):(t>o&&(t=o),n=!0,r=i.substr(0,t),a=i.substr(t)),e=e.previousSibling;continue}case 8:e=e.previousSibling;continue}break}for((t>0||r||a)&&(r=this.trim(r,!1),a=this.trim(a,!0),o.push(new ge(t,r,a,i)),i=null);s&&s&&9!=s.nodeType;){const t=n?null:re(e);let r=n?1:0;for(;e;)1==e.nodeType&&(r+=2),e=e.previousSibling;o.push(new fe(r,t,i)),i=null,e=s,s=s.parentNode,n=!1}o.reverse(),this.steps?(o.push(new pe),this.steps=o.concat(this.steps)):this.steps=o}toString(){if(!this.steps)return"";const e=new H;e.append("epubcfi(");for(let t=0;t<this.steps.length;t++)this.steps[t].appendTo(e);return e.append(")"),e.toString()}}function be(e){return{fontFamily:e.fontFamily,lineHeight:e.lineHeight,margin:e.margin,hyphenate:e.hyphenate,columnWidth:e.columnWidth,horizontal:e.horizontal,nightMode:e.nightMode,spreadView:e.spreadView,pageBorder:e.pageBorder,enabledMediaTypes:Object.assign({},e.enabledMediaTypes),defaultPaperSize:e.defaultPaperSize?Object.assign({},e.defaultPaperSize):void 0}}const we={fontFamily:"serif",lineHeight:1.25,margin:8,hyphenate:!1,columnWidth:25,horizontal:!1,nightMode:!1,spreadView:!1,pageBorder:1,enabledMediaTypes:{vivliostyle:!0,print:!0},defaultPaperSize:void 0},Ee={PENDING:{}};function ye(e,t,n,i){const o=Math.min((e-0)/n,(t-0)/i);return`matrix(${o},0,0,${o},0,0)`}function Se(e){return`"${W(`${e}`)}"`}function Ne(e){return $(`${e}`)}function ve(e,t){return e?`${$(e)}.${$(t)}`:$(t)}let Ce=0;class Te{constructor(e,t){if(this.parent=e,this.resolver=t,this.children=[],this.values={},this.funcs={},this.builtIns={},this.scopeKey=`S${Ce++}`,this.zero=new rt(this,0),this.one=new rt(this,1),this._true=new rt(this,!0),this._false=new rt(this,!1),e&&e.children.push(this),!e){const e=this.builtIns;e.floor=Math.floor,e.ceil=Math.ceil,e.round=Math.round,e.sqrt=Math.sqrt,e.min=Math.min,e.max=Math.max,e.letterbox=ye,e["css-string"]=Se,e["css-name"]=Ne,e.typeof=e=>typeof e,this.defineBuiltInName("page-width",(function(){return this.pageWidth()})),this.defineBuiltInName("page-height",(function(){return this.pageHeight()})),this.defineBuiltInName("pref-font-family",(function(){return this.pref.fontFamily})),this.defineBuiltInName("pref-night-mode",(function(){return this.pref.nightMode})),this.defineBuiltInName("pref-hyphenate",(function(){return this.pref.hyphenate})),this.defineBuiltInName("pref-margin",(function(){return this.pref.margin})),this.defineBuiltInName("pref-line-height",(function(){return this.pref.lineHeight})),this.defineBuiltInName("pref-column-width",(function(){return this.pref.columnWidth*this.fontSize})),this.defineBuiltInName("pref-horizontal",(function(){return this.pref.horizontal})),this.defineBuiltInName("pref-spread-view",(function(){return this.pref.spreadView})),this.defineBuiltInName("pub-title",(function(){return Se(this.pubTitle?this.pubTitle:"")})),this.defineBuiltInName("doc-title",(function(){return Se(this.docTitle?this.docTitle:"")}))}}defineBuiltInName(e,t){this.values[e]=new it(this,t,e)}defineName(e,t){this.values[e]=t}defineFunc(e,t){this.funcs[e]=t}defineBuiltIn(e,t){this.builtIns[e]=t}}function xe(e){switch(e.toLowerCase()){case"vw":case"vh":case"vi":case"vb":case"vmin":case"vmax":case"pvw":case"pvh":case"pvi":case"pvb":case"pvmin":case"pvmax":return!0;default:return!1}}const Ie={px:1,in:96,pt:4/3,pc:16,cm:96/2.54,mm:96/25.4,q:96/2.54/40,em:16,rem:16,ex:8,dppx:1,dpi:1/96,dpcm:2.54/96};function Pe(e){switch(e){case"q":case"rem":return!0;default:return!1}}class Ae{constructor(e,t,n,i){this.rootScope=e,this.viewportWidth=t,this.viewportHeight=n,this.actualPageWidth=null,this.actualPageHeight=null,this.rootFontSize=null,this.scopes={},this.pageAreaWidth=null,this.pageAreaHeight=null,this.pageVertical=null,this.pubTitle=null,this.docTitle=null,this.pageWidth=function(){return this.actualPageWidth?this.actualPageWidth:this.pref.spreadView?Math.floor(t/2)-this.pref.pageBorder:t},this.pageHeight=function(){return this.actualPageHeight?this.actualPageHeight:n},this.initialFontSize=i,this.fontSize=function(){return this.rootFontSize?this.rootFontSize:i},this.pref=we}getScopeContext(e){let t=this.scopes[e.scopeKey];return t||(t={},this.scopes[e.scopeKey]=t),t}clearScope(e){this.scopes[e.scopeKey]={};for(let t=0;t<e.children.length;t++)this.clearScope(e.children[t])}queryUnitSize(e,t){if(xe(e)){const t=this.pageWidth()/100,n=this.pageHeight()/100,i=null!=this.pageAreaWidth?this.pageAreaWidth/100:t,o=null!=this.pageAreaHeight?this.pageAreaHeight/100:n;switch(e){case"vw":return i;case"vh":return o;case"vi":return this.pageVertical?o:i;case"vb":return this.pageVertical?i:o;case"vmin":return i<o?i:o;case"vmax":return i>o?i:o;case"pvw":return t;case"pvh":return n;case"pvi":return this.pageVertical?n:t;case"pvb":return this.pageVertical?t:n;case"pvmin":return t<n?t:n;case"pvmax":return t>n?t:n}}return"em"==e||"rem"==e?t?this.initialFontSize:this.fontSize():"ex"==e?Ie.ex*(t?this.initialFontSize:this.fontSize())/Ie.em:Ie[e]}evalName(e,t){do{let n=e.values[t];if(n)return n;if(e.resolver&&(n=e.resolver.call(this,t,!1),n))return n;e=e.parent}while(e);throw new Error(`Name '${t}' is undefined`)}evalCall(e,t,n,i){do{let o=e.funcs[t];if(o)return o;if(e.resolver&&(o=e.resolver.call(this,t,!0),o))return o;const s=e.builtIns[t];if(s){if(i)return e.zero;const t=Array(n.length);for(let e=0;e<n.length;e++)t[e]=n[e].evaluate(this);return new rt(e,s.apply(this,t))}e=e.parent}while(e);throw new Error(`Function '${t}' is undefined`)}evalMediaName(e,t){const n="all"===e||!!this.pref.enabledMediaTypes[e];return t?!n:n}evalMediaTest(e,t){let n="";const i=e.match(/^(min|max)-(.*)$/);i&&(n=i[1],e=i[2]);let o=null,s=null;switch(e){case"width":case"height":case"device-width":case"device-height":case"color":t&&(o=t.evaluate(this))}switch(e){case"width":s=this.pageWidth();break;case"height":s=this.pageHeight();break;case"device-width":s=window.screen.availWidth;break;case"device-height":s=window.screen.availHeight;break;case"color":s=window.screen.pixelDepth}if(null!=s&&null!=o)switch(n){case"min":return s>=o;case"max":return s<=o;default:return s==o}else if(null!=s&&null==t)return 0!==s;return!1}queryVal(e,t){const n=this.scopes[e.scopeKey];return n?n[t]:void 0}storeVal(e,t,n){this.getScopeContext(e)[t]=n}}class Oe{constructor(e){this.scope=e,this.scope=e,this.key=`_${Ce++}`}toString(){const e=new H;return this.appendTo(e,0),e.toString()}appendTo(e,t){throw new Error("F_ABSTRACT")}evaluateCore(e){throw new Error("F_ABSTRACT")}expand(e,t){return this}dependCore(e,t,n){return e===this}dependOuter(e,t,n){const i=n[this.key];if(null!=i)return i!==Ee.PENDING&&i;{n[this.key]=Ee.PENDING;const i=this.dependCore(e,t,n);return n[this.key]=i,i}}depend(e,t){return this.dependOuter(e,t,{})}evaluate(e){let t=e.queryVal(this.scope,this.key);return void 0!==t?t:(t=this.evaluateCore(e),e.storeVal(this.scope,this.key,t),t)}isMediaName(){return!1}}class Re extends Oe{constructor(e,t){super(e),this.val=t}getOp(){throw new Error("F_ABSTRACT")}evalPrefix(e){throw new Error("F_ABSTRACT")}evaluateCore(e){const t=this.val.evaluate(e);return this.evalPrefix(t)}dependCore(e,t,n){return e===this||this.val.dependOuter(e,t,n)}appendTo(e,t){10<t&&e.append("("),e.append(this.getOp()),this.val.appendTo(e,10),10<t&&e.append(")")}expand(e,t){const n=this.val.expand(e,t);return n===this.val?this:new this.constructor(this.scope,n)}}class Le extends Oe{constructor(e,t,n){super(e),this.lhs=t,this.rhs=n}getPriority(){throw new Error("F_ABSTRACT")}getOp(){throw new Error("F_ABSTRACT")}evalInfix(e,t){throw new Error("F_ABSTRACT")}evaluateCore(e){const t=this.lhs.evaluate(e),n=this.rhs.evaluate(e);return this.evalInfix(t,n)}dependCore(e,t,n){return e===this||this.lhs.dependOuter(e,t,n)||this.rhs.dependOuter(e,t,n)}appendTo(e,t){const n=this.getPriority();n<=t&&e.append("("),this.lhs.appendTo(e,n),e.append(this.getOp()),this.rhs.appendTo(e,n),n<=t&&e.append(")")}expand(e,t){const n=this.lhs.expand(e,t),i=this.rhs.expand(e,t);return n===this.lhs&&i===this.rhs?this:new this.constructor(this.scope,n,i)}}class ke extends Le{constructor(e,t,n){super(e,t,n)}getPriority(){return 1}}class Fe extends Le{constructor(e,t,n){super(e,t,n)}getPriority(){return 2}}class De extends Le{constructor(e,t,n){super(e,t,n)}getPriority(){return 3}}class _e extends Le{constructor(e,t,n){super(e,t,n)}getPriority(){return 4}}class Be extends Re{constructor(e,t){super(e,t)}getOp(){return"!"}evalPrefix(e){return!e}}class Me extends Re{constructor(e,t){super(e,t)}getOp(){return"-"}evalPrefix(e){return-e}}class Ue extends ke{constructor(e,t,n){super(e,t,n)}getOp(){return"&&"}evaluateCore(e){return this.lhs.evaluate(e)&&this.rhs.evaluate(e)}}class ze extends Ue{constructor(e,t,n){super(e,t,n)}getOp(){return" and "}}class Ve extends ke{constructor(e,t,n){super(e,t,n)}getOp(){return"||"}evaluateCore(e){return this.lhs.evaluate(e)||this.rhs.evaluate(e)}}class He extends Ve{constructor(e,t,n){super(e,t,n)}getOp(){return", "}}class Ge extends Fe{constructor(e,t,n){super(e,t,n)}getOp(){return"<"}evalInfix(e,t){return e<t}}class $e extends Fe{constructor(e,t,n){super(e,t,n)}getOp(){return"<="}evalInfix(e,t){return e<=t}}class We extends Fe{constructor(e,t,n){super(e,t,n)}getOp(){return">"}evalInfix(e,t){return e>t}}class Xe extends Fe{constructor(e,t,n){super(e,t,n)}getOp(){return">="}evalInfix(e,t){return e>=t}}class je extends Fe{constructor(e,t,n){super(e,t,n)}getOp(){return"=="}evalInfix(e,t){return e==t}}class Ke extends Fe{constructor(e,t,n){super(e,t,n)}getOp(){return"!="}evalInfix(e,t){return e!=t}}class Ye extends De{constructor(e,t,n){super(e,t,n)}getOp(){return"+"}evalInfix(e,t){return e+t}}class qe extends De{constructor(e,t,n){super(e,t,n)}getOp(){return" - "}evalInfix(e,t){return e-t}}class Ze extends _e{constructor(e,t,n){super(e,t,n)}getOp(){return"*"}evalInfix(e,t){return e*t}}class Qe extends _e{constructor(e,t,n){super(e,t,n)}getOp(){return"/"}evalInfix(e,t){return e/t}}class Je extends _e{constructor(e,t,n){super(e,t,n)}getOp(){return"%"}evalInfix(e,t){return e%t}}class et extends Oe{constructor(e,t,n){super(e),this.num=t,this.unit=n.toLowerCase()}appendTo(e,t){e.append(this.num.toString()),e.append($(this.unit))}evaluateCore(e){return this.num*e.queryUnitSize(this.unit,!1)}}class tt extends Oe{constructor(e,t){super(e),this.qualifiedName=t}appendTo(e,t){e.append(this.qualifiedName)}evaluateCore(e){return e.evalName(this.scope,this.qualifiedName).evaluate(e)}dependCore(e,t,n){return e===this||t.evalName(this.scope,this.qualifiedName).dependOuter(e,t,n)}}class nt extends Oe{constructor(e,t,n){super(e),this.not=t,this.name=n}appendTo(e,t){this.not&&e.append("not "),e.append($(this.name))}evaluateCore(e){return e.evalMediaName(this.name,this.not)}dependCore(e,t,n){return e===this||this.value.dependOuter(e,t,n)}isMediaName(){return!0}}class it extends Oe{constructor(e,t,n){super(e),this.fn=t,this.str=n}appendTo(e,t){e.append(this.str)}evaluateCore(e){return this.fn.call(e)}}class ot extends Oe{constructor(e,t,n){super(e),this.qualifiedName=t,this.params=n}appendTo(e,t){e.append(this.qualifiedName),function(e,t){e.append("(");for(let n=0;n<t.length;n++)n&&e.append(","),t[n].appendTo(e,0);e.append(")")}(e,this.params)}evaluateCore(e){return e.evalCall(this.scope,this.qualifiedName,this.params,!1).expand(e,this.params).evaluate(e)}dependCore(e,t,n){if(e===this)return!0;for(let i=0;i<this.params.length;i++)if(this.params[i].dependOuter(e,t,n))return!0;return t.evalCall(this.scope,this.qualifiedName,this.params,!0).dependOuter(e,t,n)}expand(e,t){const n=function(e,t,n){let i=t;for(let o=0;o<t.length;o++){const s=t[o].expand(e,n);if(t!==i)i[o]=s;else if(s!==t[o]){i=Array(t.length);for(let e=0;e<o;e++)i[e]=t[e];i[o]=s}}return i}(e,this.params,t);return n===this.params?this:new ot(this.scope,this.qualifiedName,n)}}class st extends Oe{constructor(e,t,n,i){super(e),this.cond=t,this.ifTrue=n,this.ifFalse=i}appendTo(e,t){t>0&&e.append("("),this.cond.appendTo(e,0),e.append("?"),this.ifTrue.appendTo(e,0),e.append(":"),this.ifFalse.appendTo(e,0),t>0&&e.append(")")}evaluateCore(e){return this.cond.evaluate(e)?this.ifTrue.evaluate(e):this.ifFalse.evaluate(e)}dependCore(e,t,n){return e===this||this.cond.dependOuter(e,t,n)||this.ifTrue.dependOuter(e,t,n)||this.ifFalse.dependOuter(e,t,n)}expand(e,t){const n=this.cond.expand(e,t),i=this.ifTrue.expand(e,t),o=this.ifFalse.expand(e,t);return n===this.cond&&i===this.ifTrue&&o===this.ifFalse?this:new st(this.scope,n,i,o)}}class rt extends Oe{constructor(e,t){super(e),this.val=t}appendTo(e,t){switch(typeof this.val){case"number":case"boolean":e.append(this.val.toString());break;case"string":e.append('"'),e.append(W(this.val)),e.append('"');break;default:throw new Error("F_UNEXPECTED_STATE")}}evaluateCore(e){return this.val}}class at extends Oe{constructor(e,t,n){super(e),this.name=t,this.value=n}appendTo(e,t){e.append("("),e.append(W(this.name.name)),e.append(":"),this.value.appendTo(e,0),e.append(")")}evaluateCore(e){return e.evalMediaTest(this.name.name,this.value)}dependCore(e,t,n){return e===this||this.value.dependOuter(e,t,n)}expand(e,t){const n=this.value.expand(e,t);return n===this.value?this:new at(this.scope,this.name,n)}}class lt extends Oe{constructor(e,t){super(e),this.index=t}appendTo(e,t){e.append("$"),e.append(this.index.toString())}expand(e,t){const n=t[this.index];if(!n)throw new Error(`Parameter missing: ${this.index}`);return n}}function ht(e,t,n){return t===e._false||t===e.zero||n==e._false||n==e.zero?e._false:t===e._true||t===e.one?n:n===e._true||n===e.one?t:new Ue(e,t,n)}function ct(e,t,n){return t===e.zero?n:n===e.zero?t:new Ye(e,t,n)}function ut(e,t,n){return t===e.zero?new Me(e,n):n===e.zero?t:new qe(e,t,n)}function dt(e,t,n){return t===e.zero||n===e.zero?e.zero:t===e.one?n:n===e.one?t:new Ze(e,t,n)}function pt(e,t,n){return t===e.zero?e.zero:n===e.one?t:new Qe(e,t,n)}class ft{visitValues(e){for(let t=0;t<e.length;t++)e[t].visit(this)}visitEmpty(e){throw new Error("E_CSS_EMPTY_NOT_ALLOWED")}visitSlash(e){throw new Error("E_CSS_SLASH_NOT_ALLOWED")}visitStr(e){throw new Error("E_CSS_STR_NOT_ALLOWED")}visitIdent(e){throw new Error("E_CSS_IDENT_NOT_ALLOWED")}visitNumeric(e){throw new Error("E_CSS_NUMERIC_NOT_ALLOWED")}visitNum(e){throw new Error("E_CSS_NUM_NOT_ALLOWED")}visitInt(e){return this.visitNum(e)}visitColor(e){throw new Error("E_CSS_COLOR_NOT_ALLOWED")}visitURL(e){throw new Error("E_CSS_URL_NOT_ALLOWED")}visitSpaceList(e){throw new Error("E_CSS_LIST_NOT_ALLOWED")}visitCommaList(e){throw new Error("E_CSS_COMMA_NOT_ALLOWED")}visitFunc(e){throw new Error("E_CSS_FUNC_NOT_ALLOWED")}visitExpr(e){throw new Error("E_CSS_EXPR_NOT_ALLOWED")}}class gt extends ft{constructor(){super()}visitValues(e){let t=null;for(let n=0;n<e.length;n++){const i=e[n],o=i.visit(this);if(t)t[n]=o;else if(i!==o){t=new Array(e.length);for(let i=0;i<n;i++)t[i]=e[i];t[n]=o}}return t||e}visitStr(e){return e}visitIdent(e){return e}visitSlash(e){return e}visitNumeric(e){return e}visitNum(e){return e}visitInt(e){return e}visitColor(e){return e}visitURL(e){return e}visitSpaceList(e){const t=this.visitValues(e.values);return t===e.values?e:new Rt(t)}visitCommaList(e){const t=this.visitValues(e.values);return t===e.values?e:new Lt(t)}visitFunc(e){const t=this.visitValues(e.values);return t===e.values?e:new kt(e.name,t)}visitExpr(e){return e}}class mt{toString(){const e=new H;return this.appendTo(e,!0),e.toString()}stringValue(){const e=new H;return this.appendTo(e,!1),e.toString()}toExpr(e,t){throw new Error("F_ABSTRACT")}appendTo(e,t){e.append("[error]")}isExpr(){return!1}isNumeric(){return!1}isNum(){return!1}isIdent(){return!1}isSpaceList(){return!1}visit(e){throw new Error("F_ABSTRACT")}}class bt extends mt{constructor(){super()}static get instance(){return this.empty||(this.empty=new bt),this.empty}toExpr(e,t){return new rt(e,"")}appendTo(e,t){}visit(e){return e.visitEmpty(this)}}const wt=bt.instance;class Et extends mt{constructor(){super()}static get instance(){return this.slash||(this.slash=new Et),this.slash}toExpr(e,t){return new rt(e,"/")}appendTo(e,t){e.append("/")}visit(e){return e.visitSlash(this)}}const yt=Et.instance;class St extends mt{constructor(e){super(),this.str=e}toExpr(e,t){return new rt(e,this.str)}appendTo(e,t){t?(e.append('"'),e.append(W(this.str)),e.append('"')):e.append(this.str)}visit(e){return e.visitStr(this)}}const Nt={};class vt extends mt{constructor(e){if(super(),this.name=e,Nt[e])throw new Error("E_INVALID_CALL");Nt[e]=this}toExpr(e,t){return new rt(e,this.name)}appendTo(e,t){t?e.append($(this.name)):e.append(this.name)}visit(e){return e.visitIdent(this)}isIdent(){return!0}}function Ct(e){let t=Nt[e];return t||(t=new vt(e)),t}class Tt extends mt{constructor(e,t){super(),this.num=e,this.unit=t.toLowerCase()}toExpr(e,t){return 0==this.num?e.zero:t&&"%"==this.unit?100==this.num?t:new Ze(e,t,new rt(e,this.num/100)):new et(e,this.num,this.unit)}appendTo(e,t){e.append(this.num.toString()),e.append(this.unit)}visit(e){return e.visitNumeric(this)}isNumeric(){return!0}}class xt extends mt{constructor(e){super(),this.num=e}toExpr(e,t){return 0==this.num?e.zero:1==this.num?e.one:new rt(e,this.num)}appendTo(e,t){e.append(this.num.toString())}visit(e){return e.visitNum(this)}isNum(){return!0}}class It extends xt{constructor(e){super(e)}visit(e){return e.visitInt(this)}}class Pt extends mt{constructor(e){super(),this.rgb=e}appendTo(e,t){e.append("#");const n=this.rgb.toString(16);e.append("000000".substr(n.length)),e.append(n)}visit(e){return e.visitColor(this)}}class At extends mt{constructor(e){super(),this.url=e}appendTo(e,t){e.append('url("'),e.append(W(this.url)),e.append('")')}visit(e){return e.visitURL(this)}}function Ot(e,t,n,i){const o=t.length;t[0].appendTo(e,i);for(let s=1;s<o;s++)e.append(n),t[s].appendTo(e,i)}class Rt extends mt{constructor(e){super(),this.values=e}appendTo(e,t){Ot(e,this.values," ",t)}visit(e){return e.visitSpaceList(this)}isSpaceList(){return!0}}class Lt extends mt{constructor(e){super(),this.values=e}appendTo(e,t){Ot(e,this.values,",",t)}visit(e){return e.visitCommaList(this)}}class kt extends mt{constructor(e,t){super(),this.name=e,this.values=t}appendTo(e,t){e.append($(this.name)),e.append("("),Ot(e,this.values,",",t),e.append(")")}visit(e){return e.visitFunc(this)}}class Ft extends mt{constructor(e){super(),this.expr=e}toExpr(){return this.expr}appendTo(e,t){e.append("-epubx-expr("),this.expr.appendTo(e,0),e.append(")")}visit(e){return e.visitExpr(this)}isExpr(){return!0}}function Dt(e,t){if(e){if(e.isNumeric()){const n=e;return t.queryUnitSize(n.unit,!1)*n.num}if(e.isNum())return e.num}return 0}function _t(e,t){return new Tt(Dt(e,t),"px")}const Bt={absolute:Ct("absolute"),all:Ct("all"),always:Ct("always"),auto:Ct("auto"),avoid:Ct("avoid"),balance:Ct("balance"),balance_all:Ct("balance-all"),block:Ct("block"),block_end:Ct("block-end"),block_start:Ct("block-start"),both:Ct("both"),bottom:Ct("bottom"),border_box:Ct("border-box"),break_all:Ct("break-all"),break_word:Ct("break-word"),crop:Ct("crop"),cross:Ct("cross"),column:Ct("column"),exclusive:Ct("exclusive"),_false:Ct("false"),fixed:Ct("fixed"),flex:Ct("flex"),footnote:Ct("footnote"),footer:Ct("footer"),header:Ct("header"),hidden:Ct("hidden"),horizontal_tb:Ct("horizontal-tb"),inherit:Ct("inherit"),inline:Ct("inline"),inline_block:Ct("inline-block"),inline_end:Ct("inline-end"),inline_start:Ct("inline-start"),landscape:Ct("landscape"),left:Ct("left"),line:Ct("line"),list_item:Ct("list-item"),ltr:Ct("ltr"),manual:Ct("manual"),none:Ct("none"),normal:Ct("normal"),oeb_page_foot:Ct("oeb-page-foot"),oeb_page_head:Ct("oeb-page-head"),page:Ct("page"),relative:Ct("relative"),right:Ct("right"),same:Ct("same"),scale:Ct("scale"),snap_block:Ct("snap-block"),spread:Ct("spread"),_static:Ct("static"),rtl:Ct("rtl"),table:Ct("table"),table_caption:Ct("table-caption"),table_cell:Ct("table-cell"),table_footer_group:Ct("table-footer-group"),table_header_group:Ct("table-header-group"),table_row:Ct("table-row"),top:Ct("top"),transparent:Ct("transparent"),vertical_lr:Ct("vertical-lr"),vertical_rl:Ct("vertical-rl"),visible:Ct("visible"),_true:Ct("true")},Mt=new Tt(100,"%"),Ut=new Tt(100,"pvw"),zt=new Tt(100,"pvh"),Vt=new Tt(0,"px"),Ht={"font-size":1,color:2};function Gt(e,t){return(Ht[e]||Number.MAX_VALUE)-(Ht[t]||Number.MAX_VALUE)}class $t{constructor(e,t,n,i){this.x1=e,this.y1=t,this.x2=n,this.y2=i}}class Wt{constructor(e,t){this.x=e,this.y=t}}class Xt{constructor(e,t,n,i){this.left=e,this.top=t,this.right=n,this.bottom=i}}class jt{constructor(e,t,n,i){this.low=e,this.high=t,this.winding=n,this.shapeId=i}}class Kt{constructor(e,t,n,i){this.y1=e,this.y2=t,this.x1=n,this.x2=i,this.left=null,this.right=null}}function Yt(e,t){return e.low.y-t.low.y||e.low.x-t.low.x}class qt{constructor(e){this.points=e}addSegments(e,t){const n=this.points,i=n.length;let o=n[i-1];for(let s=0;s<i;s++){const i=n[s];let r;r=o.y<i.y?new jt(o,i,1,t):new jt(i,o,-1,t),e.push(r),o=i}}withOffset(e,t){const n=[];for(const i of this.points)n.push(new Wt(i.x+e,i.y+t));return new qt(n)}}function Zt(e,t,n,i){const o=[];for(let s=0;s<20;s++){const r=2*s*Math.PI/20;o.push(new Wt(e+n*Math.sin(r),t+i*Math.cos(r)))}return new qt(o)}function Qt(e,t,n,i){return new qt([new Wt(e,t),new Wt(n,t),new Wt(n,i),new Wt(e,i)])}class Jt{constructor(e,t,n,i){this.x=e,this.winding=t,this.shapeId=n,this.lowOrHigh=i}}function en(e,t){const n=e.low.x+(e.high.x-e.low.x)*(t-e.low.y)/(e.high.y-e.low.y);if(isNaN(n))throw new Error("Bad intersection");return n}function tn(e,t,n,i){let o,s,r,a;t.high.y<n&&h.warn("Error: inconsistent segment (1)"),t.low.y<=n?(o=en(t,n),s=t.winding):(o=t.low.x,s=0),t.high.y>=i?(r=en(t,i),a=t.winding):(r=t.high.x,a=0),o<r?(e.push(new Jt(o,s,t.shapeId,-1)),e.push(new Jt(r,a,t.shapeId,1))):(e.push(new Jt(r,a,t.shapeId,-1)),e.push(new Jt(o,s,t.shapeId,1)))}function nn(e,t,n){const i=t+n,o=Array(i),s=Array(i);let r;for(r=0;r<=i;r++)o[r]=0,s[r]=0;const a=[];let l=!1;const h=e.length;for(let n=0;n<h;n++){const h=e[n];o[h.shapeId]+=h.winding,s[h.shapeId]+=h.lowOrHigh;let c=!1;for(r=0;r<t;r++)if(o[r]&&!s[r]){c=!0;break}if(c)for(r=t;r<=i;r++)if(o[r]||s[r]){c=!1;break}l!=c&&(a.push(h.x),l=c)}return a}function on(e,t){return t?Math.ceil(e/t)*t:e}function sn(e,t){return t?Math.floor(e/t)*t:e}function rn(e){return new $t(e.y1,-e.x2,e.y2,-e.x1)}function an(e){return new $t(-e.y2,e.x1,-e.y1,e.x2)}function ln(e){return new qt(e.points.map(e=>(function(e){return new Wt(e.y,-e.x)})(e)))}function hn(e,t){let n=t.length-1,i=new Kt(e.y2,e.y2,e.x1,e.x2);for(;n>=0;){const e=i;i=t[n],(i.y2-i.y1<1||i.x1==e.x1&&i.x2==e.x2)&&(e.y1=i.y1,t.splice(n,1),i=e),n--}}function cn(e,t){let n=0,i=e.length;for(;n<i;){const o=Math.floor((n+i)/2);t>=e[o].y2?n=o+1:i=o}return n}function un(e,t){if(!e.length)return t;let n,i,o=t.y1;for(i=0;i<e.length&&(n=e[i],!(n.y2>t.y1&&n.x1-.1<=t.x1&&n.x2+.1>=t.x2));i++)o=Math.max(o,n.y2);let s=o;for(;i<e.length&&(n=e[i],!(n.y1>=t.y2||n.x1-.1>t.x1||n.x2+.1<t.x2));i++)s=n.y2;return s=i===e.length?t.y2:Math.min(s,t.y2),s<=o?null:new $t(t.x1,o,t.x2,s)}function dn(e,t){if(!e.length)return t;let n,i,o=t.y2;for(i=e.length-1;i>=0&&(n=e[i],!(i===e.length-1&&n.y2<t.y2))&&!(n.y1<t.y2&&n.x1-.1<=t.x1&&n.x2+.1>=t.x2);i--)o=Math.min(o,n.y1);let s=Math.min(o,n.y2);for(;i>=0&&(n=e[i],!(n.y2<=t.y1||n.x1-.1>t.x1||n.x2+.1<t.x2));i--)s=n.y1;return s=Math.max(s,t.y1),o<=s?null:new $t(t.x1,s,t.x2,o)}class pn extends ft{constructor(){super(),this.propSet={}}visitIdent(e){return this.propSet[e.name]=!0,e}visitSpaceList(e){return this.visitValues(e.values),e}}class fn extends ft{constructor(e){super(),this.value=e}visitInt(e){return this.value=e.num,e}}function gn(e,t){if(e){const n=new fn(t);try{return e.visit(n),n.value}catch(e){h.warn(e,"toInt: ")}}return t}class mn extends ft{constructor(){super(),this.collect=!1,this.coords=[],this.name=null}visitNumeric(e){return this.collect&&this.coords.push(e),null}visitNum(e){return this.collect&&0==e.num&&this.coords.push(new Tt(0,"px")),null}visitSpaceList(e){return this.visitValues(e.values),null}visitFunc(e){return this.collect||(this.collect=!0,this.visitValues(e.values),this.collect=!1,this.name=e.name.toLowerCase()),null}getShape(e,t,n,i,o){if(this.coords.length>0){const s=[];switch(this.coords.forEach((e,t)=>{if("%"==e.unit){let o=t%2==0?n:i;3==t&&"circle"==this.name&&(o=Math.sqrt((n*n+i*i)/2)),s.push(e.num*o/100)}else s.push(e.num*o.queryUnitSize(e.unit,!1))}),this.name){case"polygon":if(s.length%2==0){const n=[];for(let i=0;i<s.length;i+=2)n.push(new Wt(e+s[i],t+s[i+1]));return new qt(n)}break;case"rectangle":if(4==s.length)return Qt(e+s[0],t+s[1],e+s[0]+s[2],t+s[1]+s[3]);break;case"ellipse":if(4==s.length)return Zt(e+s[0],t+s[1],s[2],s[3]);break;case"circle":if(3==s.length)return Zt(e+s[0],t+s[1],s[2],s[2])}}return null}}function bn(e,t,n,i,o,s){if(e){const r=new mn;try{return e.visit(r),r.getShape(t,n,i,o,s)}catch(e){h.warn(e,"toShape:")}}return Qt(t,n,t+i,n+o)}class wn extends ft{constructor(e){super(),this.reset=e,this.counters={},this.name=null}visitIdent(e){return this.name=e.toString(),this.reset?this.counters[this.name]=0:this.counters[this.name]=(this.counters[this.name]||0)+1,e}visitInt(e){return this.name&&(this.counters[this.name]+=e.num-(this.reset?0:1)),e}visitSpaceList(e){return this.visitValues(e.values),e}}function En(e,t){const n=new wn(t);try{e.visit(n)}catch(e){h.warn(e,"toCounters:")}return n.counters}class yn extends gt{constructor(e,t){super(),this.baseUrl=e,this.transformer=t}visitURL(e){return new At(this.transformer.transformURL(e.url,this.baseUrl))}}function Sn(e){const t={};return Object.keys(e).forEach(n=>{t[n]=Array.from(e[n])}),t}class Nn{constructor(e,t){this.targetId=e,this.resolved=t,this.pageCounters=null,this.spineIndex=-1,this.pageIndex=-1}equals(e){return this===e||!!e&&this.targetId===e.targetId&&this.resolved===e.resolved&&this.spineIndex===e.spineIndex&&this.pageIndex===e.pageIndex}isResolved(){return this.resolved}resolve(){this.resolved=!0}unresolve(){this.resolved=!1}}class vn{constructor(e,t){this.counterStore=e,this.baseURL=t}countersOfId(e,t){e=this.counterStore.documentURLTransformer.transformFragment(e,this.baseURL),this.counterStore.countersById[e]=t}getExprContentListener(){return this.counterStore.getExprContentListener()}}class Cn{constructor(e,t,n,i){this.counterStore=e,this.baseURL=t,this.rootScope=n,this.pageScope=i,this.styler=null}setStyler(e){this.styler=e}getFragment(e){const t=e.match(/^[^#]*#(.*)$/);return t?t[1]:null}getTransformedId(e){let t=this.counterStore.documentURLTransformer.transformURL(O(e,this.baseURL),this.baseURL);return"#"===t.charAt(0)&&(t=t.substring(1)),t}getPageCounterVal(e,t){const n=this,i=new it(this.pageScope,()=>t(function(){const t=n.counterStore.currentPageCounters[e];return t&&t.length?t[t.length-1]:null}()),`page-counter-${e}`);return this.counterStore.registerPageCounterExpr(e,(function(e){return t(e[0])}),i),i}getPageCountersVal(e,t){const n=this,i=new it(this.pageScope,()=>t(n.counterStore.currentPageCounters[e]||[]),`page-counters-${e}`);return this.counterStore.registerPageCounterExpr(e,t,i),i}getTargetCounters(e,t,n){let i=this.counterStore.countersById[t];return!i&&n&&e&&(this.styler.styleUntilIdIsReached(e),i=this.counterStore.countersById[t]),i||null}getTargetPageCounters(e){return this.counterStore.currentPage.elementsById[e]?this.counterStore.currentPageCounters:this.counterStore.pageCountersById[e]||null}getTargetCounterVal(e,t,n){const i=this.getFragment(e),o=this.getTransformedId(e);let s=this.getTargetCounters(i,o,!1);if(s&&s[t]){const e=s[t];return new rt(this.rootScope,n(e[e.length-1]||null))}const r=this;return new it(this.pageScope,()=>{if(s=r.getTargetCounters(i,o,!0),s){if(s[t]){const e=s[t];return n(e[e.length-1]||null)}{const e=r.getTargetPageCounters(o);if(e){if(r.counterStore.resolveReference(o),e[t]){const i=e[t];return n(i[i.length-1]||null)}return n(0)}return r.counterStore.saveReferenceOfCurrentPage(o,!1),"??"}}return r.counterStore.saveReferenceOfCurrentPage(o,!1),"??"},`target-counter-${t}-of-${e}`)}getTargetCountersVal(e,t,n){const i=this.getFragment(e),o=this.getTransformedId(e),s=this;return new it(this.pageScope,()=>{const e=s.getTargetPageCounters(o);if(e){s.counterStore.resolveReference(o);const r=e[t]||[],a=s.getTargetCounters(i,o,!0)[t]||[];return n(r.concat(a))}return s.counterStore.saveReferenceOfCurrentPage(o,!1),"??"},`target-counters-${t}-of-${e}`)}}class Tn{constructor(e){this.documentURLTransformer=e,this.countersById={},this.pageCountersById={},this.currentPageCounters={},this.previousPageCounters={},this.currentPageCountersStack=[],this.pageIndicesById={},this.currentPage=null,this.newReferencesOfCurrentPage=[],this.referencesToSolve=[],this.referencesToSolveStack=[],this.unresolvedReferences={},this.resolvedReferences={},this.pagesCounterExprs=[],this.currentPageCounters.page=[0]}createCounterListener(e){return new vn(this,e)}createCounterResolver(e,t,n){return new Cn(this,e,t,n)}setCurrentPage(e){this.currentPage=e}definePageCounter(e,t){this.currentPageCounters[e]?this.currentPageCounters[e].push(t):this.currentPageCounters[e]=[t]}forceSetPageCounter(e){const t=this.currentPageCounters.page;t&&t.length?t[t.length-1]=e:this.currentPageCounters.page=[e]}updatePageCounters(e,t){let n;this.previousPageCounters=Sn(this.currentPageCounters);const i=e["counter-reset"];if(i){const e=i.evaluate(t);e&&(n=En(e,!0))}if(n)for(const e in n)this.definePageCounter(e,n[e]);let o;const s=e["counter-increment"];if(s){const e=s.evaluate(t);e&&(o=En(e,!1))}o?"page"in o||(o.page=1):(o={},o.page=1);for(const e in o){this.currentPageCounters[e]||this.definePageCounter(e,0);const t=this.currentPageCounters[e];t[t.length-1]+=o[e]}}pushPageCounters(e){this.currentPageCountersStack.push(this.currentPageCounters),this.currentPageCounters=Sn(e)}popPageCounters(){this.currentPageCounters=this.currentPageCountersStack.pop()}resolveReference(e){const t=this.unresolvedReferences[e];let n=this.resolvedReferences[e];n||(n=this.resolvedReferences[e]=[]);let i=!1;for(let o=0;o<this.referencesToSolve.length;){const s=this.referencesToSolve[o];if(s.targetId===e){if(s.resolve(),this.referencesToSolve.splice(o,1),t){const e=t.indexOf(s);e>=0&&t.splice(e,1)}n.push(s),i=!0}else o++}i||this.saveReferenceOfCurrentPage(e,!0)}saveReferenceOfCurrentPage(e,t){if(!this.newReferencesOfCurrentPage.some(t=>t.targetId===e)){const n=new Nn(e,t);this.newReferencesOfCurrentPage.push(n)}}finishPage(e,t){const n=Object.keys(this.currentPage.elementsById);if(n.length>0){const i=Sn(this.currentPageCounters);n.forEach(n=>{this.pageCountersById[n]=i;const o=this.pageIndicesById[n];if(o&&o.pageIndex<t){const e=this.resolvedReferences[n];if(e){let t,i=this.unresolvedReferences[n];for(i||(i=this.unresolvedReferences[n]=[]);t=e.shift();)t.unresolve(),i.push(t)}}this.pageIndicesById[n]={spineIndex:e,pageIndex:t}})}const i=this.previousPageCounters;let o;for(;o=this.newReferencesOfCurrentPage.shift();){let n;o.pageCounters=i,o.spineIndex=e,o.pageIndex=t,o.isResolved()?(n=this.resolvedReferences[o.targetId],n||(n=this.resolvedReferences[o.targetId]=[])):(n=this.unresolvedReferences[o.targetId],n||(n=this.unresolvedReferences[o.targetId]=[])),n.every(e=>!o.equals(e))&&n.push(o)}this.currentPage=null}getUnresolvedRefsToPage(e){let t=[];Object.keys(e.elementsById).forEach(e=>{const n=this.unresolvedReferences[e];n&&(t=t.concat(n))}),t.sort((e,t)=>e.spineIndex-t.spineIndex||e.pageIndex-t.pageIndex);const n=[];let i=null;return t.forEach(e=>{i&&i.spineIndex===e.spineIndex&&i.pageIndex===e.pageIndex?i.refs.push(e):(i={spineIndex:e.spineIndex,pageIndex:e.pageIndex,pageCounters:e.pageCounters,refs:[e]},n.push(i))}),n}pushReferencesToSolve(e){this.referencesToSolveStack.push(this.referencesToSolve),this.referencesToSolve=e}popReferencesToSolve(){this.referencesToSolve=this.referencesToSolveStack.pop()}registerPageCounterExpr(e,t,n){"pages"===e&&this.pagesCounterExprs.push({expr:n,format:t})}getExprContentListener(){return this.exprContentListener.bind(this)}exprContentListener(e,t,n){if(this.pagesCounterExprs.findIndex(t=>t.expr===e)>=0){const i=n.createElement("span");return i.textContent=t,i.setAttribute(xn,e.key),i}return null}finishLastPage(e){const t=e.root.querySelectorAll(`[${xn}]`),n=this.currentPageCounters.page[0];Array.from(t).forEach(e=>{const t=e.getAttribute(xn),i=this.pagesCounterExprs.findIndex(e=>e.expr.key===t);e.textContent=this.pagesCounterExprs[i].format([n])})}createLayoutConstraint(e){return new In(this,e)}}const xn="data-vivliostyle-pages-counter";class In{constructor(e,t){this.counterStore=e,this.pageIndex=t}allowLayout(e){if(!e||e.after)return!0;const t=e.viewNode;if(!t||1!==t.nodeType)return!0;const n=t.getAttribute("id")||t.getAttribute("name");if(!n)return!0;if(!this.counterStore.resolvedReferences[n]&&!this.counterStore.unresolvedReferences[n])return!0;const i=this.counterStore.pageIndicesById[n];return!i||this.pageIndex>=i.pageIndex}}function Pn(e){if((e=e.substr(1)).match(/^[^0-9a-fA-F\n\r]$/))return e;const t=parseInt(e,16);return isNaN(t)?"":t<=65535?String.fromCharCode(t):t<=1114111?String.fromCharCode(55296|t>>10&1023,56320|1023&t):"�"}function An(e){return e.replace(/\\([0-9a-fA-F]{0,6}(\r\n|[ \n\r\t\f])?|[^0-9a-fA-F\n\r])/g,Pn)}var On,Rn;!function(e){e[e.EOF=0]="EOF",e[e.IDENT=1]="IDENT",e[e.STR=2]="STR",e[e.NUMERIC=3]="NUMERIC",e[e.NUM=4]="NUM",e[e.INT=5]="INT",e[e.FUNC=6]="FUNC",e[e.HASH=7]="HASH",e[e.URL=8]="URL",e[e.CLASS=9]="CLASS",e[e.O_PAR=10]="O_PAR",e[e.C_PAR=11]="C_PAR",e[e.O_BRC=12]="O_BRC",e[e.C_BRC=13]="C_BRC",e[e.O_BRK=14]="O_BRK",e[e.C_BRK=15]="C_BRK",e[e.COMMA=16]="COMMA",e[e.SEMICOL=17]="SEMICOL",e[e.COLON=18]="COLON",e[e.SLASH=19]="SLASH",e[e.AT=20]="AT",e[e.PERCENT=21]="PERCENT",e[e.QMARK=22]="QMARK",e[e.PLUS=23]="PLUS",e[e.MINUS=24]="MINUS",e[e.BAR_BAR=25]="BAR_BAR",e[e.AMP_AMP=26]="AMP_AMP",e[e.BANG=31]="BANG",e[e.DOLLAR=32]="DOLLAR",e[e.HAT=33]="HAT",e[e.BAR=34]="BAR",e[e.TILDE=35]="TILDE",e[e.STAR=36]="STAR",e[e.GT=37]="GT",e[e.LT=38]="LT",e[e.EQ=39]="EQ",e[e.BANG_EQ=41]="BANG_EQ",e[e.DOLLAR_EQ=42]="DOLLAR_EQ",e[e.HAT_EQ=43]="HAT_EQ",e[e.BAR_EQ=44]="BAR_EQ",e[e.TILDE_EQ=45]="TILDE_EQ",e[e.STAR_EQ=46]="STAR_EQ",e[e.GT_EQ=47]="GT_EQ",e[e.LT_EQ=48]="LT_EQ",e[e.EQ_EQ=49]="EQ_EQ",e[e.COL_COL=50]="COL_COL",e[e.INVALID=51]="INVALID",e[e.LAST=51]="LAST"}(On||(On={}));class Ln{constructor(){this.precededBySpace=!1,this.num=0,this.text="",this.position=0,this.type=On.EOF}}function kn(e,t){const n=Array(128);let i;for(i=0;i<128;i++)n[i]=e;for(n.NaN=e==Rn.END?Rn.END:Rn.INVALID,i=0;i<t.length;i+=2)n[t[i]]=t[i+1];return n}!function(e){e[e.SPACE=1]="SPACE",e[e.INT=2]="INT",e[e.IDENT=3]="IDENT",e[e.BANG=4]="BANG",e[e.HASH=6]="HASH",e[e.DOLLAR=7]="DOLLAR",e[e.PERCENT=8]="PERCENT",e[e.AMP=9]="AMP",e[e.O_PAR=10]="O_PAR",e[e.C_PAR=11]="C_PAR",e[e.STAR=12]="STAR",e[e.PLUS=13]="PLUS",e[e.COMMA=14]="COMMA",e[e.MINUS=15]="MINUS",e[e.DOT=16]="DOT",e[e.SLASH=17]="SLASH",e[e.COLON=18]="COLON",e[e.SEMICOL=19]="SEMICOL",e[e.LT=20]="LT",e[e.EQ=21]="EQ",e[e.GT=22]="GT",e[e.QMARK=23]="QMARK",e[e.AT=24]="AT",e[e.O_BRK=25]="O_BRK",e[e.C_BRK=26]="C_BRK",e[e.O_BRC=27]="O_BRC",e[e.C_BRC=28]="C_BRC",e[e.BSLASH=29]="BSLASH",e[e.HAT=30]="HAT",e[e.BAR=31]="BAR",e[e.TILDE=32]="TILDE",e[e.STR1=33]="STR1",e[e.STR2=34]="STR2",e[e.END=35]="END",e[e.EQTAIL=36]="EQTAIL",e[e.ENDINT=37]="ENDINT",e[e.ENDNUM=38]="ENDNUM",e[e.CONT=39]="CONT",e[e.UNIT=40]="UNIT",e[e.PCUNIT=41]="PCUNIT",e[e.NUMBER=42]="NUMBER",e[e.ENDIDNT=43]="ENDIDNT",e[e.IDNTESC=44]="IDNTESC",e[e.ENDIDES=45]="ENDIDES",e[e.ENDSTR=46]="ENDSTR",e[e.ENDESTR=47]="ENDESTR",e[e.STR1ESC=48]="STR1ESC",e[e.STR2ESC=49]="STR2ESC",e[e.BAR_BAR=50]="BAR_BAR",e[e.AMP_AMP=51]="AMP_AMP",e[e.FUNC=52]="FUNC",e[e.FUNCES=53]="FUNCES",e[e.COMMENT=54]="COMMENT",e[e.COMMST=55]="COMMST",e[e.ENDNOTK=56]="ENDNOTK",e[e.MINMIN=57]="MINMIN",e[e.TOINT=58]="TOINT",e[e.TONUM=59]="TONUM",e[e.TOIDENT=60]="TOIDENT",e[e.TOIDES=61]="TOIDES",e[e.KILL1=62]="KILL1",e[e.KILL2=63]="KILL2",e[e.URL=64]="URL",e[e.URL1=65]="URL1",e[e.URL2=66]="URL2",e[e.ENDURL=67]="ENDURL",e[e.TERMURL=68]="TERMURL",e[e.FINURL=69]="FINURL",e[e.LT_BG=70]="LT_BG",e[e.LT_BG_M=71]="LT_BG_M",e[e.INVALID=72]="INVALID",e[e.CHKPOSS=73]="CHKPOSS",e[e.CHKPOSN=74]="CHKPOSN",e[e.URLESC=75]="URLESC",e[e.IDESCH=76]="IDESCH",e[e.COL_COL=77]="COL_COL",e[e.TOCLASS=78]="TOCLASS",e[e.CHKSP=79]="CHKSP",e[e.EOF=80]="EOF"}(Rn||(Rn={}));const Fn=[Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.SPACE,Rn.SPACE,Rn.INVALID,Rn.SPACE,Rn.SPACE,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.SPACE,Rn.BANG,Rn.STR2,Rn.HASH,Rn.DOLLAR,Rn.PERCENT,Rn.AMP,Rn.STR1,Rn.O_PAR,Rn.C_PAR,Rn.STAR,Rn.PLUS,Rn.COMMA,Rn.MINUS,Rn.DOT,Rn.SLASH,Rn.INT,Rn.INT,Rn.INT,Rn.INT,Rn.INT,Rn.INT,Rn.INT,Rn.INT,Rn.INT,Rn.INT,Rn.COLON,Rn.SEMICOL,Rn.LT,Rn.EQ,Rn.GT,Rn.QMARK,Rn.AT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.O_BRK,Rn.BSLASH,Rn.C_BRK,Rn.HAT,Rn.IDENT,Rn.INVALID,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.IDENT,Rn.O_BRC,Rn.BAR,Rn.C_BRC,Rn.TILDE,Rn.INVALID];Fn.NaN=Rn.EOF;const Dn=[Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.FUNC,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.CONT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.ENDIDNT,Rn.IDNTESC,Rn.ENDIDNT,Rn.ENDIDNT,Rn.CONT,Rn.ENDIDNT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT,Rn.ENDIDNT];Dn.NaN=Rn.ENDIDNT;const _n=[Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.TOCLASS,Rn.TONUM,Rn.INVALID,Rn.TONUM,Rn.TONUM,Rn.TONUM,Rn.TONUM,Rn.TONUM,Rn.TONUM,Rn.TONUM,Rn.TONUM,Rn.TONUM,Rn.TONUM,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.INVALID,Rn.TOIDES,Rn.INVALID,Rn.INVALID,Rn.TOCLASS,Rn.INVALID,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.TOCLASS,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID,Rn.INVALID];Dn.NaN=Rn.ENDIDNT;const Bn=[Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.MINMIN,Rn.TONUM,Rn.END,Rn.TOINT,Rn.TOINT,Rn.TOINT,Rn.TOINT,Rn.TOINT,Rn.TOINT,Rn.TOINT,Rn.TOINT,Rn.TOINT,Rn.TOINT,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.END,Rn.TOIDES,Rn.END,Rn.END,Rn.TOIDENT,Rn.END,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.TOIDENT,Rn.END,Rn.END,Rn.END,Rn.END,Rn.END];Bn.NaN=Rn.END;const Mn=[Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.CHKPOSS,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.CHKPOSS,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.FUNCES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.ENDIDES,Rn.IDNTESC,Rn.ENDIDES,Rn.ENDIDES,Rn.CONT,Rn.ENDIDES,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES,Rn.ENDIDES];Mn.NaN=Rn.ENDIDES;const Un=[Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.PCUNIT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.NUMBER,Rn.ENDINT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.UNIT,Rn.ENDINT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT,Rn.ENDINT];Un.NaN=Rn.ENDINT;const zn=[Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.PCUNIT,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.CONT,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.UNIT,Rn.ENDNUM,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.UNIT,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM,Rn.ENDNUM];zn.NaN=Rn.ENDNUM;const Vn=kn(Rn.END,[61,Rn.EQTAIL]),Hn=kn(Rn.END,[58,Rn.COL_COL]),Gn=kn(Rn.END,[61,Rn.EQTAIL,124,Rn.BAR_BAR]),$n=kn(Rn.END,[38,Rn.AMP_AMP]),Wn=kn(Rn.END,[42,Rn.COMMENT]),Xn=kn(Rn.CONT,[42,Rn.COMMST]),jn=kn(Rn.COMMENT,[42,Rn.COMMST,47,Rn.ENDNOTK]),Kn=kn(Rn.KILL1,[62,Rn.ENDNOTK]),Yn=kn(Rn.END,[61,Rn.EQTAIL,33/*!*/,Rn.LT_BG]),qn=kn(Rn.KILL1,[45,Rn.LT_BG_M]),Zn=kn(Rn.KILL2,[45,Rn.ENDNOTK]),Qn=kn(Rn.IDESCH,[9,Rn.INVALID,10,Rn.INVALID,13,Rn.INVALID,32,Rn.INVALID]),Jn=kn(Rn.CONT,[39,Rn.ENDSTR,10,Rn.INVALID,13,Rn.INVALID,92,Rn.STR1ESC]),ei=kn(Rn.CONT,[34,Rn.ENDSTR,10,Rn.INVALID,13,Rn.INVALID,92,Rn.STR2ESC]),ti=kn(Rn.CONT,[39,Rn.ENDESTR,10,Rn.CHKPOSN,13,Rn.CHKPOSN,92,Rn.STR1ESC]),ni=kn(Rn.CONT,[34,Rn.ENDESTR,10,Rn.CHKPOSN,13,Rn.CHKPOSN,92,Rn.STR2ESC]),ii=kn(Rn.URL,[9,Rn.CONT,32,Rn.CONT,34,Rn.URL2,39,Rn.URL1,41,Rn.INVALID,10,Rn.CONT,13,Rn.CONT]),oi=kn(Rn.CONT,[41,Rn.ENDURL,9,Rn.CHKSP,10,Rn.CHKSP,13,Rn.CHKSP,32,Rn.CHKSP,92,Rn.URLESC,40,Rn.INVALID,91,Rn.INVALID,93,Rn.INVALID,123,Rn.INVALID,125,Rn.INVALID,NaN,Rn.ENDURL]),si=kn(Rn.CONT,[39,Rn.TERMURL,10,Rn.CHKPOSN,13,Rn.CHKPOSN,92,Rn.URLESC,NaN,Rn.ENDURL]),ri=kn(Rn.CONT,[34,Rn.TERMURL,10,Rn.CHKPOSN,13,Rn.CHKPOSN,92,Rn.URLESC,NaN,Rn.ENDURL]),ai=kn(Rn.INVALID,[9,Rn.CONT,10,Rn.CONT,13,Rn.CONT,32,Rn.CONT,41,Rn.FINURL]),li=15;class hi{constructor(e,t){this.input=e,this.handler=t,this.head=-1,this.tail=0,this.curr=0,this.position=0,this.indexMask=li,this.buffer=Array(this.indexMask+1);for(let e=0;e<=this.indexMask;e++)this.buffer[e]=new Ln}token(){return this.tail==this.curr&&this.fillBuffer(),this.buffer[this.curr]}nthToken(e){return(this.tail-this.curr&this.indexMask)<=e&&this.fillBuffer(),this.buffer[this.curr+e&this.indexMask]}consume(){this.curr=this.curr+1&this.indexMask}mark(){if(this.head>=0)throw new Error("F_CSSTOK_BAD_CALL mark");this.head=this.curr}reset(){if(this.head<0)throw new Error("F_CSSTOK_BAD_CALL reset");this.curr=this.head,this.head=-1}unmark(){this.head=-1}hasMark(){return this.head>=0}reallocate(){const e=2*(this.indexMask+1)-1,t=Array(e+1);let n=this.head,i=0;for(;n!=this.tail;)t[i]=this.buffer[n],n==this.curr&&(this.curr=i),n=n+1&this.indexMask,i++;for(this.head=0,this.tail=i,this.indexMask=e,this.buffer=t;i<=e;)t[i++]=new Ln}error(e,t,n){this.handler&&this.handler.error(n,t)}fillBuffer(){let e=this.tail,t=this.head>=0?this.head:this.curr,n=this.indexMask;if(e>=t?t+=n:t--,t==e){if(this.head<0)throw new Error("F_CSSTOK_INTERNAL");this.reallocate(),e=this.tail,n=this.indexMask,t=n}let i=Fn;const o=this.input;let s=this.position;const r=this.buffer;let a=On.EOF,l=0,h="",c=0,u=!1,d=r[e],p=-9;for(;;){const f=o.charCodeAt(s);switch(i[f]||i[65]){case Rn.INVALID:a=On.INVALID,h=isNaN(f)?"E_CSS_UNEXPECTED_EOF":"E_CSS_UNEXPECTED_CHAR",i=Fn,s++;break;case Rn.SPACE:s++,u=!0;continue;case Rn.INT:l=s++,i=Un;continue;case Rn.IDENT:a=On.IDENT,l=s++,i=Dn;continue;case Rn.BANG:l=s++,a=On.BANG,i=Vn;continue;case Rn.STR1:a=On.STR,l=++s,i=Jn;continue;case Rn.STR2:a=On.STR,l=++s,i=ei;continue;case Rn.HASH:l=++s,a=On.HASH,i=Dn;continue;case Rn.DOLLAR:l=s++,a=On.DOLLAR,i=Vn;continue;case Rn.PERCENT:l=s++,a=On.PERCENT;break;case Rn.AMP:l=s++,a=On.DOLLAR,i=$n;continue;case Rn.O_PAR:l=s++,a=On.O_PAR;break;case Rn.C_PAR:l=s++,a=On.C_PAR;break;case Rn.STAR:l=s++,a=On.STAR,i=Vn;continue;case Rn.PLUS:l=s++,a=On.PLUS;break;case Rn.COMMA:l=s++,a=On.COMMA;break;case Rn.MINUS:a=On.MINUS,l=s++,i=Bn;continue;case Rn.DOT:l=s++,i=_n;continue;case Rn.TOCLASS:l=s++,a=On.CLASS,i=Dn;continue;case Rn.SLASH:l=s++,a=On.SLASH,i=Wn;continue;case Rn.COLON:l=s++,a=On.COLON,i=Hn;continue;case Rn.COL_COL:s++,a=On.COL_COL;break;case Rn.SEMICOL:l=s++,a=On.SEMICOL;break;case Rn.LT:l=s++,a=On.LT,i=Yn;continue;case Rn.EQ:l=s++,a=On.EQ,i=Vn;continue;case Rn.GT:l=s++,a=On.GT,i=Vn;continue;case Rn.QMARK:l=s++,a=On.QMARK;break;case Rn.AT:l=++s,a=On.AT,i=Dn;continue;case Rn.O_BRK:l=s++,a=On.O_BRK;break;case Rn.C_BRK:l=s++,a=On.C_BRK;break;case Rn.O_BRC:l=s++,a=On.O_BRC;break;case Rn.C_BRC:l=s++,a=On.C_BRC;break;case Rn.BSLASH:l=s++,p=l,a=On.IDENT,i=Qn;continue;case Rn.HAT:l=s++,a=On.HAT,i=Vn;continue;case Rn.BAR:l=s++,a=On.BAR,i=Gn;continue;case Rn.TILDE:l=s++,a=On.TILDE,i=Vn;continue;case Rn.END:break;case Rn.EQTAIL:s++,a=a+On.BANG_EQ-On.BANG;break;case Rn.ENDINT:a=On.INT,c=parseInt(o.substring(l,s),10);break;case Rn.ENDNUM:a=On.NUM,c=parseFloat(o.substring(l,s));break;case Rn.CONT:s++;continue;case Rn.UNIT:a=On.NUMERIC,c=parseFloat(o.substring(l,s)),l=s++,i=Dn;continue;case Rn.PCUNIT:a=On.NUMERIC,c=parseFloat(o.substring(l,s)),h="%",l=s++;break;case Rn.NUMBER:s++,i=zn;continue;case Rn.ENDIDNT:h=o.substring(l,s);break;case Rn.IDNTESC:p=s++,i=Qn;continue;case Rn.ENDIDES:h=An(o.substring(l,s));break;case Rn.ENDSTR:h=o.substring(l,s),s++;break;case Rn.ENDESTR:h=An(o.substring(l,s)),s++;break;case Rn.STR1ESC:p=s,s+=2,i=ti;continue;case Rn.STR2ESC:p=s,s+=2,i=ni;continue;case Rn.BAR_BAR:s++,a=On.BAR_BAR;break;case Rn.AMP_AMP:s++,a=On.AMP_AMP;break;case Rn.FUNC:if(h=o.substring(l,s),a==On.IDENT){if(s++,"url"==h.toLowerCase()){i=ii;continue}a=On.FUNC}break;case Rn.FUNCES:if(h=An(o.substring(l,s)),a==On.IDENT){if(s++,"url"==h.toLowerCase()){i=ii;continue}a=On.FUNC}break;case Rn.COMMENT:i=Xn,s++;continue;case Rn.COMMST:i=jn,s++;continue;case Rn.ENDNOTK:i=Fn,s++;continue;case Rn.MINMIN:i=Kn,s++;continue;case Rn.TOINT:a=On.INT,i=Un,s++;continue;case Rn.TONUM:a=On.NUM,i=zn,s++;continue;case Rn.TOIDENT:a=On.IDENT,i=Dn,s++;continue;case Rn.TOIDES:a=On.IDENT,i=Qn,p=s++;continue;case Rn.KILL1:s--;break;case Rn.KILL2:s-=2;break;case Rn.URL:l=s++,i=oi;continue;case Rn.URL1:l=++s,i=si;continue;case Rn.URL2:l=++s,i=ri;continue;case Rn.ENDURL:a=On.URL,h=An(o.substring(l,s)),s++;break;case Rn.FINURL:s++;break;case Rn.LT_BG:i=qn,s++;continue;case Rn.LT_BG_M:i=Zn,s++;continue;case Rn.CHKSP:if(s-p<8&&o.substring(p+1,s+1).match(/^[0-9a-fA-F]{0,6}(\r\n|[\n\r])|[ \t]$/)){s++;continue}case Rn.TERMURL:a=On.URL,h=An(o.substring(l,s)),s++,i=ai;continue;case Rn.CHKPOSN:if(s++,s-p<9&&o.substring(p+1,s).match(/^[0-9a-fA-F]{0,6}(\r\n|[\n\r])$/))continue;a=On.INVALID,h="E_CSS_UNEXPECTED_NEWLINE",i=Fn;break;case Rn.CHKPOSS:if(s-p<9&&o.substring(p+1,s+1).match(/^[0-9a-fA-F]{0,6}[ \t]$/)){s++;continue}h=An(o.substring(l,s));break;case Rn.URLESC:p=s++;continue;case Rn.IDESCH:s++,i=Mn;continue;default:if(i!==Fn){a=On.INVALID,h="E_CSS_UNEXPECTED_STATE";break}l=s,a=On.EOF}if(d.type=a,d.precededBySpace=u,d.num=c,d.text=h,d.position=l,e++,e>=t)break;i=Fn,u=!1,d=r[e&n]}this.position=s,this.tail=e&n}}let ci=null,ui=null;function di(){return ci}function pi(e){if(!ci)throw new Error("E_TASK_NO_CONTEXT");ci.name||(ci.name=e);const t=ci,n=new Ci(t,t.top,e);return t.top=n,n.state=bi.ACTIVE,n}function fi(e){return new Ni(e)}function gi(e,t,n){const i=pi(e);i.handler=n;try{t(i)}catch(e){i.task.raise(e,i)}return i.result()}function mi(e,t){return(ci?ci.getScheduler():ui||function(e){return new Ei(e||new wi)}()).run(e,t)}var bi;!function(e){e[e.INIT=0]="INIT",e[e.ACTIVE=1]="ACTIVE",e[e.FINISHED=2]="FINISHED",e[e.DEAD=3]="DEAD"}(bi||(bi={}));class wi{currentTime(){return(new Date).valueOf()}setTimeout(e,t){return setTimeout(e,t)}clearTimeout(e){clearTimeout(e)}}class Ei{constructor(e){this.timer=e,this.timeout=1,this.slice=25,this.sliceOverTime=0,this.wakeupTime=null,this.timeoutToken=null,this.inTimeSlice=!1,this.order=0,this.queue=new F,ui||(ui=this)}setSlice(e){this.slice=e}setTimeout(e){this.timeout=e}isTimeSliceOver(){return this.timer.currentTime()>=this.sliceOverTime}arm(){if(this.inTimeSlice)return;const e=this.queue.peek().scheduledTime,t=this.timer.currentTime();if(null!=this.timeoutToken){if(t+this.timeout>this.wakeupTime)return;this.timer.clearTimeout(this.timeoutToken)}let n=e-t;n<=this.timeout&&(n=this.timeout),this.wakeupTime=t+n;const i=this;this.timeoutToken=this.timer.setTimeout(()=>{i.timeoutToken=null,i.doTimeSlice()},n)}schedule(e,t){const n=e,i=this.timer.currentTime();n.order=this.order++,n.scheduledTime=i+(t||0),this.queue.add(n),this.arm()}doTimeSlice(){null!=this.timeoutToken&&(this.timer.clearTimeout(this.timeoutToken),this.timeoutToken=null),this.inTimeSlice=!0;try{let e=this.timer.currentTime();for(this.sliceOverTime=e+this.slice;this.queue.length();){const t=this.queue.peek();if(t.scheduledTime>e)break;if(this.queue.remove(),t.canceled||t.resumeInternal(),e=this.timer.currentTime(),e>=this.sliceOverTime)break}}catch(e){h.error(e)}this.inTimeSlice=!1,this.queue.length()&&this.arm()}run(e,t){const n=new Si(this,t||"");n.top=new Ci(n,null,"bootstrap"),n.top.state=bi.ACTIVE,n.top.then(()=>{const t=()=>{n.running=!1;for(const e of n.callbacks)try{e()}catch(e){h.error(e)}};try{e().then(e=>{n.result=e,t()})}catch(e){n.raise(e),t()}});const i=ci;return ci=n,this.schedule(n.top.suspend("bootstrap")),ci=i,n}}class yi{constructor(e){this.task=e,this.scheduledTime=0,this.order=0,this.result=null,this.canceled=!1}compare(e){const t=e;return t.scheduledTime-this.scheduledTime||t.order-this.order}getTask(){return this.task}schedule(e,t){this.result=e,this.task.scheduler.schedule(this,t)}resumeInternal(){const e=this.task;if(this.task=null,e&&e.continuation==this){e.continuation=null;const t=ci;return ci=e,e.top.finish(this.result),ci=t,!0}return!1}cancel(){this.canceled=!0}}class Si{constructor(e,t){this.scheduler=e,this.name=t,this.callbacks=[],this.exception=null,this.running=!0,this.result=null,this.waitTarget=null,this.top=null,this.continuation=null}getName(){return this.name}interrupt(e){if(this.raise(e||new Error("E_TASK_INTERRUPT")),this!==ci&&this.continuation){this.continuation.cancel();const e=new yi(this);this.waitTarget="interrupt",this.continuation=e,this.scheduler.schedule(e)}}getScheduler(){return this.scheduler}isRunning(){return this.running}whenDone(e){this.callbacks.push(e)}join(){const e=pi("Task.join");if(this.running){const t=e.suspend(this),n=this;this.whenDone(()=>{t.schedule(n.result)})}else e.finish(this.result);return e.result()}unwind(){for(;this.top&&!this.top.handler;)this.top=this.top.parent;if(this.top&&this.top.handler&&this.exception){const e=this.exception;this.exception=null,this.top.handler(this.top,e)}else this.exception&&h.error(this.exception,"Unhandled exception in task",this.name)}raise(e,t){if(this.fillStack(e),t){let e=this.top;for(;e&&e!=t;)e=e.parent;e==t&&(this.top=e)}this.exception=e,this.unwind()}fillStack(e){let t=e.frameTrace;if(!t){t=e.stack?`${e.stack}\n\t---- async ---\n`:"";for(let e=this.top;e;e=e.parent)t+="\t",t+=e.getName(),t+="\n";e.frameTrace=t}}}class Ni{constructor(e){this.value=e}then(e){e(this.value)}thenAsync(e){return e(this.value)}thenReturn(e){return new Ni(e)}thenFinish(e){e.finish(this.value)}isPending(){return!1}get(){return this.value}}class vi{constructor(e){this.frame=e}then(e){this.frame.then(e)}thenAsync(e){if(this.isPending()){const t=new Ci(this.frame.task,this.frame.parent,"AsyncResult.thenAsync");return t.state=bi.ACTIVE,this.frame.parent=t,this.frame.then(n=>{e(n).then(e=>{t.finish(e)})}),t.result()}return e(this.frame.res)}thenReturn(e){return this.isPending()?this.thenAsync(()=>new Ni(e)):new Ni(e)}thenFinish(e){this.isPending()?this.then(t=>{e.finish(t)}):e.finish(this.frame.res)}isPending(){return this.frame.state==bi.ACTIVE}get(){if(this.isPending())throw new Error("Result is pending");return this.frame.res}}class Ci{constructor(e,t,n){this.task=e,this.parent=t,this.name=n,this.res=null,this.callback=null,this.handler=null,this.state=bi.INIT}checkEnvironment(){if(!ci)throw new Error("F_TASK_NO_CONTEXT");if(this!==ci.top)throw new Error("F_TASK_NOT_TOP_FRAME")}result(){return new vi(this)}finish(e){this.checkEnvironment(),ci&&!ci.exception&&(this.res=e),this.state=bi.FINISHED;const t=this.parent;if(ci&&(ci.top=t),this.callback){try{this.callback(e)}catch(e){this.task.raise(e,t)}this.state=bi.DEAD}}getTask(){return this.task}getName(){return this.name}getScheduler(){return this.task.scheduler}then(e){switch(this.state){case bi.ACTIVE:if(this.callback)throw new Error("F_TASK_FRAME_ALREADY_HAS_CALLBACK");this.callback=e;break;case bi.FINISHED:{const t=this.task,n=this.parent;try{e(this.res),this.state=bi.DEAD}catch(e){this.state=bi.DEAD,t.raise(e,n)}break}case bi.DEAD:throw new Error("F_TASK_DEAD_FRAME");default:throw new Error(`F_TASK_UNEXPECTED_FRAME_STATE ${this.state}`)}}timeSlice(){const e=pi("Frame.timeSlice");return e.getScheduler().isTimeSliceOver()?(h.debug("-- time slice --"),e.suspend().schedule(!0)):e.finish(!0),e.result()}sleep(e){const t=pi("Frame.sleep");return t.suspend().schedule(!0,e),t.result()}loop(e){const t=pi("Frame.loop"),n=i=>{try{for(;i;){const t=e();if(t.isPending())return void t.then(n);t.then(e=>{i=e})}t.finish(!0)}catch(e){t.task.raise(e,t)}};return n(!0),t.result()}loopWithFrame(e){const t=ci;if(!t)throw new Error("E_TASK_NO_CONTEXT");return this.loop(()=>{let n;do{const i=new Ti(t,t.top);t.top=i,i.state=bi.ACTIVE,e(i),n=i.result()}while(!n.isPending()&&n.get());return n})}suspend(e){if(this.checkEnvironment(),this.task.continuation)throw new Error("E_TASK_ALREADY_SUSPENDED");const t=new yi(this.task);return this.task.continuation=t,ci=null,this.task.waitTarget=e||null,t}}class Ti extends Ci{constructor(e,t){super(e,t,"loop")}continueLoop(){this.finish(!0)}breakLoop(){this.finish(!1)}}class xi{constructor(e,t){this.fetch=e,this.arrived=!1,this.resource=null,this.task=null,this.piggybacks=[],this.name=t}start(){if(!this.task){const e=this;this.task=di().getScheduler().run(()=>{const t=pi("Fetcher.run");return e.fetch().then(n=>{const i=e.piggybacks;if(e.arrived=!0,e.resource=n,e.task=null,e.piggybacks=[],i)for(let e=0;e<i.length;e++)try{i[e](n)}catch(e){h.error(e,"Error:")}t.finish(n)}),t.result()},this.name)}}piggyback(e){this.arrived?e(this.resource):this.piggybacks.push(e)}get(){return this.arrived?fi(this.resource):(this.start(),this.task.join())}hasArrived(){return this.arrived}}const Ii=e=>{if(0==e.length)return fi(!0);if(1==e.length)return e[0].get().thenReturn(!0);const t=pi("waitForFetches");let n=0;return t.loop(()=>{for(;n<e.length;){const t=e[n++];if(!t.hasArrived())return t.get().thenReturn(!0)}return fi(!1)}).then(()=>{t.finish(!0)}),t.result()};function Pi(e,t){let n=null,i=null;"img"==e.localName&&(n=e.getAttribute("width"),i=e.getAttribute("height"));const o=new xi(()=>{const o=pi("loadImage"),s=o.suspend(e);let r=!1;const a=t=>{r||(r=!0,"img"==e.localName&&(n||e.removeAttribute("width"),i||e.removeAttribute("height")),s.schedule(t?t.type:"timeout"))};return e.addEventListener("load",a,!1),e.addEventListener("error",a,!1),e.addEventListener("abort",a,!1),e.namespaceURI==L.SVG?(e.setAttributeNS(L.XLINK,"xlink:href",t),setTimeout(a,300)):e.src=t,o.result()},`loadElement ${t}`);return o.start(),o}var Ai,Oi='<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml" xmlns:s="http://www.pyroxy.com/ns/shadow">\n<head>\n<style><![CDATA[\n\n.footnote-content {\n  float: footnote;\n}\n\n.table-cell-container {\n  display: block;\n}\n\n]]></style>\n</head>\n<body>\n\n<s:template id="footnote"><s:content/><s:include class="footnote-content"/></s:template>\n\n<s:template id="table-cell"><div data-vivliostyle-flow-root="true" class="table-cell-container"><s:content/></div></s:template>\n\n</body>\n</html>\n';function Ri(e,t,n,i,o){const s=pi("ajax"),r=new XMLHttpRequest,a=s.suspend(r),l={status:0,statusText:"",url:e,contentType:null,responseText:null,responseXML:null,responseBlob:null};r.open(n||"GET",e,!0),t&&(r.responseType=t),r.onreadystatechange=()=>{if(4===r.readyState){if(l.status=r.status,l.statusText=r.statusText||404==r.status&&"Not Found"||"",200==l.status||0==l.status)if(t&&t!==Ai.DOCUMENT||!r.responseXML||"parsererror"==r.responseXML.documentElement.localName)if((!t||t===Ai.DOCUMENT)&&r.response instanceof HTMLDocument)l.responseXML=r.response,l.contentType=r.response.contentType;else{const n=r.response;t&&t!==Ai.TEXT||"string"!=typeof n?n?l.responseBlob="string"==typeof n?Li([n]):n:h.warn("Unexpected empty success response for",e):l.responseText=n;const i=r.getResponseHeader("Content-Type");i&&(l.contentType=i.replace(/(.*);.*$/,"$1"))}else l.responseXML=r.responseXML,l.contentType=r.responseXML.contentType;a.schedule(l)}};try{i?(r.setRequestHeader("Content-Type",o||"text/plain; charset=UTF-8"),r.send(i)):(/^file:|^https?:\/\/[^/]+\.githubusercontent\.com|\.opf$/.test(e)?/\/aozorabunko\/[^/]+\/cards\/[^/]+\/files\/[^/.]+\.html$/.test(e)?r.overrideMimeType("text/html; charset=Shift_JIS"):/\.(html|htm)$/.test(e)?r.overrideMimeType("text/html; charset=UTF-8"):/\.(xhtml|xht|xml|opf)$/.test(e)?r.overrideMimeType("application/xml; charset=UTF-8"):/\.(txt|css)$/.test(e)?r.overrideMimeType("text/plain; charset=UTF-8"):r.overrideMimeType("text/html; charset=UTF-8"):/^data:,(<|%3C|%3c)/.test(e)?r.overrideMimeType("text/html; charset=UTF-8"):/^data:,/.test(e)&&r.overrideMimeType("text/plain; charset=UTF-8"),r.send(null))}catch(t){h.warn(t,`Error fetching ${e}`),a.schedule(l)}return s.result()}function Li(e,t){const n=t||"application/octet-stream",i=window.WebKitBlobBuilder||window.MSBlobBuilder;if(i){const t=new i;for(let n=0;n<e.length;n++)t.append(e[n]);return t.getBlob(n)}return new Blob(e,{type:n})}!function(e){e.DEFAULT="",e.ARRAYBUFFER="arraybuffer",e.BLOB="blob",e.DOCUMENT="document",e.JSON="json",e.TEXT="text"}(Ai||(Ai={}));class ki{constructor(e,t){this.parser=e,this.type=t,this.resources={},this.fetchers={}}load(e,t,n){e=T(e);const i=this.resources[e];return void 0!==i?fi(i):this.fetch(e,t,n).get()}fetchInner(e,t,n){const i=this,o=pi("fetch"),s=e.endsWith("?viv-toc-box");s&&(e=e.replace("?viv-toc-box",""));const r=O("user-agent.xml",P),a=!s&&e===r;return a&&(e=`data:application/xml,${encodeURIComponent(Oi)}`),Ri(e,i.type).then(l=>{if(l.status>=400&&t)throw new Error((n||`Failed to fetch required resource: ${e}`)+` (${l.status}${l.statusText?" "+l.statusText:""})`);s?(e+="?viv-toc-box",l.url+="?viv-toc-box"):a&&(l.url=e=r),i.parser(l,i).then(t=>{delete i.fetchers[e],i.resources[e]=t,o.finish(t)})}),o.result()}fetch(e,t,n){if(e=T(e),this.resources[e])return null;let i=this.fetchers[e];if(!i){const o=this;i=new xi(()=>o.fetchInner(e,t,n),`Fetch ${e}`),o.fetchers[e]=i,i.start()}return i}get(e){return this.resources[T(e)]}delete(e){delete this.resources[T(e)]}}function Fi(e,t){const n=e.responseText;return fi(n?C(n):null)}const Di=0,_i=16777216,Bi=33554432,Mi=50331648,Ui=67108864,zi=83886080,Vi=100663296;var Hi;function Gi(e){let t=parseInt(e,16);if(isNaN(t))throw new Error("E_CSS_COLOR");if(6==e.length)return new Pt(t);if(3==e.length)return t=15&t|(15&t)<<4|(240&t)<<4|(240&t)<<8|(3840&t)<<8|(3840&t)<<12,new Pt(t);throw new Error("E_CSS_COLOR")}!function(e){e.USER_AGENT="UA",e.USER="User",e.AUTHOR="Author"}(Hi||(Hi={}));class $i{constructor(e){this.scope=e,this.flavor=Hi.AUTHOR}getCurrentToken(){return null}getScope(){return this.scope}error(e,t){}startStylesheet(e){this.flavor=e}tagSelector(e,t){}classSelector(e){}pseudoclassSelector(e,t){}pseudoelementSelector(e,t){}idSelector(e){}attributeSelector(e,t,n,i){}descendantSelector(){}childSelector(){}adjacentSiblingSelector(){}followingSiblingSelector(){}nextSelector(){}startSelectorRule(){}startFontFaceRule(){}startFootnoteRule(e){}startViewportRule(){}startDefineRule(){}startRegionRule(){}startPageRule(){}startPageMarginBoxRule(e){}startWhenRule(e){}startMediaRule(e){this.startWhenRule(e)}startFlowRule(e){}startPageTemplateRule(){}startPageMasterRule(e,t,n){}startPartitionRule(e,t,n){}startPartitionGroupRule(e,t,n){}startRuleBody(){}property(e,t,n){}endRule(){}startFuncWithSelector(e){}endFuncWithSelector(){}getImportantSpecificity(){switch(this.flavor){case Hi.USER_AGENT:return Di;case Hi.USER:return Vi;default:return zi}}getBaseSpecificity(){switch(this.flavor){case Hi.USER_AGENT:return Di;case Hi.USER:return _i;default:return Bi}}}class Wi extends $i{constructor(){super(null),this.stack=[],this.tokenizer=null,this.slave=null}pushHandler(e){this.stack.push(this.slave),this.slave=e}popHandler(){this.slave=this.stack.pop()}getCurrentToken(){return this.tokenizer?this.tokenizer.token():null}getScope(){return this.slave.getScope()}error(e,t){this.slave.error(e,t)}errorMsg(e,t){h.warn(e)}startStylesheet(e){super.startStylesheet(e),this.stack.length>0&&(this.slave=this.stack[0],this.stack=[]),this.slave.startStylesheet(e)}tagSelector(e,t){this.slave.tagSelector(e,t)}classSelector(e){this.slave.classSelector(e)}pseudoclassSelector(e,t){this.slave.pseudoclassSelector(e,t)}pseudoelementSelector(e,t){this.slave.pseudoelementSelector(e,t)}idSelector(e){this.slave.idSelector(e)}attributeSelector(e,t,n,i){this.slave.attributeSelector(e,t,n,i)}descendantSelector(){this.slave.descendantSelector()}childSelector(){this.slave.childSelector()}adjacentSiblingSelector(){this.slave.adjacentSiblingSelector()}followingSiblingSelector(){this.slave.followingSiblingSelector()}nextSelector(){this.slave.nextSelector()}startSelectorRule(){this.slave.startSelectorRule()}startFontFaceRule(){this.slave.startFontFaceRule()}startFootnoteRule(e){this.slave.startFootnoteRule(e)}startViewportRule(){this.slave.startViewportRule()}startDefineRule(){this.slave.startDefineRule()}startRegionRule(){this.slave.startRegionRule()}startPageRule(){this.slave.startPageRule()}startPageMarginBoxRule(e){this.slave.startPageMarginBoxRule(e)}startWhenRule(e){this.slave.startWhenRule(e)}startFlowRule(e){this.slave.startFlowRule(e)}startPageTemplateRule(){this.slave.startPageTemplateRule()}startPageMasterRule(e,t,n){this.slave.startPageMasterRule(e,t,n)}startPartitionRule(e,t,n){this.slave.startPartitionRule(e,t,n)}startPartitionGroupRule(e,t,n){this.slave.startPartitionGroupRule(e,t,n)}startRuleBody(){this.slave.startRuleBody()}property(e,t,n){this.slave.property(e,t,n)}endRule(){this.slave.endRule()}startFuncWithSelector(e){this.slave.startFuncWithSelector(e)}endFuncWithSelector(){this.slave.endFuncWithSelector()}}class Xi extends $i{constructor(e,t,n){super(e),this.owner=t,this.topLevel=n,this.depth=0,t&&(this.flavor=t.flavor)}getCurrentToken(){return this.owner.getCurrentToken()}error(e,t){this.owner.errorMsg(e,t)}startRuleBody(){this.depth++}endRule(){0!=--this.depth||this.topLevel||this.owner.popHandler()}}class ji extends Xi{constructor(e,t,n){super(e,t,n)}report(e){this.error(e,this.getCurrentToken())}reportAndSkip(e){this.report(e),this.owner.pushHandler(new Xi(this.scope,this.owner,!1))}startSelectorRule(){this.reportAndSkip("E_CSS_UNEXPECTED_SELECTOR")}startFontFaceRule(){this.reportAndSkip("E_CSS_UNEXPECTED_FONT_FACE")}startFootnoteRule(e){this.reportAndSkip("E_CSS_UNEXPECTED_FOOTNOTE")}startViewportRule(){this.reportAndSkip("E_CSS_UNEXPECTED_VIEWPORT")}startDefineRule(){this.reportAndSkip("E_CSS_UNEXPECTED_DEFINE")}startRegionRule(){this.reportAndSkip("E_CSS_UNEXPECTED_REGION")}startPageRule(){this.reportAndSkip("E_CSS_UNEXPECTED_PAGE")}startWhenRule(e){this.reportAndSkip("E_CSS_UNEXPECTED_WHEN")}startFlowRule(e){this.reportAndSkip("E_CSS_UNEXPECTED_FLOW")}startPageTemplateRule(){this.reportAndSkip("E_CSS_UNEXPECTED_PAGE_TEMPLATE")}startPageMasterRule(e,t,n){this.reportAndSkip("E_CSS_UNEXPECTED_PAGE_MASTER")}startPartitionRule(e,t,n){this.reportAndSkip("E_CSS_UNEXPECTED_PARTITION")}startPartitionGroupRule(e,t,n){this.reportAndSkip("E_CSS_UNEXPECTED_PARTITION_GROUP")}startFuncWithSelector(e){this.reportAndSkip("E_CSS_UNEXPECTED_SELECTOR_FUNC")}endFuncWithSelector(){this.reportAndSkip("E_CSS_UNEXPECTED_END_SELECTOR_FUNC")}property(e,t,n){this.error("E_CSS_UNEXPECTED_PROPERTY",this.getCurrentToken())}}const Ki=[],Yi=[],qi=[],Zi=[],Qi=[],Ji=[],eo=[],to=[],no=[],io=[],oo=[],so=[],ro=[];var ao;!function(e){e[e.SELECTOR_NAME_1=1]="SELECTOR_NAME_1",e[e.SELECTOR_NAME=2]="SELECTOR_NAME",e[e.SELECTOR_ANY_1=3]="SELECTOR_ANY_1",e[e.SELECTOR_ANY=4]="SELECTOR_ANY",e[e.SELECTOR_ID_1=5]="SELECTOR_ID_1",e[e.SELECTOR_ID=6]="SELECTOR_ID",e[e.SELECTOR_CLASS_1=7]="SELECTOR_CLASS_1",e[e.SELECTOR_CLASS=8]="SELECTOR_CLASS",e[e.SELECTOR_ATTR_1=9]="SELECTOR_ATTR_1",e[e.SELECTOR_ATTR=10]="SELECTOR_ATTR",e[e.SELECTOR_CHILD=11]="SELECTOR_CHILD",e[e.SELECTOR_SIBLING=12]="SELECTOR_SIBLING",e[e.SELECTOR_BODY=13]="SELECTOR_BODY",e[e.SELECTOR_PSEUDOCLASS=14]="SELECTOR_PSEUDOCLASS",e[e.VAL_IDENT=15]="VAL_IDENT",e[e.VAL_HASH=16]="VAL_HASH",e[e.VAL_NUM=17]="VAL_NUM",e[e.VAL_INT=18]="VAL_INT",e[e.VAL_NUMERIC=19]="VAL_NUMERIC",e[e.VAL_STR=20]="VAL_STR",e[e.VAL_URL=21]="VAL_URL",e[e.VAL_COMMA=22]="VAL_COMMA",e[e.VAL_SLASH=23]="VAL_SLASH",e[e.VAL_FUNC=24]="VAL_FUNC",e[e.VAL_C_PAR=25]="VAL_C_PAR",e[e.VAL_END=26]="VAL_END",e[e.RULE_END=27]="RULE_END",e[e.IDENT=28]="IDENT",e[e.SELECTOR_START=29]="SELECTOR_START",e[e.AT=30]="AT",e[e.EXPR_IDENT=31]="EXPR_IDENT",e[e.EXPR_NUM=32]="EXPR_NUM",e[e.EXPR_NUMERIC=33]="EXPR_NUMERIC",e[e.EXPR_STR=34]="EXPR_STR",e[e.EXPR_PARAM=35]="EXPR_PARAM",e[e.EXPR_PREFIX=36]="EXPR_PREFIX",e[e.EXPR_INFIX=37]="EXPR_INFIX",e[e.EXPR_FUNC=38]="EXPR_FUNC",e[e.EXPR_C_PAR=39]="EXPR_C_PAR",e[e.EXPR_O_PAR=40]="EXPR_O_PAR",e[e.SELECTOR_NEXT=41]="SELECTOR_NEXT",e[e.SELECTOR_PSEUDOELEM=42]="SELECTOR_PSEUDOELEM",e[e.EXPR_O_BRC=43]="EXPR_O_BRC",e[e.VAL_FINISH=44]="VAL_FINISH",e[e.EXPR_INFIX_NAME=45]="EXPR_INFIX_NAME",e[e.PROP=46]="PROP",e[e.VAL_BANG=47]="VAL_BANG",e[e.VAL_BRC=48]="VAL_BRC",e[e.EXPR_SEMICOL=49]="EXPR_SEMICOL",e[e.ERROR_PUSH=50]="ERROR_PUSH",e[e.ERROR_POP=51]="ERROR_POP",e[e.ERROR_POP_DECL=52]="ERROR_POP_DECL",e[e.ERROR_SEMICOL=53]="ERROR_SEMICOL",e[e.VAL_PLUS=54]="VAL_PLUS",e[e.SELECTOR_PSEUDOCLASS_1=55]="SELECTOR_PSEUDOCLASS_1",e[e.SELECTOR_FOLLOWING_SIBLING=56]="SELECTOR_FOLLOWING_SIBLING",e[e.DONE=200]="DONE"}(ao||(ao={}));const lo=On.LAST+1;var ho;Ki[On.IDENT]=ao.IDENT,Ki[On.STAR]=ao.SELECTOR_START,Ki[On.HASH]=ao.SELECTOR_START,Ki[On.CLASS]=ao.SELECTOR_START,Ki[On.O_BRK]=ao.SELECTOR_START,Ki[On.COLON]=ao.SELECTOR_START,Ki[On.AT]=ao.AT,Ki[On.C_BRC]=ao.RULE_END,Ki[On.EOF]=ao.DONE,Yi[On.IDENT]=ao.PROP,Yi[On.EOF]=ao.DONE,Ji[On.IDENT]=ao.SELECTOR_NAME,Ji[On.STAR]=ao.SELECTOR_ANY,Ji[On.HASH]=ao.SELECTOR_ID,Ji[On.CLASS]=ao.SELECTOR_CLASS,Ji[On.O_BRK]=ao.SELECTOR_ATTR,Ji[On.COLON]=ao.SELECTOR_PSEUDOCLASS,qi[On.GT]=ao.SELECTOR_CHILD,qi[On.PLUS]=ao.SELECTOR_SIBLING,qi[On.TILDE]=ao.SELECTOR_FOLLOWING_SIBLING,qi[On.IDENT]=ao.SELECTOR_NAME_1,qi[On.STAR]=ao.SELECTOR_ANY_1,qi[On.HASH]=ao.SELECTOR_ID_1,qi[On.CLASS]=ao.SELECTOR_CLASS_1,qi[On.O_BRK]=ao.SELECTOR_ATTR_1,qi[On.O_BRC]=ao.SELECTOR_BODY,qi[On.COLON]=ao.SELECTOR_PSEUDOCLASS_1,qi[On.COL_COL]=ao.SELECTOR_PSEUDOELEM,qi[On.COMMA]=ao.SELECTOR_NEXT,Zi[On.IDENT]=ao.SELECTOR_NAME_1,Zi[On.STAR]=ao.SELECTOR_ANY_1,Zi[On.HASH]=ao.SELECTOR_ID_1,Zi[On.CLASS]=ao.SELECTOR_CLASS_1,Zi[On.O_BRK]=ao.SELECTOR_ATTR_1,Zi[On.C_PAR]=ao.DONE,Zi[On.COLON]=ao.SELECTOR_PSEUDOCLASS_1,Qi[On.IDENT]=ao.SELECTOR_NAME,Qi[On.STAR]=ao.SELECTOR_ANY,Qi[On.HASH]=ao.SELECTOR_ID,Qi[On.CLASS]=ao.SELECTOR_CLASS,Qi[On.COLON]=ao.SELECTOR_PSEUDOCLASS,Qi[On.COL_COL]=ao.SELECTOR_PSEUDOELEM,Qi[On.O_BRK]=ao.SELECTOR_ATTR,Qi[On.O_BRC]=ao.SELECTOR_BODY,eo[On.IDENT]=ao.VAL_IDENT,eo[On.HASH]=ao.VAL_HASH,eo[On.NUM]=ao.VAL_NUM,eo[On.INT]=ao.VAL_INT,eo[On.NUMERIC]=ao.VAL_NUMERIC,eo[On.STR]=ao.VAL_STR,eo[On.URL]=ao.VAL_URL,eo[On.COMMA]=ao.VAL_COMMA,eo[On.SLASH]=ao.VAL_SLASH,eo[On.FUNC]=ao.VAL_FUNC,eo[On.C_PAR]=ao.VAL_C_PAR,eo[On.SEMICOL]=ao.VAL_END,eo[On.C_BRC]=ao.VAL_BRC,eo[On.BANG]=ao.VAL_BANG,eo[On.PLUS]=ao.VAL_PLUS,eo[On.EOF]=ao.VAL_FINISH,to[On.IDENT]=ao.EXPR_IDENT,to[On.NUM]=ao.EXPR_NUM,to[On.INT]=ao.EXPR_NUM,to[On.NUMERIC]=ao.EXPR_NUMERIC,to[On.STR]=ao.EXPR_STR,to[On.O_PAR]=ao.EXPR_O_PAR,to[On.FUNC]=ao.EXPR_FUNC,to[On.BANG]=ao.EXPR_PREFIX,to[On.MINUS]=ao.EXPR_PREFIX,to[On.DOLLAR]=ao.EXPR_PARAM,no[On.IDENT]=ao.EXPR_INFIX_NAME,no[On.COMMA]=ao.EXPR_INFIX,no[On.GT]=ao.EXPR_INFIX,no[On.LT]=ao.EXPR_INFIX,no[On.GT_EQ]=ao.EXPR_INFIX,no[On.LT_EQ]=ao.EXPR_INFIX,no[On.EQ]=ao.EXPR_INFIX,no[On.EQ_EQ]=ao.EXPR_INFIX,no[On.BANG_EQ]=ao.EXPR_INFIX,no[On.AMP_AMP]=ao.EXPR_INFIX,no[On.BAR_BAR]=ao.EXPR_INFIX,no[On.PLUS]=ao.EXPR_INFIX,no[On.MINUS]=ao.EXPR_INFIX,no[On.SLASH]=ao.EXPR_INFIX,no[On.PERCENT]=ao.EXPR_INFIX,no[On.STAR]=ao.EXPR_INFIX,no[On.COLON]=ao.EXPR_INFIX,no[On.QMARK]=ao.EXPR_INFIX,no[On.C_PAR]=ao.EXPR_C_PAR,no[On.O_BRC]=ao.EXPR_O_BRC,no[On.SEMICOL]=ao.EXPR_SEMICOL,io[On.EOF]=ao.DONE,io[On.O_BRC]=ao.ERROR_PUSH,io[On.C_BRC]=ao.ERROR_POP,io[On.O_BRK]=ao.ERROR_PUSH,io[On.C_BRK]=ao.ERROR_POP,io[On.O_PAR]=ao.ERROR_PUSH,io[On.C_PAR]=ao.ERROR_POP,io[On.SEMICOL]=ao.ERROR_SEMICOL,oo[On.EOF]=ao.DONE,oo[On.O_BRC]=ao.ERROR_PUSH,oo[On.C_BRC]=ao.ERROR_POP_DECL,oo[On.O_BRK]=ao.ERROR_PUSH,oo[On.C_BRK]=ao.ERROR_POP,oo[On.O_PAR]=ao.ERROR_PUSH,oo[On.C_PAR]=ao.ERROR_POP,oo[On.SEMICOL]=ao.ERROR_SEMICOL,so[On.EOF]=ao.DONE,so[On.O_BRC]=ao.ERROR_PUSH,so[On.C_BRC]=ao.ERROR_POP,so[On.O_BRK]=ao.ERROR_PUSH,so[On.C_BRK]=ao.ERROR_POP,so[On.O_PAR]=ao.ERROR_PUSH,so[On.C_PAR]=ao.ERROR_POP,ro[On.C_PAR]=0,ro[On.COMMA]=0,ro[On.QMARK]=1,ro[On.COLON]=1,ro[On.AMP_AMP]=2,ro[On.BAR_BAR]=2,ro[On.LT]=3,ro[On.GT]=3,ro[On.LT_EQ]=3,ro[On.GT_EQ]=3,ro[On.EQ]=3,ro[On.EQ_EQ]=3,ro[On.BANG_EQ]=3,ro[On.PLUS]=4,ro[On.MINUS]=4,ro[On.STAR]=5,ro[On.SLASH]=5,ro[On.PERCENT]=5,ro[On.EOF]=6,ro[lo]=2,function(e){e[e.PROP=0]="PROP",e[e.WHEN=1]="WHEN",e[e.MEDIA=2]="MEDIA",e[e.IMPORT=3]="IMPORT"}(ho||(ho={}));class co{constructor(e,t,n,i){this.actions=e,this.tokenizer=t,this.handler=n,this.baseURL=i,this.valStack=[],this.namespacePrefixToURI={},this.defaultNamespaceURI=null,this.propName=null,this.propImportant=!1,this.result=null,this.importReady=!1,this.importURL=null,this.importCondition=null,this.errorBrackets=[],this.ruleStack=[],this.regionRule=!1,this.pageRule=!1,this.exprContext=ho.MEDIA}extractVals(e,t){const n=[],i=this.valStack;for(;n.push(i[t++]),t!=i.length;)if(i[t++]!=e)throw new Error("Unexpected state");return n}valStackReduce(e,t){const n=this.valStack;let i,o=n.length;do{i=n[--o]}while(void 0!==i&&"string"!=typeof i);let s=n.length-(o+1);if(s>1&&n.splice(o+1,s,new Rt(n.slice(o+1,n.length))),","==e)return null;o++;do{i=n[--o]}while(void 0!==i&&("string"!=typeof i||","==i));if(s=n.length-(o+1),"("==i){if(")"!=e)return this.handler.error("E_CSS_MISMATCHED_C_PAR",t),this.actions=oo,null;const i=new kt(n[o-1],this.extractVals(",",o+1));return n.splice(o-1,s+2,i),null}return";"!=e||o>=0?(this.handler.error("E_CSS_UNEXPECTED_VAL_END",t),this.actions=oo,null):s>1?new Lt(this.extractVals(",",o+1)):n[0]}exprError(e,t){this.actions=this.propName?oo:io,this.handler.error(e,t)}exprStackReduce(e,t){const n=this.valStack,i=this.handler;let o,s=n.pop();for(;;){let r=n.pop();if(e==On.C_PAR){const t=[s];for(;r==On.COMMA;)t.unshift(n.pop()),r=n.pop();if("string"==typeof r){if("{"==r){for(;t.length>=2;){const e=t.shift(),n=t.shift(),o=new He(i.getScope(),e,n);t.unshift(o)}return n.push(new Ft(t[0])),!0}if("("==r){const o=n.pop(),r=n.pop();s=new ot(i.getScope(),ve(r,o),t),e=On.EOF;continue}}if(r==On.O_PAR){s.isMediaName()&&(s=new at(i.getScope(),s,null)),e=On.EOF;continue}}else if("string"==typeof r){n.push(r);break}if(r<0)if(r==-On.BANG)s=new Be(i.getScope(),s);else{if(r!=-On.MINUS)return this.exprError("F_UNEXPECTED_STATE",t),!1;s=new Me(i.getScope(),s)}else{if(ro[e]>ro[r]){n.push(r);break}switch(o=n.pop(),r){case On.AMP_AMP:s=new Ue(i.getScope(),o,s);break;case lo:s=new ze(i.getScope(),o,s);break;case On.BAR_BAR:s=new Ve(i.getScope(),o,s);break;case On.LT:s=new Ge(i.getScope(),o,s);break;case On.GT:s=new We(i.getScope(),o,s);break;case On.LT_EQ:s=new $e(i.getScope(),o,s);break;case On.GT_EQ:s=new Xe(i.getScope(),o,s);break;case On.EQ:case On.EQ_EQ:s=new je(i.getScope(),o,s);break;case On.BANG_EQ:s=new Ke(i.getScope(),o,s);break;case On.PLUS:s=new Ye(i.getScope(),o,s);break;case On.MINUS:s=new qe(i.getScope(),o,s);break;case On.STAR:s=new Ze(i.getScope(),o,s);break;case On.SLASH:s=new Qe(i.getScope(),o,s);break;case On.PERCENT:s=new Je(i.getScope(),o,s);break;case On.COLON:if(!(n.length>1))return this.exprError("E_CSS_EXPR_COND",t),!1;switch(n[n.length-1]){case On.QMARK:n.pop(),s=new st(i.getScope(),n.pop(),o,s);break;case On.O_PAR:if(!o.isMediaName())return this.exprError("E_CSS_MEDIA_TEST",t),!1;s=new at(i.getScope(),o,s)}break;case On.QMARK:if(e!=On.COLON)return this.exprError("E_CSS_EXPR_COND",t),!1;case On.O_PAR:return n.push(o),n.push(r),n.push(s),!1;default:return this.exprError("F_UNEXPECTED_STATE",t),!1}}}return n.push(s),!1}readPseudoParams(){const e=[];for(;;){const t=this.tokenizer.token();switch(t.type){case On.IDENT:e.push(t.text);break;case On.PLUS:e.push("+");break;case On.NUM:case On.INT:e.push(t.num);break;default:return e}this.tokenizer.consume()}}readNthPseudoParams(){let e=!1,t=this.tokenizer.token();if(t.type===On.PLUS)e=!0,this.tokenizer.consume(),t=this.tokenizer.token();else if(t.type===On.IDENT&&("even"===t.text||"odd"===t.text))return this.tokenizer.consume(),[2,"odd"===t.text?1:0];switch(t.type){case On.NUMERIC:if(e&&t.num<0)return null;case On.IDENT:if(e&&"-"===t.text.charAt(0))return null;if("n"===t.text||"-n"===t.text){if(e&&t.precededBySpace)return null;let n="-n"===t.text?-1:1;t.type===On.NUMERIC&&(n=t.num);let i=0;this.tokenizer.consume(),t=this.tokenizer.token();const o=t.type===On.MINUS,s=t.type===On.PLUS||o;if(s&&(this.tokenizer.consume(),t=this.tokenizer.token()),t.type===On.INT){if(i=t.num,1/i==-1/0){if(i=0,s)return null}else if(i<0){if(s)return null}else if(i>=0&&!s)return null;this.tokenizer.consume()}else if(s)return null;return[n,o&&i>0?-i:i]}if("n-"===t.text||"-n-"===t.text){if(e&&t.precededBySpace)return null;let n="-n-"===t.text?-1:1;if(t.type===On.NUMERIC&&(n=t.num),this.tokenizer.consume(),t=this.tokenizer.token(),t.type===On.INT)return t.num<0||1/t.num==-1/0?null:(this.tokenizer.consume(),[n,t.num])}else{let n=t.text.match(/^n(-[0-9]+)$/);if(n)return e&&t.precededBySpace?null:(this.tokenizer.consume(),[t.type===On.NUMERIC?t.num:1,parseInt(n[1],10)]);if(n=t.text.match(/^-n(-[0-9]+)$/),n)return this.tokenizer.consume(),[-1,parseInt(n[1],10)]}return null;case On.INT:return e&&(t.precededBySpace||t.num<0)?null:(this.tokenizer.consume(),[0,t.num])}return null}makeCondition(e,t){const n=this.handler.getScope();if(!n)return null;if(t=t||n._true,e){const i=e.split(/\s+/);for(const e of i)switch(e){case"vertical":t=ht(n,t,new Be(n,new tt(n,"pref-horizontal")));break;case"horizontal":t=ht(n,t,new tt(n,"pref-horizontal"));break;case"day":t=ht(n,t,new Be(n,new tt(n,"pref-night-mode")));break;case"night":t=ht(n,t,new tt(n,"pref-night-mode"));break;default:t=n._false}}return t===n._true?null:new Ft(t)}isInsidePropertyOnlyRule(){switch(this.ruleStack[this.ruleStack.length-1]){case"[selector]":case"font-face":case"-epubx-flow":case"-epubx-viewport":case"-epubx-define":case"-adapt-footnote-area":return!0}return!1}runParser(e,t,n,i,o){const s=this.handler,r=this.tokenizer,a=this.valStack;let l,h,c,u,d,p,f;i&&(this.exprContext=ho.MEDIA,this.valStack.push("{"));e:for(;e>0;--e)switch(l=r.token(),this.actions[l.type]){case ao.IDENT:if(r.nthToken(1).type!=On.COLON){this.isInsidePropertyOnlyRule()?(s.error("E_CSS_COLON_EXPECTED",r.nthToken(1)),this.actions=oo):(this.actions=Ji,s.startSelectorRule());continue}h=r.nthToken(2),h.precededBySpace||h.type!=On.IDENT&&h.type!=On.FUNC||r.mark(),this.propName=l.text,this.propImportant=!1,r.consume(),r.consume(),this.actions=eo,a.splice(0,a.length);continue;case ao.PROP:if(r.nthToken(1).type!=On.COLON){this.actions=oo,s.error("E_CSS_COLON_EXPECTED",r.nthToken(1));continue}this.propName=l.text,this.propImportant=!1,r.consume(),r.consume(),this.actions=eo,a.splice(0,a.length);continue;case ao.SELECTOR_START:this.actions=Ji,s.startSelectorRule();continue;case ao.SELECTOR_NAME_1:if(!l.precededBySpace){this.actions=so,s.error("E_CSS_SPACE_EXPECTED",l);continue}s.descendantSelector();case ao.SELECTOR_NAME:if(r.nthToken(1).type==On.BAR)if(r.consume(),r.consume(),c=this.namespacePrefixToURI[l.text],null!=c)switch(l=r.token(),l.type){case On.IDENT:s.tagSelector(c,l.text),this.actions=o?Zi:qi,r.consume();break;case On.STAR:s.tagSelector(c,null),this.actions=o?Zi:qi,r.consume();break;default:this.actions=io,s.error("E_CSS_NAMESPACE",l)}else this.actions=io,s.error("E_CSS_UNDECLARED_PREFIX",l);else s.tagSelector(this.defaultNamespaceURI,l.text),this.actions=o?Zi:qi,r.consume();continue;case ao.SELECTOR_ANY_1:if(!l.precededBySpace){this.actions=so,s.error("E_CSS_SPACE_EXPECTED",l);continue}s.descendantSelector();case ao.SELECTOR_ANY:if(r.nthToken(1).type==On.BAR)switch(r.consume(),r.consume(),l=r.token(),l.type){case On.IDENT:s.tagSelector(null,l.text),this.actions=o?Zi:qi,r.consume();break;case On.STAR:s.tagSelector(null,null),this.actions=o?Zi:qi,r.consume();break;default:this.actions=io,s.error("E_CSS_NAMESPACE",l)}else s.tagSelector(this.defaultNamespaceURI,null),this.actions=o?Zi:qi,r.consume();continue;case ao.SELECTOR_ID_1:l.precededBySpace&&s.descendantSelector();case ao.SELECTOR_ID:s.idSelector(l.text),this.actions=o?Zi:qi,r.consume();continue;case ao.SELECTOR_CLASS_1:l.precededBySpace&&s.descendantSelector();case ao.SELECTOR_CLASS:s.classSelector(l.text),this.actions=o?Zi:qi,r.consume();continue;case ao.SELECTOR_PSEUDOCLASS_1:l.precededBySpace&&s.descendantSelector();case ao.SELECTOR_PSEUDOCLASS:r.consume(),l=r.token();t:switch(l.type){case On.IDENT:s.pseudoclassSelector(l.text,null),r.consume(),this.actions=o?Zi:qi;continue;case On.FUNC:switch(u=l.text,r.consume(),u){case"not":this.actions=Ji,s.startFuncWithSelector("not"),this.runParser(Number.POSITIVE_INFINITY,!1,!1,!1,!0)?this.actions=qi:this.actions=so;break e;case"lang":case"href-epub-type":if(l=r.token(),l.type===On.IDENT){f=[l.text],r.consume();break}break t;case"nth-child":case"nth-of-type":case"nth-last-child":case"nth-last-of-type":if(f=this.readNthPseudoParams(),f)break;break t;default:f=this.readPseudoParams()}if(l=r.token(),l.type==On.C_PAR){s.pseudoclassSelector(u,f),r.consume(),this.actions=o?Zi:qi;continue}}s.error("E_CSS_PSEUDOCLASS_SYNTAX",l),this.actions=io;continue;case ao.SELECTOR_PSEUDOELEM:switch(r.consume(),l=r.token(),l.type){case On.IDENT:s.pseudoelementSelector(l.text,null),this.actions=o?Zi:qi,r.consume();continue;case On.FUNC:if(u=l.text,r.consume(),"nth-fragment"==u){if(f=this.readNthPseudoParams(),null===f)break}else f=this.readPseudoParams();if(l=r.token(),l.type==On.C_PAR){s.pseudoelementSelector(u,f),this.actions=o?Zi:qi,r.consume();continue}}s.error("E_CSS_PSEUDOELEM_SYNTAX",l),this.actions=io;continue;case ao.SELECTOR_ATTR_1:l.precededBySpace&&s.descendantSelector();case ao.SELECTOR_ATTR:if(r.consume(),l=r.token(),l.type==On.IDENT)u=l.text,r.consume();else if(l.type==On.STAR)u=null,r.consume();else{if(l.type!=On.BAR){this.actions=so,s.error("E_CSS_ATTR",l),r.consume();continue}u=""}if(l=r.token(),l.type==On.BAR){if(c=u?this.namespacePrefixToURI[u]:u,null==c){this.actions=so,s.error("E_CSS_UNDECLARED_PREFIX",l),r.consume();continue}if(r.consume(),l=r.token(),l.type!=On.IDENT){this.actions=so,s.error("E_CSS_ATTR_NAME_EXPECTED",l);continue}u=l.text,r.consume(),l=r.token()}else c="";switch(l.type){case On.EQ:case On.TILDE_EQ:case On.BAR_EQ:case On.HAT_EQ:case On.DOLLAR_EQ:case On.STAR_EQ:case On.COL_COL:d=l.type,r.consume(),l=r.token();break;case On.C_BRK:s.attributeSelector(c,u,On.EOF,null),this.actions=o?Zi:qi,r.consume();continue;default:this.actions=so,s.error("E_CSS_ATTR_OP_EXPECTED",l);continue}switch(l.type){case On.IDENT:case On.STR:s.attributeSelector(c,u,d,l.text),r.consume(),l=r.token();break;default:this.actions=so,s.error("E_CSS_ATTR_VAL_EXPECTED",l);continue}if(l.type!=On.C_BRK){this.actions=so,s.error("E_CSS_ATTR",l);continue}this.actions=o?Zi:qi,r.consume();continue;case ao.SELECTOR_CHILD:s.childSelector(),this.actions=Qi,r.consume();continue;case ao.SELECTOR_SIBLING:s.adjacentSiblingSelector(),this.actions=Qi,r.consume();continue;case ao.SELECTOR_FOLLOWING_SIBLING:s.followingSiblingSelector(),this.actions=Qi,r.consume();continue;case ao.SELECTOR_BODY:this.regionRule?(this.ruleStack.push("-epubx-region"),this.regionRule=!1):this.pageRule?(this.ruleStack.push("page"),this.pageRule=!1):this.ruleStack.push("[selector]"),s.startRuleBody(),this.actions=Ki,r.consume();continue;case ao.SELECTOR_NEXT:s.nextSelector(),this.actions=Ji,r.consume();continue;case ao.VAL_IDENT:a.push(Ct(l.text)),r.consume();continue;case ao.VAL_HASH:d=parseInt(l.text,16);try{a.push(Gi(l.text))}catch(e){s.error("E_CSS_COLOR",l),this.actions=io}r.consume();continue;case ao.VAL_NUM:a.push(new xt(l.num)),r.consume();continue;case ao.VAL_INT:a.push(new It(l.num)),r.consume();continue;case ao.VAL_NUMERIC:xe(l.text)?a.push(new Ft(new et(s.getScope(),l.num,l.text))):a.push(new Tt(l.num,l.text)),r.consume();continue;case ao.VAL_STR:a.push(new St(l.text)),r.consume();continue;case ao.VAL_URL:a.push(new At(O(l.text,this.baseURL))),r.consume();continue;case ao.VAL_COMMA:this.valStackReduce(",",l),a.push(","),r.consume();continue;case ao.VAL_SLASH:a.push(yt),r.consume();continue;case ao.VAL_FUNC:u=l.text.toLowerCase(),"-epubx-expr"==u||"calc"==u||"env"==u?(this.actions=to,this.exprContext=ho.PROP,a.push("{")):(a.push(u),a.push("(")),r.consume();continue;case ao.VAL_C_PAR:this.valStackReduce(")",l),r.consume();continue;case ao.VAL_BANG:if(r.consume(),l=r.token(),h=r.nthToken(1),l.type==On.IDENT&&"important"==l.text.toLowerCase()&&(h.type==On.SEMICOL||h.type==On.EOF||h.type==On.C_BRC)){r.consume(),this.propImportant=!0;continue}this.exprError("E_CSS_SYNTAX",l);continue;case ao.VAL_PLUS:switch(h=r.nthToken(1),h.type){case On.NUM:case On.NUMERIC:case On.INT:if(!h.precededBySpace){r.consume();continue}}if(this.actions===eo&&r.hasMark()){r.reset(),this.actions=Ji,s.startSelectorRule();continue}this.exprError("E_CSS_UNEXPECTED_PLUS",l);continue;case ao.VAL_END:r.consume();case ao.VAL_BRC:r.unmark(),p=this.valStackReduce(";",l),p&&this.propName&&s.property(this.propName,p,this.propImportant),this.actions=n?Yi:Ki;continue;case ao.VAL_FINISH:if(r.consume(),r.unmark(),p=this.valStackReduce(";",l),t)return this.result=p,!0;if(this.propName&&p&&s.property(this.propName,p,this.propImportant),n)return!0;this.exprError("E_CSS_SYNTAX",l);continue;case ao.EXPR_IDENT:h=r.nthToken(1),h.type==On.CLASS?(r.nthToken(2).type!=On.O_PAR||r.nthToken(2).precededBySpace?(a.push(new tt(s.getScope(),ve(l.text,h.text))),this.actions=no):(a.push(l.text,h.text,"("),r.consume()),r.consume()):(this.exprContext==ho.MEDIA||this.exprContext==ho.IMPORT?"not"==l.text.toLowerCase()?(r.consume(),a.push(new nt(s.getScope(),!0,h.text))):("only"==l.text.toLowerCase()&&(r.consume(),l=h),a.push(new nt(s.getScope(),!1,l.text))):a.push(new tt(s.getScope(),l.text)),this.actions=no),r.consume();continue;case ao.EXPR_FUNC:a.push(null,l.text,"("),r.consume();continue;case ao.EXPR_NUM:a.push(new rt(s.getScope(),l.num)),r.consume(),this.actions=no;continue;case ao.EXPR_NUMERIC:u=l.text,"%"==u&&(u=this.propName&&this.propName.match(/height|^(top|bottom)$/)?"vh":"vw"),a.push(new et(s.getScope(),l.num,u)),r.consume(),this.actions=no;continue;case ao.EXPR_STR:a.push(new rt(s.getScope(),l.text)),r.consume(),this.actions=no;continue;case ao.EXPR_PARAM:r.consume(),l=r.token(),l.type!=On.INT||l.precededBySpace?this.exprError("E_CSS_SYNTAX",l):(a.push(new lt(s.getScope(),l.num)),r.consume(),this.actions=no);continue;case ao.EXPR_PREFIX:a.push(-l.type),r.consume();continue;case ao.EXPR_INFIX:this.actions=to,this.exprStackReduce(l.type,l),a.push(l.type),r.consume();continue;case ao.EXPR_INFIX_NAME:"and"==l.text.toLowerCase()?(this.actions=to,this.exprStackReduce(lo,l),a.push(lo),r.consume()):this.exprError("E_CSS_SYNTAX",l);continue;case ao.EXPR_C_PAR:this.exprStackReduce(l.type,l)&&(this.propName?this.actions=eo:this.exprError("E_CSS_UNBALANCED_PAR",l)),r.consume();continue;case ao.EXPR_O_BRC:this.exprStackReduce(On.C_PAR,l)&&(this.propName||this.exprContext==ho.IMPORT?this.exprError("E_CSS_UNEXPECTED_BRC",l):(this.exprContext==ho.WHEN?s.startWhenRule(a.pop()):s.startMediaRule(a.pop()),this.ruleStack.push("media"),s.startRuleBody(),this.actions=Ki)),r.consume();continue;case ao.EXPR_SEMICOL:if(this.exprStackReduce(On.C_PAR,l)){if(!this.propName&&this.exprContext==ho.IMPORT)return this.importCondition=a.pop(),this.importReady=!0,this.actions=Ki,r.consume(),!1;this.exprError("E_CSS_UNEXPECTED_SEMICOL",l)}r.consume();continue;case ao.EXPR_O_PAR:a.push(l.type),r.consume();continue;case ao.RULE_END:this.actions=Ki,r.consume(),s.endRule(),this.ruleStack.length&&this.ruleStack.pop();continue;case ao.AT:switch(u=l.text.toLowerCase(),u){case"import":if(r.consume(),l=r.token(),l.type==On.STR||l.type==On.URL){if(this.importURL=l.text,r.consume(),l=r.token(),l.type==On.SEMICOL||l.type==On.EOF)return this.importReady=!0,r.consume(),!1;this.propName=null,this.exprContext=ho.IMPORT,this.actions=to,a.push("{");continue}s.error("E_CSS_IMPORT_SYNTAX",l),this.actions=io;continue;case"namespace":switch(r.consume(),l=r.token(),l.type){case On.IDENT:if(u=l.text,r.consume(),l=r.token(),(l.type==On.STR||l.type==On.URL)&&r.nthToken(1).type==On.SEMICOL){this.namespacePrefixToURI[u]=l.text,r.consume(),r.consume();continue}break;case On.STR:case On.URL:if(r.nthToken(1).type==On.SEMICOL){this.defaultNamespaceURI=l.text,r.consume(),r.consume();continue}}s.error("E_CSS_NAMESPACE_SYNTAX",l),this.actions=io;continue;case"charset":if(r.consume(),l=r.token(),l.type==On.STR&&r.nthToken(1).type==On.SEMICOL){u=l.text.toLowerCase(),"utf-8"!=u&&"utf-16"!=u&&s.error(`E_CSS_UNEXPECTED_CHARSET ${u}`,l),r.consume(),r.consume();continue}s.error("E_CSS_CHARSET_SYNTAX",l),this.actions=io;continue;case"font-face":case"-epubx-page-template":case"-epubx-define":case"-epubx-viewport":if(r.nthToken(1).type==On.O_BRC){switch(r.consume(),r.consume(),u){case"font-face":s.startFontFaceRule();break;case"-epubx-page-template":s.startPageTemplateRule();break;case"-epubx-define":s.startDefineRule();break;case"-epubx-viewport":s.startViewportRule()}this.ruleStack.push(u),s.startRuleBody();continue}break;case"-adapt-footnote-area":switch(r.consume(),l=r.token(),l.type){case On.O_BRC:r.consume(),s.startFootnoteRule(null),this.ruleStack.push(u),s.startRuleBody();continue;case On.COL_COL:if(r.consume(),l=r.token(),l.type==On.IDENT&&r.nthToken(1).type==On.O_BRC){u=l.text,r.consume(),r.consume(),s.startFootnoteRule(u),this.ruleStack.push("-adapt-footnote-area"),s.startRuleBody();continue}}break;case"-epubx-region":r.consume(),s.startRegionRule(),this.regionRule=!0,this.actions=Ji;continue;case"page":r.consume(),s.startPageRule(),this.pageRule=!0,this.actions=Qi;continue;case"top-left-corner":case"top-left":case"top-center":case"top-right":case"top-right-corner":case"right-top":case"right-middle":case"right-bottom":case"bottom-right-corner":case"bottom-right":case"bottom-center":case"bottom-left":case"bottom-left-corner":case"left-bottom":case"left-middle":case"left-top":if(r.consume(),l=r.token(),l.type==On.O_BRC){r.consume(),s.startPageMarginBoxRule(u),this.ruleStack.push(u),s.startRuleBody();continue}break;case"-epubx-when":r.consume(),this.propName=null,this.exprContext=ho.WHEN,this.actions=to,a.push("{");continue;case"media":r.consume(),this.propName=null,this.exprContext=ho.MEDIA,this.actions=to,a.push("{");continue;case"-epubx-flow":if(r.nthToken(1).type==On.IDENT&&r.nthToken(2).type==On.O_BRC){s.startFlowRule(r.nthToken(1).text),r.consume(),r.consume(),r.consume(),this.ruleStack.push(u),s.startRuleBody();continue}break;case"-epubx-page-master":case"-epubx-partition":case"-epubx-partition-group":{r.consume(),l=r.token();let e=null,t=null;const n=[];for(l.type==On.IDENT&&(e=l.text,r.consume(),l=r.token()),l.type==On.COLON&&r.nthToken(1).type==On.IDENT&&(t=r.nthToken(1).text,r.consume(),r.consume(),l=r.token());l.type==On.FUNC&&"class"==l.text.toLowerCase()&&r.nthToken(1).type==On.IDENT&&r.nthToken(2).type==On.C_PAR;)n.push(r.nthToken(1).text),r.consume(),r.consume(),r.consume(),l=r.token();if(l.type==On.O_BRC){switch(r.consume(),u){case"-epubx-page-master":s.startPageMasterRule(e,t,n);break;case"-epubx-partition":s.startPartitionRule(e,t,n);break;case"-epubx-partition-group":s.startPartitionGroupRule(e,t,n)}this.ruleStack.push(u),s.startRuleBody();continue}break}case"":s.error(`E_CSS_UNEXPECTED_AT${u}`,l),this.actions=so;continue;default:s.error(`E_CSS_AT_UNKNOWN ${u}`,l),this.actions=io;continue}s.error(`E_CSS_AT_SYNTAX ${u}`,l),this.actions=io;continue;case ao.ERROR_PUSH:if(t||n)return!0;this.errorBrackets.push(l.type+1),r.consume();continue;case ao.ERROR_POP_DECL:if(t||n)return!0;if(0==this.errorBrackets.length){this.actions=Ki;continue}case ao.ERROR_POP:this.errorBrackets.length>0&&this.errorBrackets[this.errorBrackets.length-1]==l.type&&this.errorBrackets.pop(),0==this.errorBrackets.length&&l.type==On.C_BRC&&(this.actions=Ki),r.consume();continue;case ao.ERROR_SEMICOL:if(t||n)return!0;0==this.errorBrackets.length&&(this.actions=Ki),r.consume();continue;case ao.DONE:return o&&(r.consume(),s.endFuncWithSelector()),!0;default:if(t||n)return!0;if(i)return!!this.exprStackReduce(On.C_PAR,l)&&(this.result=a.pop(),!0);if(o)return l.type==On.INVALID?s.error(l.text,l):s.error("E_CSS_SYNTAX",l),!1;if(this.actions===eo&&r.hasMark()){r.reset(),this.actions=Ji,s.startSelectorRule();continue}if(this.actions!==io&&this.actions!==so&&this.actions!==oo){l.type==On.INVALID?s.error(l.text,l):s.error("E_CSS_SYNTAX",l),this.isInsidePropertyOnlyRule()?this.actions=oo:this.actions=so;continue}r.consume();continue}return!1}}class uo extends $i{constructor(e){super(null),this.scope=e}error(e,t){throw new Error(e)}getScope(){return this.scope}}function po(e,t,n,i,o){const s=pi("parseStylesheet"),r=new co(Ki,e,t,n);let a=null;return o&&(a=function(e,t,n){const i=new co(to,e,t,n);return i.runParser(Number.POSITIVE_INFINITY,!1,!1,!0,!1),i.result}(new hi(o,t),t,n)),a=r.makeCondition(i,a&&a.toExpr()),a&&(t.startMediaRule(a),t.startRuleBody()),s.loop(()=>{for(;!r.runParser(100,!1,!1,!1,!1);){if(r.importReady){const e=O(r.importURL,n);r.importCondition&&(t.startMediaRule(r.importCondition),t.startRuleBody());const i=pi("parseStylesheet.import");return go(e,t,null,null).then(()=>{r.importCondition&&t.endRule(),r.importReady=!1,r.importURL=null,r.importCondition=null,i.finish(!0)}),i.result()}const e=s.timeSlice();if(e.isPending)return e}return fi(!1)}).then(()=>{a&&t.endRule(),s.finish(!0)}),s.result()}function fo(e,t,n,i,o){return gi("parseStylesheetFromText",s=>{po(new hi(e,t),t,n,i,o).thenFinish(s)},(t,n)=>{h.warn(n,`Failed to parse stylesheet text: ${e}`),t.finish(!1)})}function go(e,t,n,i){return gi("parseStylesheetFromURL",o=>{Ri(e).then(s=>{s.responseText?fo(s.responseText,t,e,n,i).then(t=>{t||h.warn(`Failed to parse stylesheet from ${e}`),o.finish(!0)}):o.finish(!0)})},(t,n)=>{h.warn(n,"Exception while fetching and parsing:",e),t.finish(!0)})}function mo(e,t,n){const i=new co(eo,t,new uo(e),n);return i.runParser(Number.POSITIVE_INFINITY,!0,!1,!1,!1),i.result}const bo={"z-index":!0,"column-count":!0,"flow-linger":!0,opacity:!0,page:!0,"flow-priority":!0,utilization:!0};function wo(e,t,n){const i=t.evaluate(e);switch(typeof i){case"number":return function(e){return!!bo[e]}(n)?i==Math.round(i)?new It(i):new xt(i):new Tt(i,"px");case"string":return i?mo(t.scope,new hi(i,null),""):wt;case"boolean":return i?Bt._true:Bt._false;case"undefined":return wt}throw new Error("E_UNEXPECTED")}function Eo(e,t,n){return t.isExpr()?wo(e,t.expr,n):t}function yo(e,t,n){return e-=n,0===t?0===e:e%t==0&&e/t>=0}class So{constructor(e){this.matchers=e}matches(){return this.matchers.some(e=>e.matches())}}class No{constructor(e){this.matchers=e}matches(){return this.matchers.every(e=>e.matches())}}class vo{constructor(e,t,n){this.elementOffset=e,this.a=t,this.b=n}static registerFragmentIndex(e,t,n){const i=vo.fragmentIndices;(!i[e]||i[e].priority<=n)&&(i[e]={fragmentIndex:t,priority:n})}static clearFragmentIndices(){vo.fragmentIndices={}}matches(){const e=vo.fragmentIndices[this.elementOffset];return null!=e&&null!=e.fragmentIndex&&yo(e.fragmentIndex,this.a,this.b)}}vo.fragmentIndices={};class Co{static buildViewConditionMatcher(e,t){const n=t.split("_");return"NFS"==n[0]?new vo(e,parseInt(n[1],10),parseInt(n[2],10)):null}static buildAllMatcher(e){return new No(e)}static buildAnyMatcher(e){return new So(e)}}const To={azimuth:!0,"border-collapse":!0,"border-spacing":!0,"caption-side":!0,"clip-rule":!0,color:!0,"color-interpolation":!0,"color-rendering":!0,cursor:!0,direction:!0,elevation:!0,"empty-cells":!0,fill:!0,"fill-opacity":!0,"fill-rule":!0,"font-kerning":!0,"font-size":!0,"font-size-adjust":!0,"font-family":!0,"font-feature-settings":!0,"font-style":!0,"font-stretch":!0,"font-variant":!0,"font-weight":!0,"glyph-orientation-vertical":!0,hyphens:!0,"hyphenate-character":!0,"hyphenate-limit-chars":!0,"hyphenate-limit-last":!0,"image-rendering":!0,"image-resolution":!0,"letter-spacing":!0,"line-break":!0,"line-height":!0,"list-style-image":!0,"list-style-position":!0,"list-style-type":!0,marker:!0,"marker-end":!0,"marker-mid":!0,"marker-start":!0,orphans:!0,"overflow-wrap":!0,"paint-order":!0,"pointer-events":!0,"pitch-range":!0,quotes:!0,richness:!0,"ruby-align":!0,"ruby-position":!0,"speak-header":!0,"speak-numeral":!0,"speak-punctuation":!0,"speech-rate":!0,"shape-rendering":!0,stress:!0,stroke:!0,"stroke-dasharray":!0,"stroke-dashoffset":!0,"stroke-linecap":!0,"stroke-linejoin":!0,"stroke-miterlimit":!0,"stroke-opacity":!0,"stroke-width":!0,"tab-size":!0,"text-align":!0,"text-align-last":!0,"text-anchor":!0,"text-decoration-skip":!0,"text-emphasis-color":!0,"text-emphasis-position":!0,"text-emphasis-style":!0,"text-combine-upright":!0,"text-indent":!0,"text-justify":!0,"text-rendering":!0,"text-size-adjust":!0,"text-transform":!0,"text-underline-position":!0,visibility:!0,"voice-family":!0,volume:!0,"white-space":!0,widows:!0,"word-break":!0,"word-spacing":!0,"word-wrap":!0,"writing-mode":!0},xo=["box-decoration-break","image-resolution","orphans","widows"];const Io={"http://www.idpf.org/2007/ops":!0,"http://www.w3.org/1999/xhtml":!0,"http://www.w3.org/2000/svg":!0},Po=["margin-%","padding-%","border-%-width","border-%-style","border-%-color","%"],Ao=["max-%","min-%","%"],Oo=(()=>{const e=["left","right","top","bottom"],t={width:!0,height:!0,"max-width":!0,"max-height":!0,"min-width":!0,"min-height":!0};for(let n=0;n<Po.length;n++)for(let i=0;i<e.length;i++)t[Po[n].replace("%",e[i])]=!0;return t})();function Ro(e,t){const n={};for(const t of Po)for(const i in e){const o=t.replace("%",i),s=t.replace("%",e[i]);n[o]=s,n[s]=o}for(const e of Ao)for(const i in t){const o=e.replace("%",i),s=e.replace("%",t[i]);n[o]=s,n[s]=o}return n}const Lo=Ro({"block-start":"right","block-end":"left","inline-start":"top","inline-end":"bottom"},{"block-size":"width","inline-size":"height"}),ko=Ro({"block-start":"top","block-end":"bottom","inline-start":"left","inline-end":"right"},{"block-size":"height","inline-size":"width"}),Fo=Ro({"block-start":"right","block-end":"left","inline-start":"bottom","inline-end":"top"},{"block-size":"width","inline-size":"height"}),Do=Ro({"block-start":"top","block-end":"bottom","inline-start":"right","inline-end":"left"},{"block-size":"height","inline-size":"width"});class _o{constructor(e,t){this.value=e,this.priority=t}getBaseValue(){return this}filterValue(e){const t=this.value.visit(e);return t===this.value?this:new _o(t,this.priority)}increaseSpecificity(e){return 0==e?this:new _o(this.value,this.priority+e)}evaluate(e,t){return Eo(e,this.value,t)}isEnabled(e){return!0}}class Bo extends _o{constructor(e,t,n){super(e,t),this.condition=n}getBaseValue(){return new _o(this.value,this.priority)}filterValue(e){const t=this.value.visit(e);return t===this.value?this:new Bo(t,this.priority,this.condition)}increaseSpecificity(e){return 0==e?this:new Bo(this.value,this.priority+e,this.condition)}isEnabled(e){return!!this.condition.evaluate(e)}}function Mo(e,t,n){return(null==t||n.priority>t.priority)&&n.isEnabled(e)?n.getBaseValue():t}const Uo={"region-id":!0,"fragment-selector-id":!0};function zo(e){return!!Uo[e]}function Vo(e){return"_"==e.charAt(0)}function Ho(e){return"_"!=e.charAt(0)&&!Uo[e]}function Go(e){return!!To[e]}function $o(e,t){return e[t]}function Wo(e,t,n){n?e[t]=n:delete e[t]}function Xo(e,t){return e[t]}function jo(e,t){let n=e[t];return n||(n={},e[t]=n),n}const Ko=e=>{let t=e._viewConditionalStyles;return t||(t=[],e._viewConditionalStyles=t),t};function Yo(e,t){return e[t]}function qo(e,t){let n=e[t];return n||(n=[],e[t]=n),n}function Zo(e,t,n,i,o,s,r){if([{id:o,styleKey:"_pseudos"},{id:s,styleKey:"_regions"}].forEach(e=>{if(e.id){const n=jo(t,e.styleKey);(t=n[e.id])||(t={},n[e.id]=t)}}),r){const e=Ko(t);t={},e.push({styles:t,matcher:r})}for(const o in n)if(!Vo(o))if(zo(o)){const e=Yo(n,o),i=qo(t,o);Array.prototype.push.apply(i,e)}else{const s=$o(n,o).increaseSpecificity(i),r=$o(t,o);Wo(t,o,Mo(e,r,s))}}function Qo(e,t){if(e.length>0){e.sort((e,t)=>t.getPriority()-e.getPriority());let n=null;for(let i=e.length-1;i>=0;i--)n=e[i],n.chained=t,t=n;return n}return t}class Jo extends gt{constructor(e,t){super(),this.props=e,this.context=t,this.propName=""}setPropName(e){this.propName=e}getFontSize(){const e=$o(this.props,"font-size").value;if(!function(e){switch(e.toLowerCase()){case"px":case"in":case"pt":case"pc":case"cm":case"mm":case"q":return!0;default:return!1}}(e.unit))throw new Error("Unexpected state");return e.num*Ie[e.unit]}visitNumeric(e){if(this.context,"font-size"===this.propName)return function(e,t,n){const i=(e=es(e,t,n)).unit,o=e.num;return"px"===i?e:new Tt("%"===i?o/100*t:o*n.queryUnitSize(i,!1),"px")}(e,this.getFontSize(),this.context);if("em"==e.unit||"ex"==e.unit||"rem"==e.unit)return es(e,this.getFontSize(),this.context);if("%"==e.unit){if("line-height"===this.propName)return e;const t=this.propName.match(/height|^(top|bottom)$/)?"vh":"vw";return new Tt(e.num,t)}return e}visitExpr(e){return"font-size"==this.propName?Eo(this.context,e,this.propName).visit(this):e}}function es(e,t,n){const i=e.unit,o=e.num;if("em"===i||"ex"===i){const e=Ie[i]/Ie.em;return new Tt(o*e*t,"px")}return"rem"===i?new Tt(o*n.fontSize(),"px"):e}class ts{apply(e){}mergeWith(e){return new is([this,e])}clone(){return this}}class ns extends ts{constructor(e){super(),this.conditionItem=e}apply(e){e.pushConditionItem(this.conditionItem.fresh(e))}}class is extends ts{constructor(e){super(),this.list=e}apply(e){for(let t=0;t<this.list.length;t++)this.list[t].apply(e)}mergeWith(e){return this.list.push(e),this}clone(){return new is([].concat(this.list))}}class os extends ts{constructor(e,t,n,i,o){super(),this.style=e,this.specificity=t,this.pseudoelement=n,this.regionId=i,this.viewConditionId=o}apply(e){Zo(e.context,e.currentStyle,this.style,this.specificity,this.pseudoelement,this.regionId,e.buildViewConditionMatcher(this.viewConditionId))}}class ss extends ts{constructor(){super(),this.chained=null}apply(e){this.chained.apply(e)}getPriority(){return 0}makePrimary(e){return!1}}class rs extends ss{constructor(e){super(),this.className=e}apply(e){e.currentClassNames.includes(this.className)&&this.chained.apply(e)}getPriority(){return 10}makePrimary(e){return this.chained&&e.insertInTable(e.classes,this.className,this.chained),!0}}class as extends ss{constructor(e){super(),this.id=e}apply(e){e.currentId!=this.id&&e.currentXmlId!=this.id||this.chained.apply(e)}getPriority(){return 11}makePrimary(e){return this.chained&&e.insertInTable(e.ids,this.id,this.chained),!0}}class ls extends ss{constructor(e){super(),this.localName=e}apply(e){e.currentLocalName==this.localName&&this.chained.apply(e)}getPriority(){return 8}makePrimary(e){return this.chained&&e.insertInTable(e.tags,this.localName,this.chained),!0}}class hs extends ss{constructor(e,t){super(),this.ns=e,this.localName=t}apply(e){e.currentLocalName==this.localName&&e.currentNamespace==this.ns&&this.chained.apply(e)}getPriority(){return 8}makePrimary(e){if(this.chained){let t=e.nsPrefix[this.ns];t||(t=`ns${e.nsCount++}:`,e.nsPrefix[this.ns]=t);const n=t+this.localName;e.insertInTable(e.nstags,n,this.chained)}return!0}}class cs extends ss{constructor(e){super(),this.epubTypePatt=e}apply(e){const t=e.currentElement;if(t&&"a"==e.currentLocalName){const n=t.getAttribute("href");if(n&&n.match(/^#/)){const i=n.substring(1),o=t.ownerDocument.getElementById(i);if(o){const t=o.getAttributeNS(L.epub,"type");t&&t.match(this.epubTypePatt)&&this.chained.apply(e)}}}}}class us extends ss{constructor(e){super(),this.ns=e}apply(e){e.currentNamespace==this.ns&&this.chained.apply(e)}}class ds extends ss{constructor(e,t){super(),this.ns=e,this.name=t}apply(e){e.currentElement&&e.currentElement.hasAttributeNS(this.ns,this.name)&&this.chained.apply(e)}}class ps extends ss{constructor(e,t,n){super(),this.ns=e,this.name=t,this.value=n}apply(e){e.currentElement&&e.currentElement.getAttributeNS(this.ns,this.name)==this.value&&this.chained.apply(e)}getPriority(){return"type"==this.name&&this.ns==L.epub?9:0}makePrimary(e){return"type"==this.name&&this.ns==L.epub&&(this.chained&&e.insertInTable(e.epubtypes,this.value,this.chained),!0)}}class fs extends ss{constructor(e,t){super(),this.ns=e,this.name=t}apply(e){if(e.currentElement){const t=e.currentElement.getAttributeNS(this.ns,this.name);t&&Io[t]&&this.chained.apply(e)}}getPriority(){return 0}makePrimary(e){return!1}}class gs extends ss{constructor(e,t,n){super(),this.ns=e,this.name=t,this.regexp=n}apply(e){if(e.currentElement){const t=e.currentElement.getAttributeNS(this.ns,this.name);t&&t.match(this.regexp)&&this.chained.apply(e)}}}class ms extends ss{constructor(e){super(),this.langRegExp=e}apply(e){e.lang.match(this.langRegExp)&&this.chained.apply(e)}}class bs extends ss{constructor(){super()}apply(e){e.isFirst&&this.chained.apply(e)}getPriority(){return 6}}class ws extends ss{constructor(){super()}apply(e){e.isRoot&&this.chained.apply(e)}getPriority(){return 12}}class Es extends ss{constructor(e,t){super(),this.a=e,this.b=t}matchANPlusB(e){return yo(e,this.a,this.b)}}class ys extends Es{constructor(e,t){super(e,t)}apply(e){const t=e.currentSiblingTypeCounts[e.currentNamespace][e.currentLocalName];this.matchANPlusB(t)&&this.chained.apply(e)}getPriority(){return 5}}class Ss extends Es{constructor(e,t){super(e,t)}apply(e){let t=e.currentFollowingSiblingOrder;null===t&&(t=e.currentFollowingSiblingOrder=e.currentElement.parentNode.childElementCount-e.currentSiblingOrder+1),this.matchANPlusB(t)&&this.chained.apply(e)}getPriority(){return 4}}class Ns extends Es{constructor(e,t){super(e,t)}apply(e){const t=e.currentFollowingSiblingTypeCounts;if(!t[e.currentNamespace]){let n=e.currentElement;do{const e=n.namespaceURI,i=n.localName;let o=t[e];o||(o=t[e]={}),o[i]=(o[i]||0)+1}while(n=n.nextElementSibling)}this.matchANPlusB(t[e.currentNamespace][e.currentLocalName])&&this.chained.apply(e)}getPriority(){return 4}}class vs extends ss{constructor(){super()}apply(e){let t=e.currentElement.firstChild;for(;t;){switch(t.nodeType){case Node.ELEMENT_NODE:return;case Node.TEXT_NODE:if(t.length>0)return}t=t.nextSibling}this.chained.apply(e)}getPriority(){return 4}}class Cs extends ss{constructor(){super()}apply(e){!1===e.currentElement.disabled&&this.chained.apply(e)}getPriority(){return 5}}class Ts extends ss{constructor(){super()}apply(e){!0===e.currentElement.disabled&&this.chained.apply(e)}getPriority(){return 5}}class xs extends ss{constructor(){super()}apply(e){const t=e.currentElement;!0!==t.selected&&!0!==t.checked||this.chained.apply(e)}getPriority(){return 5}}class Is extends ss{constructor(e){super(),this.condition=e}apply(e){if(e.conditions[this.condition])try{e.dependentConditions.push(this.condition),this.chained.apply(e)}finally{e.dependentConditions.pop()}}getPriority(){return 5}}class Ps extends ts{constructor(){super(),this.applied=!1}apply(e){this.applied=!0}clone(){const e=new Ps;return e.applied=this.applied,e}}class As extends ss{constructor(e){super(),this.checkAppliedAction=new Ps,this.firstAction=Qo(e,this.checkAppliedAction)}apply(e){this.firstAction.apply(e),this.checkAppliedAction.applied||this.chained.apply(e),this.checkAppliedAction.applied=!1}getPriority(){return this.firstAction.getPriority()}}class Os{constructor(e,t,n){this.condition=e,this.viewConditionId=t,this.viewCondition=n}increment(e){e.increment(this.condition,this.viewCondition)}decrement(e){e.decrement(this.condition,this.viewCondition)}buildViewConditionMatcher(e){return e.buildViewConditionMatcher(this.viewConditionId)}}class Rs extends Os{constructor(e,t,n){super(e,t,n)}fresh(e){return new Rs(this.condition,this.viewConditionId,this.buildViewConditionMatcher(e))}push(e,t){return 0==t&&this.increment(e),!1}pop(e,t){return 0==t&&(this.decrement(e),!0)}}class Ls extends Os{constructor(e,t,n){super(e,t,n)}fresh(e){return new Ls(this.condition,this.viewConditionId,this.buildViewConditionMatcher(e))}push(e,t){return 0==t?this.increment(e):1==t&&this.decrement(e),!1}pop(e,t){return 0==t?(this.decrement(e),!0):(1==t&&this.increment(e),!1)}}class ks extends Os{constructor(e,t,n){super(e,t,n),this.fired=!1}fresh(e){return new ks(this.condition,this.viewConditionId,this.buildViewConditionMatcher(e))}push(e,t){return!!this.fired&&(this.decrement(e),!0)}pop(e,t){return this.fired?(this.decrement(e),!0):(0==t&&(this.fired=!0,this.increment(e)),!1)}}class Fs extends Os{constructor(e,t,n){super(e,t,n),this.fired=!1}fresh(e){return new Fs(this.condition,this.viewConditionId,this.buildViewConditionMatcher(e))}push(e,t){return this.fired&&(-1==t?this.increment(e):0==t&&this.decrement(e)),!1}pop(e,t){if(this.fired){if(-1==t)return this.decrement(e),!0;0==t&&this.increment(e)}else 0==t&&(this.fired=!0,this.increment(e));return!1}}class Ds{constructor(e,t){this.afterprop=e,this.element=t}fresh(e){return this}push(e,t){return!1}pop(e,t){return 0==t&&(e.processPseudoelementProps(this.afterprop,this.element),!0)}}class _s{constructor(e){this.lang=e}fresh(e){return this}push(e,t){return!1}pop(e,t){return 0==t&&(e.lang=this.lang,!0)}}class Bs{constructor(e){this.oldQuotes=e}fresh(e){return this}push(e,t){return!1}pop(e,t){return 0==t&&(e.quotes=this.oldQuotes,!0)}}class Ms extends gt{constructor(e){super(),this.element=e}createValueFromString(e,t){switch(t){case"url":return new At(e||"about:invalid");case"string":default:return new St(e||"")}}visitFunc(e){if("attr"!==e.name)return super.visitFunc(e);let t="string",n=null,i=null;if(e.values[0]instanceof Rt){const i=e.values[0].values;i.length>=2&&(t=i[1].stringValue()),n=i[0].stringValue()}else n=e.values[0].stringValue();return i=e.values.length>1?this.createValueFromString(e.values[1].stringValue(),t):this.createValueFromString(null,t),this.element&&this.element.hasAttribute(n)?this.createValueFromString(this.element.getAttribute(n),t):i}}class Us extends gt{constructor(e,t,n){super(),this.cascade=e,this.element=t,this.counterResolver=n}visitIdent(e){const t=this.cascade,n=t.quotes,i=Math.floor(n.length/2)-1;switch(e.name){case"open-quote":{const e=n[2*Math.min(i,t.quoteDepth)];return t.quoteDepth++,e}case"close-quote":return t.quoteDepth>0&&t.quoteDepth--,n[2*Math.min(i,t.quoteDepth)+1];case"no-open-quote":return t.quoteDepth++,new St("");case"no-close-quote":return t.quoteDepth>0&&t.quoteDepth--,new St("")}return e}format(e,t){let n,i=!1,o=!1;null!=(n=t.match(/^upper-(.*)/))?(i=!0,t=n[1]):null!=(n=t.match(/^lower-(.*)/))&&(o=!0,t=n[1]);let s="";return zs[t]?s=function(e,t){if(t>e[0]||t<=0||t!=Math.round(t))return"";let n="";for(let i=1;i<e.length;i+=2){const o=e[i];let s=Math.floor(t/o);if(s>20)return"";for(t-=s*o;s>0;)n+=e[i+1],s--}return n}(zs[t],e):Vs[t]?s=function(e,t){if(t<=0||t!=Math.round(t))return"";const n=function(e){const t=[];let n=0;for(;n<e.length;)if("-"==e.substr(n+1,1)){const i=e.charCodeAt(n),o=e.charCodeAt(n+2);n+=3;for(let e=i;e<=o;e++)t.push(String.fromCharCode(e))}else t.push(e.substr(n++,1));return t}(e);let i="";do{const e=--t%n.length;i=n[e]+i,t=(t-e)/n.length}while(t>0);return i}(Vs[t],e):null!=Hs[t]?s=Hs[t]:"decimal-leading-zero"==t?(s=`${e}`,1==s.length&&(s=`0${s}`)):s="cjk-ideographic"==t||"trad-chinese-informal"==t?function(e,t){if(e>9999||e<-9999)return`${e}`;if(0==e)return t.digits.charAt(0);const n=new H;if(e<0&&(n.append(t.negative),e=-e),e<10)n.append(t.digits.charAt(e));else if(!t.formal&&e<=19)n.append(t.markers.charAt(0)),0!=e&&n.append(t.digits.charAt(e-10));else{const i=Math.floor(e/1e3);i&&(n.append(t.digits.charAt(i)),n.append(t.markers.charAt(2)));const o=Math.floor(e/100)%10;o&&(n.append(t.digits.charAt(o)),n.append(t.markers.charAt(1)));const s=Math.floor(e/10)%10;s&&(n.append(t.digits.charAt(s)),n.append(t.markers.charAt(0)));const r=e%10;r&&n.append(t.digits.charAt(r))}return n.toString()}(e,Gs):`${e}`,i?s.toUpperCase():o?s.toLowerCase():s}visitFuncCounter(e){const t=e[0].toString(),n=e.length>1?e[1].stringValue():"decimal",i=this.cascade.counters[t];if(i&&i.length){const e=i&&i.length&&i[i.length-1]||0;return new St(this.format(e,n))}{const e=this,i=new Ft(this.counterResolver.getPageCounterVal(t,t=>e.format(t||0,n)));return new Rt([i])}}visitFuncCounters(e){const t=e[0].toString(),n=e[1].stringValue(),i=e.length>2?e[2].stringValue():"decimal",o=this.cascade.counters[t],s=new H;if(o&&o.length)for(let e=0;e<o.length;e++)e>0&&s.append(n),s.append(this.format(o[e],i));const r=this,a=new Ft(this.counterResolver.getPageCountersVal(t,e=>{const t=[];if(e.length)for(let n=0;n<e.length;n++)t.push(r.format(e[n],i));const o=s.toString();return o.length&&t.push(o),t.length?t.join(n):r.format(0,i)}));return new Rt([a])}visitFuncTargetCounter(e){const t=e[0];let n;n=t instanceof At?t.url:t.stringValue();const i=e[1].toString(),o=e.length>2?e[2].stringValue():"decimal",s=this,r=new Ft(this.counterResolver.getTargetCounterVal(n,i,e=>s.format(e||0,o)));return new Rt([r])}visitFuncTargetCounters(e){const t=e[0];let n;n=t instanceof At?t.url:t.stringValue();const i=e[1].toString(),o=e[2].stringValue(),s=e.length>3?e[3].stringValue():"decimal",r=this,a=new Ft(this.counterResolver.getTargetCountersVal(n,i,e=>{const t=e.map(e=>r.format(e,s));return t.length?t.join(o):r.format(0,s)}));return new Rt([a])}visitFunc(e){switch(e.name){case"counter":if(e.values.length<=2)return this.visitFuncCounter(e.values);break;case"counters":if(e.values.length<=3)return this.visitFuncCounters(e.values);break;case"target-counter":if(e.values.length<=3)return this.visitFuncTargetCounter(e.values);break;case"target-counters":if(e.values.length<=4)return this.visitFuncTargetCounters(e.values)}return h.warn("E_CSS_CONTENT_PROP:",e.toString()),new St("")}}const zs={roman:[4999,1e3,"M",900,"CM",500,"D",400,"CD",100,"C",90,"XC",50,"L",40,"XL",10,"X",9,"IX",5,"V",4,"IV",1,"I"],armenian:[9999,9e3,"ք",8e3,"փ",7e3,"ւ",6e3,"ց",5e3,"ր",4e3,"տ",3e3,"վ",2e3,"ս",1e3,"ռ",900,"ջ",800,"պ",700,"չ",600,"ո",500,"շ",400,"ն",300,"յ",200,"մ",100,"ճ",90,"ղ",80,"ձ",70,"հ",60,"կ",50,"ծ",40,"խ",30,"լ",20,"ի",10,"ժ",9,"թ",8,"ը",7,"է",6,"զ",5,"ե",4,"դ",3,"գ",2,"բ",1,"ա"],georgian:[19999,1e4,"ჵ",9e3,"ჰ",8e3,"ჯ",7e3,"ჴ",6e3,"ხ",5e3,"ჭ",4e3,"წ",3e3,"ძ",2e3,"ც",1e3,"ჩ",900,"შ",800,"ყ",700,"ღ",600,"ქ",500,"ფ",400,"ჳ",300,"ტ",200,"ს",100,"რ",90,"ჟ",80,"პ",70,"ო",60,"ჲ",50,"ნ",40,"მ",30,"ლ",20,"კ",10,"ი",9,"თ",8,"ჱ",7,"ზ",6,"ვ",5,"ე",4,"დ",3,"გ",2,"ბ",1,"ა"],hebrew:[999,400,"ת",300,"ש",200,"ר",100,"ק",90,"צ",80,"פ",70,"ע",60,"ס",50,"נ",40,"מ",30,"ל",20,"כ",19,"יט",18,"יח",17,"יז",16,"טז",15,"טו",10,"י",9,"ט",8,"ח",7,"ז",6,"ו",5,"ה",4,"ד",3,"ג",2,"ב",1,"א"]},Vs={latin:"a-z",alpha:"a-z",greek:"α-ρσ-ω",russian:"а-ик-щэ-я"},Hs={square:"■",disc:"•",circle:"◦",none:""};const Gs={formal:!1,digits:"零一二三四五六七八九",markers:"十百千",negative:"負"};const $s=1/1048576;function Ws(e,t){for(const n in e)t[n]=e[n].clone()}class Xs{constructor(){this.nsCount=0,this.nsPrefix={},this.tags={},this.nstags={},this.epubtypes={},this.classes={},this.ids={},this.pagetypes={},this.order=0}clone(){const e=new Xs;e.nsCount=this.nsCount;for(const t in this.nsPrefix)e.nsPrefix[t]=this.nsPrefix[t];return Ws(this.tags,e.tags),Ws(this.nstags,e.nstags),Ws(this.epubtypes,e.epubtypes),Ws(this.classes,e.classes),Ws(this.ids,e.ids),Ws(this.pagetypes,e.pagetypes),e.order=this.order,e}insertInTable(e,t,n){const i=e[t];i&&(n=i.mergeWith(n)),e[t]=n}createInstance(e,t,n,i){return new js(this,e,t,n,i)}nextOrder(){return this.order+=$s}}class js{constructor(e,t,n,i,o){this.context=t,this.counterListener=n,this.counterResolver=i,this.stack=[[],[]],this.conditions={},this.currentElement=null,this.currentElementOffset=null,this.currentStyle=null,this.currentClassNames=null,this.currentLocalName="",this.currentNamespace="",this.currentId="",this.currentXmlId="",this.currentNSTag="",this.currentEpubTypes=null,this.currentPageType=null,this.isFirst=!0,this.isRoot=!0,this.counters={},this.counterScoping=[{}],this.quoteDepth=0,this.lang="",this.siblingOrderStack=[0],this.currentSiblingOrder=0,this.siblingTypeCountsStack=[{}],this.currentFollowingSiblingOrder=null,this.followingSiblingTypeCountsStack=[{}],this.viewConditions={},this.dependentConditions=[],this.code=e,this.quotes=[new St("“"),new St("”"),new St("‘"),new St("’")],this.currentSiblingTypeCounts=this.siblingTypeCountsStack[0],this.followingSiblingOrderStack=[this.currentFollowingSiblingOrder],this.currentFollowingSiblingTypeCounts=this.siblingTypeCountsStack[0]}pushConditionItem(e){this.stack[this.stack.length-1].push(e)}increment(e,t){this.conditions[e]=(this.conditions[e]||0)+1,t&&(this.viewConditions[e]?this.viewConditions[e].push(t):this.viewConditions[e]=[t])}decrement(e,t){this.conditions[e]--,this.viewConditions[e]&&(this.viewConditions[e]=this.viewConditions[e].filter(e=>e!==t),0===this.viewConditions[e].length&&delete this.viewConditions[e])}buildViewConditionMatcher(e){let t=null;e&&(this.currentElementOffset,t=Co.buildViewConditionMatcher(this.currentElementOffset,e));const n=this.dependentConditions.map(e=>{const t=this.viewConditions[e];return t&&t.length>0?1===t.length?t[0]:Co.buildAnyMatcher([].concat(t)):null}).filter(e=>e);return n.length<=0?t:null===t?1===n.length?n[0]:Co.buildAllMatcher(n):Co.buildAllMatcher([t].concat(n))}applyAction(e,t){const n=e[t];n&&n.apply(this)}pushRule(e,t,n){this.currentElement=null,this.currentElementOffset=null,this.currentStyle=n,this.currentNamespace="",this.currentLocalName="",this.currentId="",this.currentXmlId="",this.currentClassNames=e,this.currentNSTag="",this.currentEpubTypes=Ks,this.currentPageType=t,this.applyActions()}defineCounter(e,t){this.counters[e]?this.counters[e].push(t):this.counters[e]=[t];let n=this.counterScoping[this.counterScoping.length-1];n||(n={},this.counterScoping[this.counterScoping.length-1]=n),n[e]=!0}pushCounters(e){let t=Bt.inline;const n=e.display;n&&(t=n.evaluate(this.context));let i=null,o=null,s=null;const r=e["counter-reset"];if(r){const e=r.evaluate(this.context);e&&(i=En(e,!0))}const a=e["counter-set"];if(a){const e=a.evaluate(this.context);e&&(s=En(e,!1))}const l=e["counter-increment"];if(l){const e=l.evaluate(this.context);e&&(o=En(e,!1))}if("ol"!=this.currentLocalName&&"ul"!=this.currentLocalName||this.currentNamespace!=L.XHTML||(i||(i={}),i["ua-list-item"]=0),t===Bt.list_item&&(o||(o={}),o["ua-list-item"]=1),i)for(const e in i)this.defineCounter(e,i[e]);if(s)for(const e in s)if(this.counters[e]){const t=this.counters[e];t[t.length-1]=s[e]}else this.defineCounter(e,s[e]);if(o)for(const e in o){this.counters[e]||this.defineCounter(e,0);const t=this.counters[e];t[t.length-1]+=o[e]}if(t===Bt.list_item){const t=this.counters["ua-list-item"],n=t[t.length-1];e["ua-list-item-count"]=new _o(new xt(n),0)}this.counterScoping.push(null)}popCounters(){const e=this.counterScoping.pop();if(e)for(const t in e){const e=this.counters[t];e&&(1==e.length?delete this.counters[t]:e.pop())}}processPseudoelementProps(e,t){this.pushCounters(e),e.content&&(e.content=e.content.filterValue(new Us(this,t,this.counterResolver))),this.popCounters()}pushElement(e,t,n){this.currentPageType=null,this.currentElement=e,this.currentElementOffset=n,this.currentStyle=t,this.currentNamespace=e.namespaceURI,this.currentLocalName=e.localName;const i=this.code.nsPrefix[this.currentNamespace];this.currentNSTag=i?i+this.currentLocalName:"",this.currentId=e.getAttribute("id"),this.currentXmlId=e.getAttributeNS(L.XML,"id");const o=e.getAttribute("class");this.currentClassNames=o?o.split(/\s+/):Ks;const s=e.getAttributeNS(L.epub,"type");if(this.currentEpubTypes=s?s.split(/\s+/):Ks,"style"==this.currentLocalName&&this.currentNamespace==L.FB2){const t=e.getAttribute("name")||"";this.currentClassNames=[t]}const r=V(e);r&&(this.stack[this.stack.length-1].push(new _s(this.lang)),this.lang=r.toLowerCase());const a=this.isRoot,l=this.siblingOrderStack;this.currentSiblingOrder=++l[l.length-1],l.push(0);const h=this.siblingTypeCountsStack,c=this.currentSiblingTypeCounts=h[h.length-1];let u=c[this.currentNamespace];u||(u=c[this.currentNamespace]={}),u[this.currentLocalName]=(u[this.currentLocalName]||0)+1,h.push({});const d=this.followingSiblingOrderStack;null!==d[d.length-1]?this.currentFollowingSiblingOrder=--d[d.length-1]:this.currentFollowingSiblingOrder=null,d.push(null);const p=this.followingSiblingTypeCountsStack,f=this.currentFollowingSiblingTypeCounts=p[p.length-1];f&&f[this.currentNamespace]&&f[this.currentNamespace][this.currentLocalName]--,p.push({}),this.applyActions(),this.applyAttrFilter(e);const g=t.quotes;let m=null;if(g){const e=g.evaluate(this.context);e&&(m=new Bs(this.quotes),e===Bt.none?this.quotes=[new St(""),new St("")]:e instanceof Rt&&(this.quotes=e.values))}this.pushCounters(this.currentStyle);const b=this.currentId||this.currentXmlId||e.getAttribute("name")||"";if(a||b){const e={};Object.keys(this.counters).forEach(t=>{e[t]=Array.from(this.counters[t])}),this.counterListener.countersOfId(b,e)}const w=Xo(this.currentStyle,"_pseudos");if(w){let t=!0;for(const n of Ys){n||(t=!1);const i=w[n];i&&(t?this.processPseudoelementProps(i,e):this.stack[this.stack.length-2].push(new Ds(i,e)))}}m&&this.stack[this.stack.length-2].push(m)}applyAttrFilterInner(e,t){for(const n in t)Ho(n)&&(t[n]=t[n].filterValue(e))}applyAttrFilter(e){const t=new Ms(e),n=this.currentStyle,i=Xo(n,"_pseudos");for(const e in i)this.applyAttrFilterInner(t,i[e]);this.applyAttrFilterInner(t,n)}applyActions(){let e;for(e=0;e<this.currentClassNames.length;e++)this.applyAction(this.code.classes,this.currentClassNames[e]);for(e=0;e<this.currentEpubTypes.length;e++)this.applyAction(this.code.epubtypes,this.currentEpubTypes[e]);this.applyAction(this.code.ids,this.currentId),this.applyAction(this.code.tags,this.currentLocalName),""!=this.currentLocalName&&this.applyAction(this.code.tags,"*"),this.applyAction(this.code.nstags,this.currentNSTag),null!==this.currentPageType&&(this.applyAction(this.code.pagetypes,this.currentPageType),this.applyAction(this.code.pagetypes,"*")),this.currentElement=null,this.currentDoc=null,this.stack.push([]);for(let t=1;t>=-1;--t){const n=this.stack[this.stack.length-t-2];for(e=0;e<n.length;)n[e].push(this,t)?n.splice(e,1):e++}this.isFirst=!0,this.isRoot=!1}pop(){for(let e=1;e>=-1;--e){const t=this.stack[this.stack.length-e-2];let n=0;for(;n<t.length;)t[n].pop(this,e)?t.splice(n,1):n++}this.stack.pop(),this.isFirst=!1}popRule(){this.pop()}popElement(e){this.siblingOrderStack.pop(),this.siblingTypeCountsStack.pop(),this.followingSiblingOrderStack.pop(),this.followingSiblingTypeCountsStack.pop(),this.pop(),this.popCounters()}}const Ks=[],Ys=["before","transclusion-before","footnote-call","footnote-marker","inner","first-letter","first-line","","transclusion-after","after"];var qs;!function(e){e[e.TOP=0]="TOP",e[e.SELECTOR=1]="SELECTOR",e[e.RULE=2]="RULE"}(qs||(qs={}));let Zs=null;class Qs extends ji{constructor(e,t,n,i,o,s,r){super(e,t,r),this.condition=n,this.regionId=o,this.validatorSet=s,this.chain=null,this.specificity=0,this.elementStyle=null,this.conditionCount=0,this.pseudoelement=null,this.footnoteContent=!1,this.viewConditionId=null,this.cascade=i?i.cascade:Zs?Zs.clone():new Xs,this.state=qs.TOP}insertNonPrimary(e){this.cascade.insertInTable(this.cascade.tags,"*",e)}processChain(e){const t=Qo(this.chain,e);t!==e&&t.makePrimary(this.cascade)||this.insertNonPrimary(t)}isInsideSelectorRule(e){return this.state!=qs.TOP&&(this.reportAndSkip(e),!0)}tagSelector(e,t){(t||e)&&(this.specificity+=1,t&&e?this.chain.push(new hs(e,t.toLowerCase())):t?this.chain.push(new ls(t.toLowerCase())):this.chain.push(new us(e)))}classSelector(e){if(this.pseudoelement)return h.warn(`::${this.pseudoelement}`,`followed by .${e}`),void this.chain.push(new Is(""));this.specificity+=256,this.chain.push(new rs(e))}pseudoclassSelector(e,t){if(this.pseudoelement)return h.warn(`::${this.pseudoelement}`,`followed by :${e}`),void this.chain.push(new Is(""));switch(e.toLowerCase()){case"enabled":this.chain.push(new Cs);break;case"disabled":this.chain.push(new Ts);break;case"checked":this.chain.push(new xs);break;case"root":this.chain.push(new ws);break;case"link":this.chain.push(new ls("a")),this.chain.push(new ds("","href"));break;case"-adapt-href-epub-type":case"href-epub-type":if(t&&1==t.length&&"string"==typeof t[0]){const e=t[0],n=new RegExp(`(^|s)${Y(e)}($|s)`);this.chain.push(new cs(n))}else this.chain.push(new Is(""));break;case"-adapt-footnote-content":case"footnote-content":this.footnoteContent=!0;break;case"visited":case"active":case"hover":case"focus":this.chain.push(new Is(""));break;case"lang":if(t&&1==t.length&&"string"==typeof t[0]){const e=t[0];this.chain.push(new ms(new RegExp(`^${Y(e.toLowerCase())}($|-)`)))}else this.chain.push(new Is(""));break;case"nth-child":case"nth-last-child":case"nth-of-type":case"nth-last-of-type":{const n=Js[e.toLowerCase()];t&&2==t.length?this.chain.push(new n(t[0],t[1])):this.chain.push(new Is(""));break}case"first-child":this.chain.push(new bs);break;case"last-child":this.chain.push(new Ss(0,1));break;case"first-of-type":this.chain.push(new ys(0,1));break;case"last-of-type":this.chain.push(new Ns(0,1));break;case"only-child":this.chain.push(new bs),this.chain.push(new Ss(0,1));break;case"only-of-type":this.chain.push(new ys(0,1)),this.chain.push(new Ns(0,1));break;case"empty":this.chain.push(new vs);break;case"before":case"after":case"first-line":case"first-letter":return void this.pseudoelementSelector(e,t);default:h.warn(`unknown pseudo-class selector: ${e}`),this.chain.push(new Is(""))}this.specificity+=256}pseudoelementSelector(e,t){switch(e){case"before":case"after":case"first-line":case"first-letter":case"footnote-call":case"footnote-marker":case"inner":case"after-if-continues":this.pseudoelement?(h.warn(`Double pseudoelement ::${this.pseudoelement}::${e}`),this.chain.push(new Is(""))):this.pseudoelement=e;break;case"first-n-lines":if(t&&1==t.length&&"number"==typeof t[0]){const n=Math.round(t[0]);if(n>0&&n==t[0]){this.pseudoelement?(h.warn(`Double pseudoelement ::${this.pseudoelement}::${e}`),this.chain.push(new Is(""))):this.pseudoelement=`first-${n}-lines`;break}}this.chain.push(new Is(""));break;case"nth-fragment":t&&2==t.length?this.viewConditionId=`NFS_${t[0]}_${t[1]}`:this.chain.push(new Is(""));break;default:h.warn(`Unrecognized pseudoelement: ::${e}`),this.chain.push(new Is(""))}this.specificity+=1}idSelector(e){this.specificity+=65536,this.chain.push(new as(e))}attributeSelector(e,t,n,i){let o;switch(this.specificity+=256,t=t.toLowerCase(),i=i||"",n){case On.EOF:o=new ds(e,t);break;case On.EQ:o=new ps(e,t,i);break;case On.TILDE_EQ:o=!i||i.match(/\s/)?new Is(""):new gs(e,t,new RegExp(`(^|\\s)${Y(i)}($|\\s)`));break;case On.BAR_EQ:o=new gs(e,t,new RegExp(`^${Y(i)}($|-)`));break;case On.HAT_EQ:o=i?new gs(e,t,new RegExp(`^${Y(i)}`)):new Is("");break;case On.DOLLAR_EQ:o=i?new gs(e,t,new RegExp(`${Y(i)}$`)):new Is("");break;case On.STAR_EQ:o=i?new gs(e,t,new RegExp(Y(i))):new Is("");break;case On.COL_COL:"supported"==i?o=new fs(e,t):(h.warn("Unsupported :: attr selector op:",i),o=new Is(""));break;default:h.warn("Unsupported attr selector:",n),o=new Is("")}this.chain.push(o)}descendantSelector(){const e=`d${er++}`;this.processChain(new ns(new Rs(e,this.viewConditionId,null))),this.chain=[new Is(e)],this.viewConditionId=null}childSelector(){const e=`c${er++}`;this.processChain(new ns(new Ls(e,this.viewConditionId,null))),this.chain=[new Is(e)],this.viewConditionId=null}adjacentSiblingSelector(){const e=`a${er++}`;this.processChain(new ns(new ks(e,this.viewConditionId,null))),this.chain=[new Is(e)],this.viewConditionId=null}followingSiblingSelector(){const e=`f${er++}`;this.processChain(new ns(new Fs(e,this.viewConditionId,null))),this.chain=[new Is(e)],this.viewConditionId=null}nextSelector(){this.finishChain(),this.pseudoelement=null,this.footnoteContent=!1,this.specificity=0,this.chain=[]}startSelectorRule(){this.isInsideSelectorRule("E_CSS_UNEXPECTED_SELECTOR")||(this.state=qs.SELECTOR,this.elementStyle={},this.pseudoelement=null,this.specificity=0,this.footnoteContent=!1,this.chain=[])}error(e,t){super.error(e,t),this.state==qs.SELECTOR&&(this.state=qs.TOP)}startStylesheet(e){super.startStylesheet(e),this.state=qs.TOP}startRuleBody(){this.finishChain(),super.startRuleBody(),this.state==qs.SELECTOR&&(this.state=qs.TOP)}endRule(){super.endRule(),this.insideSelectorRule=qs.TOP}finishChain(){if(this.chain){const e=this.specificity+this.cascade.nextOrder();this.processChain(this.makeApplyRuleAction(e)),this.chain=null,this.pseudoelement=null,this.viewConditionId=null,this.footnoteContent=!1,this.specificity=0}}makeApplyRuleAction(e){let t=this.regionId;return this.footnoteContent&&(t=t?"xxx-bogus-xxx":"footnote"),new os(this.elementStyle,e,this.pseudoelement,t,this.viewConditionId)}special(e,t){let n;n=this.condition?new Bo(t,0,this.condition):new _o(t,0),qo(this.elementStyle,e).push(n)}property(e,t,n){this.validatorSet.validatePropertyAndHandleShorthand(e,t,n,this)}invalidPropertyValue(e,t){this.report(`E_INVALID_PROPERTY_VALUE ${e}: ${t.toString()}`)}unknownProperty(e,t){this.report(`E_INVALID_PROPERTY ${e}: ${t.toString()}`)}simpleProperty(e,t,n){"display"!=e||t!==Bt.oeb_page_head&&t!==Bt.oeb_page_foot||(this.simpleProperty("flow-options",new Rt([Bt.exclusive,Bt._static]),n),this.simpleProperty("flow-into",t,n),t=Bt.block),p("SIMPLE_PROPERTY").forEach(i=>{const o=i({name:e,value:t,important:n});e=o.name,t=o.value,n=o.important});const i=n?this.getImportantSpecificity():this.getBaseSpecificity(),o=this.condition?new Bo(t,i,this.condition):new _o(t,i);Wo(this.elementStyle,e,o)}finish(){return this.cascade}startFuncWithSelector(e){switch(e){case"not":{const e=new tr(this);e.startSelectorRule(),this.owner.pushHandler(e);break}}}}const Js={"nth-child":class extends Es{constructor(e,t){super(e,t)}apply(e){this.matchANPlusB(e.currentSiblingOrder)&&this.chained.apply(e)}getPriority(){return 5}},"nth-of-type":ys,"nth-last-child":Ss,"nth-last-of-type":Ns};let er=0;class tr extends Qs{constructor(e){super(e.scope,e.owner,e.condition,e,e.regionId,e.validatorSet,!1),this.parent=e,this.parentChain=e.chain}startFuncWithSelector(e){"not"==e&&this.reportAndSkip("E_CSS_UNEXPECTED_NOT")}startRuleBody(){this.reportAndSkip("E_CSS_UNEXPECTED_RULE_BODY")}nextSelector(){this.reportAndSkip("E_CSS_UNEXPECTED_NEXT_SELECTOR")}endFuncWithSelector(){this.chain&&this.chain.length>0&&this.parentChain.push(new As(this.chain)),this.parent.specificity+=this.specificity,this.owner.popHandler()}error(e,t){super.error(e,t),this.owner.popHandler()}}class nr extends ji{constructor(e,t){super(e,t,!1)}property(e,t,n){if(this.scope.values[e])this.error(`E_CSS_NAME_REDEFINED ${e}`,this.getCurrentToken());else{const n=e.match(/height|^(top|bottom)$/)?"vh":"vw",i=new et(this.scope,100,n);this.scope.defineName(e,t.toExpr(this.scope,i))}}}class ir extends ji{constructor(e,t,n,i,o){super(e,t,!1),this.condition=n,this.elementStyle=i,this.validatorSet=o,this.order=0}property(e,t,n){n?h.warn("E_IMPORTANT_NOT_ALLOWED"):this.validatorSet.validatePropertyAndHandleShorthand(e,t,n,this)}invalidPropertyValue(e,t){h.warn("E_INVALID_PROPERTY_VALUE",`${e}:`,t.toString())}unknownProperty(e,t){h.warn("E_INVALID_PROPERTY",`${e}:`,t.toString())}simpleProperty(e,t,n){let i=n?this.getImportantSpecificity():this.getBaseSpecificity();i+=this.order,this.order+=$s;const o=this.condition?new Bo(t,i,this.condition):new _o(t,i);Wo(this.elementStyle,e,o)}}class or extends uo{constructor(e,t){super(e),this.validatorSet=t,this.elementStyle={},this.order=0}property(e,t,n){this.validatorSet.validatePropertyAndHandleShorthand(e,t,n,this)}invalidPropertyValue(e,t){h.warn("E_INVALID_PROPERTY_VALUE",`${e}:`,t.toString())}unknownProperty(e,t){h.warn("E_INVALID_PROPERTY",`${e}:`,t.toString())}simpleProperty(e,t,n){let i=n?Ui:Mi;i+=this.order,this.order+=$s;const o=new _o(t,i);Wo(this.elementStyle,e,o)}}function sr(e,t){const n=Ko(e);n&&n.forEach(e=>{e.matcher.matches()&&t(e.styles)})}function rr(e,t,n){sr(n,n=>{dr(e,n,t)})}function ar(e,t,n,i){const o=new or(e,t),s=new hi(i,o);try{!function(e,t,n){new co(Yi,e,t,n).runParser(Number.POSITIVE_INFINITY,!1,!0,!1,!1)}(s,o,n)}catch(e){h.warn(e,"Style attribute parse error:")}return o.elementStyle}function lr(e,t,n){const i=e["writing-mode"];if(i){const e=i.evaluate(t,"writing-mode");if(e&&e!==Bt.inherit)return e===Bt.vertical_rl}return n}function hr(e,t,n){const i=e.direction;if(i){const e=i.evaluate(t,"direction");if(e&&e!==Bt.inherit)return e===Bt.rtl}return n}function cr(e,t,n,i,o){const s={};for(const t in e)Ho(t)&&(s[t]=$o(e,t));return rr(s,t,e),ur(e,n,i,(e,n)=>{dr(s,n,t),rr(s,t,n)}),s}function ur(e,t,n,i){const o=Xo(e,"_regions");if((t||n)&&o){if(n){const e=["footnote"];t=t?t.concat(e):e}for(const e of t){const t=o[e];t&&i(e,t)}}}function dr(e,t,n){for(const i in t)if(Ho(i)){const o=$o(t,i),s=e[i];e[i]=Mo(n,s,o)}}const pr=(e,t,n,i,o)=>{const s=n?i?Fo:Lo:i?Do:ko;for(const n in e)if(e.hasOwnProperty(n)){const i=e[n];if(!i)continue;const r=s[n];let a;if(r){const t=e[r];if(t&&t.priority>i.priority)continue;a=Oo[r]?r:n}else a=n;t[a]=o(n,i)}};function fr(e,t){const n={};return Object.keys(e).forEach(i=>{const o=n[i]={},s=e[i];Object.keys(s).forEach(e=>{o[e]=s[e].map(e=>{const n=t?e.logical:e.physical,i=t?e.physical:e.logical;return{regexp:new RegExp(`(-?)${n}(-?)`),to:`$1${i}$2`}})})}),n}function gr(e,t,n,i){const o=i[t];if(!o)throw new Error(`unknown writing-mode: ${t}`);const s=o[n||"ltr"];if(!s)throw new Error(`unknown direction: ${n}`);for(const t of s){const n=e.replace(t.regexp,t.to);if(n!==e)return n}return e}const mr={"horizontal-tb":{ltr:[{logical:"inline-start",physical:"left"},{logical:"inline-end",physical:"right"},{logical:"block-start",physical:"top"},{logical:"block-end",physical:"bottom"},{logical:"inline-size",physical:"width"},{logical:"block-size",physical:"height"}],rtl:[{logical:"inline-start",physical:"right"},{logical:"inline-end",physical:"left"},{logical:"block-start",physical:"top"},{logical:"block-end",physical:"bottom"},{logical:"inline-size",physical:"width"},{logical:"block-size",physical:"height"}]},"vertical-rl":{ltr:[{logical:"inline-start",physical:"top"},{logical:"inline-end",physical:"bottom"},{logical:"block-start",physical:"right"},{logical:"block-end",physical:"left"},{logical:"inline-size",physical:"height"},{logical:"block-size",physical:"width"}],rtl:[{logical:"inline-start",physical:"bottom"},{logical:"inline-end",physical:"top"},{logical:"block-start",physical:"right"},{logical:"block-end",physical:"left"},{logical:"inline-size",physical:"height"},{logical:"block-size",physical:"width"}]},"vertical-lr":{ltr:[{logical:"inline-start",physical:"top"},{logical:"inline-end",physical:"bottom"},{logical:"block-start",physical:"left"},{logical:"block-end",physical:"right"},{logical:"inline-size",physical:"height"},{logical:"block-size",physical:"width"}],rtl:[{logical:"inline-start",physical:"bottom"},{logical:"inline-end",physical:"top"},{logical:"block-start",physical:"left"},{logical:"block-end",physical:"right"},{logical:"inline-size",physical:"height"},{logical:"block-size",physical:"width"}]}},br=fr(mr,!0);const wr=fr(mr,!1);var Er;function yr(e,t,n){const i={display:t.style.display,position:t.style.position,width:t.style.width,maxWidth:t.style.maxWidth,minWidth:t.style.minWidth,height:t.style.height,maxHeight:t.style.maxHeight,minHeight:t.style.minHeight},o=t.ownerDocument,s=t.parentNode,r=o.createElement("div");function a(n){return e.getElementComputedStyle(t).getPropertyValue(n)}U(r,"position",i.position),s.insertBefore(r,t),r.appendChild(t),U(t,"width","auto"),U(t,"max-width","none"),U(t,"min-width","0"),U(t,"height","auto"),U(t,"max-height","none"),U(t,"min-height","0");const l=M("writing-mode"),h=(l?a(l[0]):null)||a("writing-mode"),c="vertical-rl"===h||"tb-rl"===h||"vertical-lr"===h||"tb-lr"===h,u=c?"height":"width",d=c?"width":"height";function p(){return U(t,"display","block"),U(t,"position","static"),a(u)}function f(){U(t,"display","inline-block"),U(r,u,"99999999px");const e=a(u);return U(r,u,""),e}function g(){U(t,"display","inline-block"),U(r,u,"0");const e=a(u);return U(r,u,""),e}function m(){const e=p(),t=g(),n=parseFloat(e);if(n<=parseFloat(t))return t;{const t=f();return n<=parseFloat(t)?e:t}}function b(){return a(d)}function w(){throw new Error("Getting fill-available block size is not implemented")}const E={};return n.forEach(e=>{let n;switch(e){case Er.FILL_AVAILABLE_INLINE_SIZE:n=p();break;case Er.MAX_CONTENT_INLINE_SIZE:n=f();break;case Er.MIN_CONTENT_INLINE_SIZE:n=g();break;case Er.FIT_CONTENT_INLINE_SIZE:n=m();break;case Er.FILL_AVAILABLE_BLOCK_SIZE:n=w();break;case Er.MAX_CONTENT_BLOCK_SIZE:case Er.MIN_CONTENT_BLOCK_SIZE:case Er.FIT_CONTENT_BLOCK_SIZE:n=b();break;case Er.FILL_AVAILABLE_WIDTH:n=c?w():p();break;case Er.FILL_AVAILABLE_HEIGHT:n=c?p():w();break;case Er.MAX_CONTENT_WIDTH:n=c?b():f();break;case Er.MAX_CONTENT_HEIGHT:n=c?f():b();break;case Er.MIN_CONTENT_WIDTH:n=c?b():g();break;case Er.MIN_CONTENT_HEIGHT:n=c?g():b();break;case Er.FIT_CONTENT_WIDTH:n=c?b():m();break;case Er.FIT_CONTENT_HEIGHT:n=c?m():b()}E[e]=parseFloat(n),U(t,"position",i.position),U(t,"display",i.display)}),U(t,"width",i.width),U(t,"max-width",i.maxWidth),U(t,"min-width",i.minWidth),U(t,"height",i.height),U(t,"max-height",i.maxHeight),U(t,"min-height",i.minHeight),s.insertBefore(t,r),s.removeChild(r),E}!function(e){e.FILL_AVAILABLE_INLINE_SIZE="fill-available inline size",e.FILL_AVAILABLE_BLOCK_SIZE="fill-available block size",e.FILL_AVAILABLE_WIDTH="fill-available width",e.FILL_AVAILABLE_HEIGHT="fill-available height",e.MAX_CONTENT_INLINE_SIZE="max-content inline size",e.MAX_CONTENT_BLOCK_SIZE="max-content block size",e.MAX_CONTENT_WIDTH="max-content width",e.MAX_CONTENT_HEIGHT="max-content height",e.MIN_CONTENT_INLINE_SIZE="min-content inline size",e.MIN_CONTENT_BLOCK_SIZE="min-content block size",e.MIN_CONTENT_WIDTH="min-content width",e.MIN_CONTENT_HEIGHT="min-content height",e.FIT_CONTENT_INLINE_SIZE="fit-content inline size",e.FIT_CONTENT_BLOCK_SIZE="fit-content block size",e.FIT_CONTENT_WIDTH="fit-content width",e.FIT_CONTENT_HEIGHT="fit-content height"}(Er||(Er={}));var Sr=-1,Nr=1,vr=0;function Cr(e,t,n,i){if(e===t)return e?[[vr,e]]:[];if(null!=n){var o=function(e,t,n){var i="number"==typeof n?{index:n,length:0}:n.oldRange,o="number"==typeof n?null:n.newRange,s=e.length,r=t.length;if(0===i.length&&(null===o||0===o.length)){var a=i.index,l=e.slice(0,a),h=e.slice(a),c=o?o.index:null,u=a+r-s;if((null===c||c===u)&&!(u<0||u>r)){var d=t.slice(0,u);if((g=t.slice(u))===h){var p=Math.min(a,u);if((b=l.slice(0,p))===(E=d.slice(0,p)))return Lr(b,l.slice(p),d.slice(p),h)}}if(null===c||c===a){var f=a,g=(d=t.slice(0,f),t.slice(f));if(d===l){var m=Math.min(s-f,r-f);if((w=h.slice(h.length-m))===(y=g.slice(g.length-m)))return Lr(l,h.slice(0,h.length-m),g.slice(0,g.length-m),w)}}}if(i.length>0&&o&&0===o.length){var b=e.slice(0,i.index),w=e.slice(i.index+i.length);if(!(r<(p=b.length)+(m=w.length))){var E=t.slice(0,p),y=t.slice(r-m);if(b===E&&w===y)return Lr(b,e.slice(p,s-m),t.slice(p,r-m),w)}}return null}(e,t,n);if(o)return o}var s=xr(e,t),r=e.substring(0,s);s=Ir(e=e.substring(s),t=t.substring(s));var a=e.substring(e.length-s),l=function(e,t){var n;if(!e)return[[Nr,t]];if(!t)return[[Sr,e]];var i=e.length>t.length?e:t,o=e.length>t.length?t:e,s=i.indexOf(o);if(-1!==s)return n=[[Nr,i.substring(0,s)],[vr,o],[Nr,i.substring(s+o.length)]],e.length>t.length&&(n[0][0]=n[2][0]=Sr),n;if(1===o.length)return[[Sr,e],[Nr,t]];var r=function(e,t){var n=e.length>t.length?e:t,i=e.length>t.length?t:e;if(n.length<4||2*i.length<n.length)return null;function o(e,t,n){for(var i,o,s,r,a=e.substring(n,n+Math.floor(e.length/4)),l=-1,h="";-1!==(l=t.indexOf(a,l+1));){var c=xr(e.substring(n),t.substring(l)),u=Ir(e.substring(0,n),t.substring(0,l));h.length<u+c&&(h=t.substring(l-u,l)+t.substring(l,l+c),i=e.substring(0,n-u),o=e.substring(n+c),s=t.substring(0,l-u),r=t.substring(l+c))}return 2*h.length>=e.length?[i,o,s,r,h]:null}var s,r,a,l,h,c=o(n,i,Math.ceil(n.length/4)),u=o(n,i,Math.ceil(n.length/2));return c||u?(s=u?c&&c[4].length>u[4].length?c:u:c,e.length>t.length?(r=s[0],a=s[1],l=s[2],h=s[3]):(l=s[0],h=s[1],r=s[2],a=s[3]),[r,a,l,h,s[4]]):null}(e,t);if(r){var a=r[0],l=r[1],h=r[2],c=r[3],u=r[4],d=Cr(a,h),p=Cr(l,c);return d.concat([[vr,u]],p)}return function(e,t){for(var n=e.length,i=t.length,o=Math.ceil((n+i)/2),s=o,r=2*o,a=new Array(r),l=new Array(r),h=0;h<r;h++)a[h]=-1,l[h]=-1;a[s+1]=0,l[s+1]=0;for(var c=n-i,u=c%2!=0,d=0,p=0,f=0,g=0,m=0;m<o;m++){for(var b=-m+d;b<=m-p;b+=2){for(var w=s+b,E=(C=b===-m||b!==m&&a[w-1]<a[w+1]?a[w+1]:a[w-1]+1)-b;C<n&&E<i&&e.charAt(C)===t.charAt(E);)C++,E++;if(a[w]=C,C>n)p+=2;else if(E>i)d+=2;else if(u&&(N=s+c-b)>=0&&N<r&&-1!==l[N]&&C>=(S=n-l[N]))return Tr(e,t,C,E)}for(var y=-m+f;y<=m-g;y+=2){for(var S,N=s+y,v=(S=y===-m||y!==m&&l[N-1]<l[N+1]?l[N+1]:l[N-1]+1)-y;S<n&&v<i&&e.charAt(n-S-1)===t.charAt(i-v-1);)S++,v++;if(l[N]=S,S>n)g+=2;else if(v>i)f+=2;else if(!u){var C;if((w=s+c-y)>=0&&w<r&&-1!==a[w])if(E=s+(C=a[w])-w,C>=(S=n-S))return Tr(e,t,C,E)}}}return[[Sr,e],[Nr,t]]}(e,t)}(e=e.substring(0,e.length-s),t=t.substring(0,t.length-s));return r&&l.unshift([vr,r]),a&&l.push([vr,a]),function e(t,n){t.push([vr,""]);for(var i,o=0,s=0,r=0,a="",l="";o<t.length;)if(o<t.length-1&&!t[o][1])t.splice(o,1);else switch(t[o][0]){case Nr:r++,l+=t[o][1],o++;break;case Sr:s++,a+=t[o][1],o++;break;case vr:var h=o-r-s-1;if(n){if(h>=0&&Rr(t[h][1])){var c=t[h][1].slice(-1);if(t[h][1]=t[h][1].slice(0,-1),a=c+a,l=c+l,!t[h][1]){t.splice(h,1),o--;var u=h-1;t[u]&&t[u][0]===Nr&&(r++,l=t[u][1]+l,u--),t[u]&&t[u][0]===Sr&&(s++,a=t[u][1]+a,u--),h=u}}Or(t[o][1])&&(c=t[o][1].charAt(0),t[o][1]=t[o][1].slice(1),a+=c,l+=c)}if(o<t.length-1&&!t[o][1]){t.splice(o,1);break}if(a.length>0||l.length>0){a.length>0&&l.length>0&&(0!==(i=xr(l,a))&&(h>=0?t[h][1]+=l.substring(0,i):(t.splice(0,0,[vr,l.substring(0,i)]),o++),l=l.substring(i),a=a.substring(i)),0!==(i=Ir(l,a))&&(t[o][1]=l.substring(l.length-i)+t[o][1],l=l.substring(0,l.length-i),a=a.substring(0,a.length-i)));var d=r+s;0===a.length&&0===l.length?(t.splice(o-d,d),o-=d):0===a.length?(t.splice(o-d,d,[Nr,l]),o=o-d+1):0===l.length?(t.splice(o-d,d,[Sr,a]),o=o-d+1):(t.splice(o-d,d,[Sr,a],[Nr,l]),o=o-d+2)}0!==o&&t[o-1][0]===vr?(t[o-1][1]+=t[o][1],t.splice(o,1)):o++,r=0,s=0,a="",l=""}""===t[t.length-1][1]&&t.pop();var p=!1;for(o=1;o<t.length-1;)t[o-1][0]===vr&&t[o+1][0]===vr&&(t[o][1].substring(t[o][1].length-t[o-1][1].length)===t[o-1][1]?(t[o][1]=t[o-1][1]+t[o][1].substring(0,t[o][1].length-t[o-1][1].length),t[o+1][1]=t[o-1][1]+t[o+1][1],t.splice(o-1,1),p=!0):t[o][1].substring(0,t[o+1][1].length)==t[o+1][1]&&(t[o-1][1]+=t[o+1][1],t[o][1]=t[o][1].substring(t[o+1][1].length)+t[o+1][1],t.splice(o+1,1),p=!0)),o++;p&&e(t,n)}(l,i),l}function Tr(e,t,n,i){var o=e.substring(0,n),s=t.substring(0,i),r=e.substring(n),a=t.substring(i),l=Cr(o,s),h=Cr(r,a);return l.concat(h)}function xr(e,t){if(!e||!t||e.charAt(0)!==t.charAt(0))return 0;for(var n=0,i=Math.min(e.length,t.length),o=i,s=0;n<o;)e.substring(s,o)==t.substring(s,o)?s=n=o:i=o,o=Math.floor((i-n)/2+n);return Pr(e.charCodeAt(o-1))&&o--,o}function Ir(e,t){if(!e||!t||e.slice(-1)!==t.slice(-1))return 0;for(var n=0,i=Math.min(e.length,t.length),o=i,s=0;n<o;)e.substring(e.length-o,e.length-s)==t.substring(t.length-o,t.length-s)?s=n=o:i=o,o=Math.floor((i-n)/2+n);return Ar(e.charCodeAt(e.length-o))&&o--,o}function Pr(e){return e>=55296&&e<=56319}function Ar(e){return e>=56320&&e<=57343}function Or(e){return Ar(e.charCodeAt(0))}function Rr(e){return Pr(e.charCodeAt(e.length-1))}function Lr(e,t,n,i){return Rr(e)||Or(i)?null:function(e){for(var t=[],n=0;n<e.length;n++)e[n][1].length>0&&t.push(e[n]);return t}([[vr,e],[Sr,t],[Nr,n],[vr,i]])}function kr(e,t,n){return Cr(e,t,n,!0)}kr.INSERT=Nr,kr.DELETE=Sr,kr.EQUAL=vr;var Fr,Dr,_r,Br,Mr,Ur,zr=kr;function Vr(e){return e.reduce((e,t)=>t[0]===zr.DELETE?e:e+t[1],"")}function Hr(e,t){return Gr(e,t,-1)}function Gr(e,t,n){let i=0,o=0;return e.some(e=>{for(let s=0;s<e[1].length;s++){switch(e[0]*n){case zr.INSERT:i++;break;case zr.DELETE:i--,o++;break;case zr.EQUAL:o++}if(o>t)return!0}return!1}),Math.max(Math.min(t,o-1)+i,0)}!function(e){e.isInstanceOfBlockFormattingContext=function(e){return e&&"Block"===e.formattingContextType}}(Fr||(Fr={})),function(e){let t;!function(e){e.INLINE="inline",e.COLUMN="column",e.REGION="region",e.PAGE="page"}(t=e.FloatReference||(e.FloatReference={}))}(Dr||(Dr={})),function(e){e.isInstanceOfAfterIfContinuesLayoutConstraint=function(e){return e&&"AfterIfContinue"==e.flagmentLayoutConstraintType}}(_r||(_r={})),function(e){e.isInstanceOfRepetitiveElementsOwnerFormattingContext=function(e){return!!e&&("RepetitiveElementsOwner"===e.formattingContextType||Mr.isInstanceOfTableFormattingContext(e))},e.isInstanceOfRepetitiveElementsOwnerLayoutConstraint=function(e){return!!e&&("RepetitiveElementsOwner"===e.flagmentLayoutConstraintType||Mr.isInstanceOfTableRowLayoutConstraint(e))}}(Br||(Br={})),function(e){e.isInstanceOfTableFormattingContext=function(e){return e&&"Table"===e.formattingContextType},e.isInstanceOfTableRowLayoutConstraint=function(e){return e&&"TableRow"===e.flagmentLayoutConstraintType}}(Mr||(Mr={})),function(e){let t,n;!function(e){e[e.IGNORE=0]="IGNORE",e[e.NEWLINE=1]="NEWLINE",e[e.PRESERVE=2]="PRESERVE"}(t=e.Whitespace||(e.Whitespace={})),function(e){e[e.NONE=0]="NONE",e[e.CONTENT=1]="CONTENT",e[e.ROOTLESS=2]="ROOTLESS",e[e.ROOTED=3]="ROOTED"}(n=e.ShadowType||(e.ShadowType={}))}(Ur||(Ur={}));const $r={transform:!0,"transform-origin":!0},Wr={top:!0,bottom:!0,left:!0,right:!0};class Xr{constructor(e,t,n){this.target=e,this.name=t,this.value=n}}const jr={show:function(e){e.style.visibility="visible"},hide:function(e){e.style.visibility="hidden"},play:function(e){e.currentTime=0,e.play()},pause:function(e){e.pause()},resume:function(e){e.play()},mute:function(e){e.muted=!0},unmute:function(e){e.muted=!1}};function Kr(e,t){const n=jr[t];return n?()=>{for(let t=0;t<e.length;t++)try{n(e[t])}catch(e){}}:null}class Yr extends te{constructor(e,t){super(),this.container=e,this.bleedBox=t,this.pageAreaElement=null,this.delayedItems=[],this.elementsById={},this.dimensions={width:0,height:0},this.isFirstPage=!1,this.isLastPage=!1,this.isAutoPageWidth=!0,this.isAutoPageHeight=!0,this.spineIndex=0,this.position=null,this.offset=-1,this.side=null,this.fetchers=[],this.marginBoxes={top:{},bottom:{},left:{},right:{}};const n=this;this.hrefHandler=e=>{const t=e.currentTarget,i=t.getAttribute("href")||t.getAttributeNS(L.XLINK,"href");if(i){const o={type:"hyperlink",target:null,currentTarget:null,anchorElement:t,href:i,preventDefault(){e.preventDefault()}};n.dispatchEvent(o)}}}setAutoPageWidth(e){this.isAutoPageWidth=e,e?this.container.setAttribute(Yr.AUTO_PAGE_WIDTH_ATTRIBUTE,"true"):this.container.removeAttribute(Yr.AUTO_PAGE_WIDTH_ATTRIBUTE)}setAutoPageHeight(e){this.isAutoPageHeight=e,e?this.container.setAttribute(Yr.AUTO_PAGE_HEIGHT_ATTRIBUTE,"true"):this.container.removeAttribute(Yr.AUTO_PAGE_HEIGHT_ATTRIBUTE)}registerElementWithId(e,t){const n=this.elementsById[t];n?n.push(e):this.elementsById[t]=[e]}finish(e,t){Object.keys(this.elementsById).forEach(e=>{const t=this.elementsById[e];for(let e=0;e<t.length;)this.container.contains(t[e])?e++:t.splice(e,1);0===t.length&&delete this.elementsById[e]});const n=this.delayedItems;for(let e=0;e<n.length;e++){const t=n[e];(t.target!==this.container||"transform"!==t.name||this.isAutoPageWidth||this.isAutoPageHeight)&&U(t.target,t.name,t.value.toString())}const i=t.getElementClientRect(this.container);this.dimensions.width=i.width,this.dimensions.height=i.height;for(let t=0;t<e.length;t++){const n=e[t],i=this.elementsById[n.ref],o=this.elementsById[n.observer];if(i&&o){const e=Kr(i,n.action);if(e)for(let t=0;t<o.length;t++)o[t].addEventListener(n.event,e,!1)}}}zoom(e){U(this.container,"transform",`scale(${e})`)}getPageAreaElement(){return this.pageAreaElement||this.container}}Yr.AUTO_PAGE_WIDTH_ATTRIBUTE="data-vivliostyle-auto-page-width",Yr.AUTO_PAGE_HEIGHT_ATTRIBUTE="data-vivliostyle-auto-page-height";const qr="data-adapt-spec",Zr=Ur.Whitespace;function Qr(e){switch(e){case"normal":case"nowrap":return Zr.IGNORE;case"pre-line":return Zr.NEWLINE;case"pre":case"pre-wrap":return Zr.PRESERVE;default:return null}}function Jr(e,t){if(1==e.nodeType)return!1;const n=e.textContent;switch(t){case Zr.IGNORE:return!!n.match(/^\s*$/);case Zr.NEWLINE:return!!n.match(/^[ \t\f]*$/);case Zr.PRESERVE:return 0==n.length}throw new Error(`Unexpected whitespace: ${t}`)}class ea{constructor(e,t){this.flowName=e,this.parentFlowName=t,this.forcedBreakOffsets=[],this.formattingContext=null}}class ta{constructor(e,t,n,i,o,s,r,a,l){this.flowName=e,this.element=t,this.startOffset=n,this.priority=i,this.linger=o,this.exclusive=s,this.repeated=r,this.last=a,this.breakBefore=l,this.startPage=-1}isBetter(e){return!!this.exclusive&&(!e.exclusive||this.priority>e.priority||this.last)}}function na(e,t){return e.top-t.top}function ia(e,t){return t.right-e.right}function oa(e,t){return e===t||!(!e||!t)&&e.node===t.node&&e.shadowType===t.shadowType&&ca(e.shadowContext,t.shadowContext)&&ca(e.nodeShadow,t.nodeShadow)&&oa(e.shadowSibling,t.shadowSibling)}function sa(e,t){if(e===t)return!0;if(!e||!t)return!1;if(e.offsetInNode!==t.offsetInNode||e.after!==t.after||e.steps.length!==t.steps.length)return!1;for(let n=0;n<e.steps.length;n++)if(!oa(e.steps[n],t.steps[n]))return!1;return!0}function ra(e,t){return{steps:[{node:e.sourceNode,shadowType:la.NONE,shadowContext:e.shadowContext,nodeShadow:null,shadowSibling:null,formattingContext:null,fragmentIndex:null!=t?t:e.fragmentIndex}],offsetInNode:0,after:!1,preprocessedTextContent:e.preprocessedTextContent}}function aa(e,t){const n=new da(e.node,t,0);return n.shadowType=e.shadowType,n.shadowContext=e.shadowContext,n.nodeShadow=e.nodeShadow,n.shadowSibling=e.shadowSibling?aa(e.shadowSibling,t.copy()):null,n.formattingContext=e.formattingContext,n.fragmentIndex=e.fragmentIndex+1,n}const la=Ur.ShadowType;class ha{constructor(e,t,n,i,o,s,r){this.owner=e,this.root=t,this.xmldoc=n,this.parentShadow=i,this.type=s,this.styler=r,this.subShadow=null,o&&(o.subShadow=this)}equals(e){return!!e&&this.owner===e.owner&&this.xmldoc===e.xmldoc&&this.type===e.type&&ca(this.parentShadow,e.parentShadow)}}function ca(e,t){return e===t||!!e&&!!t&&e.equals(t)}class ua{constructor(e,t){this.outer=e,this.count=t}}class da{constructor(e,t,n){this.sourceNode=e,this.parent=t,this.boxOffset=n,this.offsetInNode=0,this.after=!1,this.nodeShadow=null,this.shadowSibling=null,this.shared=!1,this.inline=!0,this.overflow=!1,this.display=null,this.floatSide=null,this.clearSide=null,this.floatMinWrapBlock=null,this.columnSpan=null,this.verticalAlign="baseline",this.captionSide="top",this.inlineBorderSpacing=0,this.blockBorderSpacing=0,this.flexContainer=!1,this.establishesBFC=!1,this.containingBlockForAbsolute=!1,this.breakBefore=null,this.breakAfter=null,this.viewNode=null,this.clearSpacer=null,this.lang=null,this.preprocessedTextContent=null,this.repeatOnBreak=null,this.pluginProps={},this.fragmentIndex=1,this.afterIfContinues=null,this.footnotePolicy=null,this.shadowType=la.NONE,this.shadowContext=t?t.shadowContext:null,this.breakPenalty=t?t.breakPenalty:0,this.floatReference=Dr.FloatReference.INLINE,this.whitespace=t?t.whitespace:Zr.IGNORE,this.hyphenateCharacter=t?t.hyphenateCharacter:null,this.breakWord=!!t&&t.breakWord,this.inheritedProps=t?t.inheritedProps:{},this.vertical=!!t&&t.vertical,this.direction=t?t.direction:"ltr",this.firstPseudo=t?t.firstPseudo:null,this.formattingContext=t?t.formattingContext:null}resetView(){this.inline=!0,this.breakPenalty=this.parent?this.parent.breakPenalty:0,this.viewNode=null,this.clearSpacer=null,this.offsetInNode=0,this.after=!1,this.display=null,this.floatReference=Dr.FloatReference.INLINE,this.floatSide=null,this.clearSide=null,this.floatMinWrapBlock=null,this.columnSpan=null,this.verticalAlign="baseline",this.flexContainer=!1,this.whitespace=this.parent?this.parent.whitespace:Zr.IGNORE,this.hyphenateCharacter=this.parent?this.parent.hyphenateCharacter:null,this.breakWord=!!this.parent&&this.parent.breakWord,this.breakBefore=null,this.breakAfter=null,this.nodeShadow=null,this.establishesBFC=!1,this.containingBlockForAbsolute=!1,this.vertical=!!this.parent&&this.parent.vertical,this.nodeShadow=null,this.preprocessedTextContent=null,this.formattingContext=this.parent?this.parent.formattingContext:null,this.repeatOnBreak=null,this.pluginProps={},this.fragmentIndex=1,this.afterIfContinues=null,this.footnotePolicy=null}cloneItem(){const e=new da(this.sourceNode,this.parent,this.boxOffset);return e.offsetInNode=this.offsetInNode,e.after=this.after,e.nodeShadow=this.nodeShadow,e.shadowType=this.shadowType,e.shadowContext=this.shadowContext,e.shadowSibling=this.shadowSibling,e.inline=this.inline,e.breakPenalty=this.breakPenalty,e.display=this.display,e.floatReference=this.floatReference,e.floatSide=this.floatSide,e.clearSide=this.clearSide,e.floatMinWrapBlock=this.floatMinWrapBlock,e.columnSpan=this.columnSpan,e.verticalAlign=this.verticalAlign,e.captionSide=this.captionSide,e.inlineBorderSpacing=this.inlineBorderSpacing,e.blockBorderSpacing=this.blockBorderSpacing,e.establishesBFC=this.establishesBFC,e.containingBlockForAbsolute=this.containingBlockForAbsolute,e.flexContainer=this.flexContainer,e.whitespace=this.whitespace,e.hyphenateCharacter=this.hyphenateCharacter,e.breakWord=this.breakWord,e.breakBefore=this.breakBefore,e.breakAfter=this.breakAfter,e.viewNode=this.viewNode,e.clearSpacer=this.clearSpacer,e.firstPseudo=this.firstPseudo,e.vertical=this.vertical,e.overflow=this.overflow,e.preprocessedTextContent=this.preprocessedTextContent,e.formattingContext=this.formattingContext,e.repeatOnBreak=this.repeatOnBreak,e.pluginProps=Object.create(this.pluginProps),e.fragmentIndex=this.fragmentIndex,e.afterIfContinues=this.afterIfContinues,e.footnotePolicy=this.footnotePolicy,e}modify(){return this.shared?this.cloneItem():this}copy(){let e=this;do{if(e.shared)break;e.shared=!0,e=e.parent}while(e);return this}clone(){const e=this.cloneItem();let t,n=e;for(;null!=(t=n.parent);)t=t.cloneItem(),n.parent=t,n=t;return e}toNodePositionStep(){return{node:this.sourceNode,shadowType:this.shadowType,shadowContext:this.shadowContext,nodeShadow:this.nodeShadow,shadowSibling:this.shadowSibling?this.shadowSibling.toNodePositionStep():null,formattingContext:this.formattingContext,fragmentIndex:this.fragmentIndex}}toNodePosition(){let e=this;const t=[];do{e.firstPseudo&&e.parent&&e.parent.firstPseudo!==e.firstPseudo||t.push(e.toNodePositionStep()),e=e.parent}while(e);return{steps:t,offsetInNode:this.preprocessedTextContent?Hr(this.preprocessedTextContent,this.offsetInNode):this.offsetInNode,after:this.after,preprocessedTextContent:this.preprocessedTextContent}}isInsideBFC(){let e=this.parent;for(;e;){if(e.establishesBFC)return!0;e=e.parent}return!1}getContainingBlockForAbsolute(){let e=this.parent;for(;e;){if(e.containingBlockForAbsolute)return e;e=e.parent}return null}walkUpBlocks(e){let t=this;for(;t;)t.inline||e(t),t=t.parent}belongsTo(e){return this.formattingContext===e&&!!this.parent&&this.parent.formattingContext===e}}class pa{constructor(e){this.primary=e,this.floats=null}clone(){const e=new pa(this.primary);if(this.floats){e.floats=[];for(let t=0;t<this.floats.length;++t)e.floats[t]=this.floats[t]}return e}isSamePosition(e){if(!e)return!1;if(this===e)return!0;if(!sa(this.primary,e.primary))return!1;if(this.floats){if(!e.floats||this.floats.length!==e.floats.length)return!1;for(let t=0;t<this.floats.length;t++)if(!sa(this.floats[t],e.floats[t]))return!1}else if(e.floats)return!1;return!0}}class fa{constructor(e,t){this.chunkPosition=e,this.flowChunk=t}clone(){return new fa(this.chunkPosition.clone(),this.flowChunk)}isSamePosition(e){return!!e&&(this===e||this.chunkPosition.isSamePosition(e.chunkPosition))}}class ga{constructor(){this.positions=[],this.startSide="any",this.breakAfter=null}clone(){const e=new ga,t=this.positions,n=e.positions;for(let e=0;e<t.length;e++)n[e]=t[e].clone();return e.startSide=this.startSide,e.breakAfter=this.breakAfter,e}isSamePosition(e){if(this===e)return!0;if(!e||this.positions.length!==e.positions.length)return!1;for(let t=0;t<this.positions.length;t++)if(!this.positions[t].isSamePosition(e.positions[t]))return!1;return!0}hasContent(e){return this.positions.length>0&&this.positions[0].flowChunk.startOffset<=e}}class ma{constructor(){this.page=0,this.flows={},this.flowPositions={},this.highestSeenOffset=0}clone(){const e=new ma;e.page=this.page,e.highestSeenNode=this.highestSeenNode,e.highestSeenOffset=this.highestSeenOffset,e.lookupPositionOffset=this.lookupPositionOffset,e.flows=this.flows;for(const t in this.flowPositions)e.flowPositions[t]=this.flowPositions[t].clone();return e}isSamePosition(e){if(this===e)return!0;if(!e||this.page!==e.page||this.highestSeenOffset!==e.highestSeenOffset)return!1;const t=Object.keys(this.flowPositions),n=Object.keys(e.flowPositions);if(t.length!==n.length)return!1;for(const n of t)if(!this.flowPositions[n].isSamePosition(e.flowPositions[n]))return!1;return!0}hasContent(e,t){const n=this.flowPositions[e];return!!n&&n.hasContent(t)}startSideOfFlow(e){const t=this.flowPositions[e];return t?t.startSide:"any"}firstFlowChunkOfFlow(e){const t=this.flowPositions[e];if(!t)return null;const n=t.positions[0];return n?n.flowChunk:null}}class ba{constructor(e){this.element=e,this.left=0,this.top=0,this.marginLeft=0,this.marginRight=0,this.marginTop=0,this.marginBottom=0,this.borderLeft=0,this.borderRight=0,this.borderTop=0,this.borderBottom=0,this.paddingLeft=0,this.paddingRight=0,this.paddingTop=0,this.paddingBottom=0,this.width=0,this.height=0,this.originX=0,this.originY=0,this.exclusions=null,this.innerShape=null,this.computedBlockSize=0,this.snapWidth=0,this.snapHeight=0,this.snapOffsetX=0,this.snapOffsetY=0,this.vertical=!1}getInsetTop(){return this.marginTop+this.borderTop+this.paddingTop}getInsetBottom(){return this.marginBottom+this.borderBottom+this.paddingBottom}getInsetLeft(){return this.marginLeft+this.borderLeft+this.paddingLeft}getInsetRight(){return this.marginRight+this.borderRight+this.paddingRight}getInsetBefore(){return this.vertical?this.getInsetRight():this.getInsetTop()}getInsetAfter(){return this.vertical?this.getInsetLeft():this.getInsetBottom()}getInsetStart(){return this.vertical?this.getInsetTop():this.getInsetLeft()}getInsetEnd(){return this.vertical?this.getInsetBottom():this.getInsetRight()}getBeforeEdge(e){return this.vertical?e.right:e.top}getAfterEdge(e){return this.vertical?e.left:e.bottom}getStartEdge(e){return this.vertical?e.top:e.left}getEndEdge(e){return this.vertical?e.bottom:e.right}getInlineSize(e){return this.vertical?e.bottom-e.top:e.right-e.left}getBoxSize(e){return this.vertical?e.right-e.left:e.bottom-e.top}getBoxDir(){return this.vertical?-1:1}getInlineDir(){return 1}copyFrom(e){this.element=e.element,this.left=e.left,this.top=e.top,this.marginLeft=e.marginLeft,this.marginRight=e.marginRight,this.marginTop=e.marginTop,this.marginBottom=e.marginBottom,this.borderLeft=e.borderLeft,this.borderRight=e.borderRight,this.borderTop=e.borderTop,this.borderBottom=e.borderBottom,this.paddingLeft=e.paddingLeft,this.paddingRight=e.paddingRight,this.paddingTop=e.paddingTop,this.paddingBottom=e.paddingBottom,this.width=e.width,this.height=e.height,this.originX=e.originX,this.originY=e.originY,this.innerShape=e.innerShape,this.exclusions=e.exclusions,this.computedBlockSize=e.computedBlockSize,this.snapWidth=e.snapWidth,this.snapHeight=e.snapHeight,this.vertical=e.vertical}setVerticalPosition(e,t){this.top=e,this.height=t,U(this.element,"top",`${e}px`),U(this.element,"height",`${t}px`)}setHorizontalPosition(e,t){this.left=e,this.width=t,U(this.element,"left",`${e}px`),U(this.element,"width",`${t}px`)}setBlockPosition(e,t){this.vertical?this.setHorizontalPosition(e+t*this.getBoxDir(),t):this.setVerticalPosition(e,t)}setInlinePosition(e,t){this.vertical?this.setVerticalPosition(e,t):this.setHorizontalPosition(e,t)}clear(){const e=this.element;let t;for(;t=e.lastChild;)e.removeChild(t)}getInnerShape(){const e=this.getInnerRect();return this.innerShape?this.innerShape.withOffset(e.x1,e.y1):Qt(e.x1,e.y1,e.x2,e.y2)}getInnerRect(){const e=this.originX+this.left+this.getInsetLeft(),t=this.originY+this.top+this.getInsetTop();return new $t(e,t,e+this.width,t+this.height)}getPaddingRect(){const e=this.originX+this.left+this.marginLeft+this.borderLeft,t=this.originY+this.top+this.marginTop+this.borderTop,n=this.paddingLeft+this.width+this.paddingRight,i=this.paddingTop+this.height+this.paddingBottom;return new $t(e,t,e+n,t+i)}getOuterShape(e,t){const n=this.getOuterRect();return bn(e,n.x1,n.y1,n.x2-n.x1,n.y2-n.y1,t)}getOuterRect(){const e=this.originX+this.left,t=this.originY+this.top,n=this.getInsetLeft()+this.width+this.getInsetRight(),i=this.getInsetTop()+this.height+this.getInsetBottom();return new $t(e,t,e+n,t+i)}}class wa extends ft{constructor(e,t,n,i){super(),this.elem=e,this.context=t,this.rootContentValue=n,this.exprContentListener=i}visitStrInner(e,t){t||(t=this.elem.ownerDocument.createTextNode(e)),this.elem.appendChild(t)}visitStr(e){return this.visitStrInner(e.str),null}visitURL(e){if(this.rootContentValue.url)this.elem.setAttribute("src",e.url);else{const t=this.elem.ownerDocument.createElementNS(L.XHTML,"img");t.setAttribute("src",e.url),this.elem.appendChild(t)}return null}visitSpaceList(e){return this.visitValues(e.values),null}visitExpr(e){const t=e.toExpr();let n=t.evaluate(this.context);if("string"==typeof n){t instanceof tt&&(n=mo(t.scope,new hi(n,null),"").stringValue()),this.elem.ownerDocument;const e=this.exprContentListener(t,n,this.elem.ownerDocument);this.visitStrInner(n,e)}return null}}function Ea(e){return null!=e&&e!==Bt.normal&&e!==Bt.none&&e!==Bt.inherit}const ya=Dr.FloatReference;function Sa(e){switch(e){case ya.INLINE:return!1;case ya.COLUMN:case ya.REGION:case ya.PAGE:return!0;default:throw new Error(`Unknown float-reference: ${e}`)}}class Na{constructor(e,t,n,i,o,s){this.nodePosition=e,this.floatReference=t,this.floatSide=n,this.clearSide=i,this.flowName=o,this.floatMinWrapBlock=s,this.order=null,this.id=null}getOrder(){if(null===this.order)throw new Error("The page float is not yet added");return this.order}getId(){if(!this.id)throw new Error("The page float is not yet added");return this.id}isAllowedOnContext(e){return e.isAnchorAlreadyAppeared(this.getId())}isAllowedToPrecede(e){return!1}}class va{constructor(){this.floats=[],this.nextPageFloatIndex=0}nextOrder(){return this.nextPageFloatIndex++}createPageFloatId(e){return`pf${e}`}addPageFloat(e){if(this.floats.findIndex(t=>sa(t.nodePosition,e.nodePosition))>=0)throw new Error("A page float with the same source node is already registered");{const t=e.order=this.nextOrder();e.id=this.createPageFloatId(t),this.floats.push(e)}}findPageFloatByNodePosition(e){const t=this.floats.findIndex(t=>sa(t.nodePosition,e));return t>=0?this.floats[t]:null}findPageFloatById(e){const t=this.floats.findIndex(t=>t.id===e);return t>=0?this.floats[t]:null}}class Ca{constructor(e,t,n,i,o){this.floatReference=e,this.floatSide=t,this.continuations=n,this.area=i,this.continues=o}hasFloat(e){return this.continuations.some(t=>t.float===e)}findNotAllowedFloat(e){for(let t=this.continuations.length-1;t>=0;t--){const n=this.continuations[t].float;if(!n.isAllowedOnContext(e))return n}return null}getOuterShape(){return this.area.getOuterShape(null,null)}getOuterRect(){return this.area.getOuterRect()}getOrder(){const e=this.continuations.map(e=>e.float);return Math.min.apply(null,e.map(e=>e.getOrder()))}shouldBeStashedBefore(e){return this.getOrder()<e.getOrder()}addContinuations(e){e.forEach(e=>{this.continuations.push(e)})}getFlowName(){const e=this.continuations[0].float.flowName;return this.continuations.every(t=>t.float.flowName===e),e}}class Ta{constructor(e,t){this.float=e,this.nodePosition=t}equals(e){return!!e&&(this===e||this.float===e.float&&sa(this.nodePosition,e.nodePosition))}}class xa{constructor(e,t,n,i,o,s,r){this.parent=e,this.floatReference=t,this.container=n,this.flowName=i,this.generatingNodePosition=o,this.children=[],this.invalidated=!1,this.forbiddenFloats=[],this.floatFragments=[],this.stashedFloatFragments=[],this.floatAnchors={},this.floatsDeferredToNext=[],this.layoutConstraints=[],this.locked=!1,e&&e.children.push(this),this.writingMode=s||e&&e.writingMode||Bt.horizontal_tb,this.direction=r||e&&e.direction||Bt.ltr,this.floatStore=e?e.floatStore:new va;const a=this.getPreviousSibling();this.floatsDeferredFromPrevious=a?[].concat(a.floatsDeferredToNext):[]}getParent(e){if(!this.parent)throw new Error(`No PageFloatLayoutContext for ${e}`);return this.parent}getPreviousSiblingOf(e,t,n,i){let o=this.children.indexOf(e);o<0&&(o=this.children.length);for(let e=o-1;e>=0;e--){let o=this.children[e];if(o.floatReference===t&&o.flowName===n&&sa(o.generatingNodePosition,i))return o;if(o=o.getPreviousSiblingOf(null,t,n,i),o)return o}return null}getPreviousSibling(){let e,t=this,n=this.parent;for(;n;){if(e=n.getPreviousSiblingOf(t,this.floatReference,this.flowName,this.generatingNodePosition),e)return e;t=n,n=n.parent}return null}getContainer(e){return e&&e!==this.floatReference?this.getParent(e).getContainer(e):this.container}setContainer(e){this.container=e,this.reattachFloatFragments()}addPageFloat(e){this.floatStore.addPageFloat(e)}getPageFloatLayoutContext(e){return e===this.floatReference?this:this.getParent(e).getPageFloatLayoutContext(e)}findPageFloatByNodePosition(e){return this.floatStore.findPageFloatByNodePosition(e)}forbid(e){const t=e.getId(),n=e.floatReference;n===this.floatReference?this.forbiddenFloats.includes(t)||(this.forbiddenFloats.push(t),(new Pa).findByFloat(e).forbid(e,this)):this.getParent(n).forbid(e)}isForbidden(e){const t=e.getId(),n=e.floatReference;return n===this.floatReference?this.forbiddenFloats.includes(t):this.getParent(n).isForbidden(e)}addPageFloatFragment(e,t){const n=e.floatReference;n!==this.floatReference?this.getParent(n).addPageFloatFragment(e,t):this.floatFragments.includes(e)||(this.floatFragments.push(e),this.floatFragments.sort((e,t)=>e.getOrder()-t.getOrder())),t||this.invalidate()}removePageFloatFragment(e,t){const n=e.floatReference;if(n!==this.floatReference)this.getParent(n).removePageFloatFragment(e,t);else{const n=this.floatFragments.indexOf(e);if(n>=0){const e=this.floatFragments.splice(n,1)[0],i=e.area&&e.area.element;i&&i.parentNode&&i.parentNode.removeChild(i),t||this.invalidate()}}}findPageFloatFragment(e){if(e.floatReference!==this.floatReference)return this.getParent(e.floatReference).findPageFloatFragment(e);const t=this.floatFragments.findIndex(t=>t.hasFloat(e));return t>=0?this.floatFragments[t]:null}hasFloatFragments(e){return!(!(this.floatFragments.length>0)||e&&!this.floatFragments.some(e))||!!this.parent&&this.parent.hasFloatFragments(e)}hasContinuingFloatFragmentsInFlow(e){return this.hasFloatFragments(t=>t.continues&&t.getFlowName()===e)}registerPageFloatAnchor(e,t){this.floatAnchors[e.getId()]=t}collectPageFloatAnchors(){const e=Object.assign({},this.floatAnchors);return this.children.reduce((e,t)=>Object.assign(e,t.collectPageFloatAnchors()),e)}isAnchorAlreadyAppeared(e){if(this.getDeferredPageFloatContinuations().some(t=>t.float.getId()===e))return!0;const t=this.collectPageFloatAnchors()[e];return!!t&&!(!this.container||!this.container.element)&&this.container.element.contains(t)}deferPageFloat(e){const t=e.float;if(t.floatReference===this.floatReference){const n=this.floatsDeferredToNext.findIndex(e=>e.float===t);n>=0?this.floatsDeferredToNext.splice(n,1,e):this.floatsDeferredToNext.push(e)}else this.getParent(t.floatReference).deferPageFloat(e)}hasPrecedingFloatsDeferredToNext(e,t){if(!t&&e.floatReference!==this.floatReference)return this.getParent(e.floatReference).hasPrecedingFloatsDeferredToNext(e,!1);const n=e.getOrder();return!!this.floatsDeferredToNext.some(t=>t.float.getOrder()<n&&!e.isAllowedToPrecede(t.float))||!!this.parent&&this.parent.hasPrecedingFloatsDeferredToNext(e,!0)}getLastFollowingFloatInFragments(e){const t=e.getOrder();let n=null;if(this.floatFragments.forEach(e=>{e.continuations.forEach(e=>{const i=e.float,o=i.getOrder();o>t&&(!n||o>n.getOrder())&&(n=i)})}),this.parent){const t=this.parent.getLastFollowingFloatInFragments(e);t&&(!n||t.getOrder()>n.getOrder())&&(n=t)}return n}getDeferredPageFloatContinuations(e){e=e||this.flowName;let t=this.floatsDeferredFromPrevious.filter(t=>!e||t.float.flowName===e);return this.parent&&(t=this.parent.getDeferredPageFloatContinuations(e).concat(t)),t.sort((e,t)=>e.float.getOrder()-t.float.getOrder())}getPageFloatContinuationsDeferredToNext(e){e=e||this.flowName;const t=this.floatsDeferredToNext.filter(t=>!e||t.float.flowName===e);return this.parent?this.parent.getPageFloatContinuationsDeferredToNext(e).concat(t):t}getFloatsDeferredToNextInChildContexts(){let e=[];const t=[];for(let n=this.children.length-1;n>=0;n--){const i=this.children[n];t.includes(i.flowName)||(t.push(i.flowName),e=e.concat(i.floatsDeferredToNext.map(e=>e.float)),e=e.concat(i.getFloatsDeferredToNextInChildContexts()))}return e}checkAndForbidNotAllowedFloat(){if(this.checkAndForbidFloatFollowingDeferredFloat())return!0;for(let e=this.floatFragments.length-1;e>=0;e--){const t=this.floatFragments[e],n=t.findNotAllowedFloat(this);if(n)return this.locked?this.invalidate():(this.removePageFloatFragment(t),this.forbid(n),this.removeEndFloatFragments(t.floatSide)),!0}return!(this.floatReference!==ya.REGION||!this.parent.locked)&&this.parent.checkAndForbidNotAllowedFloat()}checkAndForbidFloatFollowingDeferredFloat(){const e=this.getFloatsDeferredToNextInChildContexts(),t=this.floatFragments.reduce((e,t)=>e.concat(t.continuations.map(e=>e.float)),[]);t.sort((e,t)=>t.getOrder()-e.getOrder());for(const n of t){const t=n.getOrder();if(e.some(e=>!n.isAllowedToPrecede(e)&&t>e.getOrder())){if(this.locked)this.invalidate();else{this.forbid(n);const e=this.findPageFloatFragment(n);this.removePageFloatFragment(e)}return!0}}return!1}finish(){if(!this.checkAndForbidNotAllowedFloat()){for(let e=this.floatsDeferredToNext.length-1;e>=0;e--)if(!this.floatsDeferredToNext[e].float.isAllowedOnContext(this)){if(this.locked)return void this.invalidate();this.floatsDeferredToNext.splice(e,1)}this.floatsDeferredFromPrevious.forEach(e=>{this.floatsDeferredToNext.findIndex(t=>e.equals(t))>=0||this.floatFragments.some(t=>t.hasFloat(e.float))||this.floatsDeferredToNext.push(e)})}}hasSameContainerAs(e){return!!this.container&&!!e.container&&this.container.element===e.container.element}invalidate(){this.invalidated=!0,this.locked||(this.container&&(this.children.forEach(e=>{this.hasSameContainerAs(e)&&e.floatFragments.forEach(e=>{const t=e.area.element;t&&t.parentNode&&t.parentNode.removeChild(t)})}),this.container.clear()),this.children.forEach(e=>{e.layoutConstraints.splice(0)}),this.children.splice(0),Object.keys(this.floatAnchors).forEach(e=>{delete this.floatAnchors[e]}))}detachChildren(){const e=this.children.splice(0);return e.forEach(e=>{e.floatFragments.forEach(e=>{const t=e.area.element;t&&t.parentNode&&t.parentNode.removeChild(t)})}),e}attachChildren(e){e.forEach(e=>{this.children.push(e),e.reattachFloatFragments()})}isInvalidated(){return this.invalidated||!!this.parent&&this.parent.isInvalidated()}validate(){this.invalidated=!1}toLogical(e){return function(e,t,n){return gr(e,t,n||null,wr)}(e,this.writingMode.toString(),this.direction.toString())}toPhysical(e){return function(e,t,n){return gr(e,t,n||null,br)}(e,this.writingMode.toString(),this.direction.toString())}removeEndFloatFragments(e){const t=this.toLogical(e);if("block-end"===t||"inline-end"===t){let e=0;for(;e<this.floatFragments.length;){const n=this.floatFragments[e];this.toLogical(n.floatSide)===t?this.removePageFloatFragment(n):e++}}}stashEndFloatFragments(e){const t=e.floatReference;if(t!==this.floatReference)return void this.getParent(t).stashEndFloatFragments(e);const n=this.toLogical(e.floatSide);if("block-end"===n||"snap-block"===n||"inline-end"===n){let t=0;for(;t<this.floatFragments.length;){const i=this.floatFragments[t],o=this.toLogical(i.floatSide);(o===n||"snap-block"===n&&"block-end"===o)&&i.shouldBeStashedBefore(e)?(this.stashedFloatFragments.push(i),this.floatFragments.splice(t,1)):t++}}}restoreStashedFragments(e){e===this.floatReference?(this.stashedFloatFragments.forEach(e=>{this.addPageFloatFragment(e,!0)}),this.stashedFloatFragments.splice(0)):this.getParent(e).restoreStashedFragments(e)}discardStashedFragments(e){e===this.floatReference?this.stashedFloatFragments.splice(0):this.getParent(e).discardStashedFragments(e)}getStashedFloatFragments(e){return e===this.floatReference?this.stashedFloatFragments.concat().sort((e,t)=>t.getOrder()-e.getOrder()):this.getParent(e).getStashedFloatFragments(e)}getLimitValue(e,t,n,i){this.container;const o=this.toLogical(e),s=this.toPhysical(e),r=this.getLimitValueInner(o,t,n,i);if(this.parent&&this.parent.container){const e=this.parent.getLimitValue(s,t,n,i);switch(s){case"top":case"left":return Math.max(r,e);case"bottom":case"right":return Math.min(r,e)}}return r}getLimitValueInner(e,t,n,i){this.container;const o=this.getLimitValuesInner(t,n,i);switch(e){case"block-start":return this.container.vertical?o.right:o.top;case"block-end":return this.container.vertical?o.left:o.bottom;case"inline-start":return this.container.vertical?o.top:o.left;case"inline-end":return this.container.vertical?o.bottom:o.right;default:throw new Error(`Unknown logical side: ${e}`)}}getLimitValuesInner(e,t,n){this.container;const i=this.container.originX,o=this.container.originY,s=this.container.getPaddingRect();let r={top:s.y1-o,left:s.x1-i,bottom:s.y2-o,right:s.x2-i,floatMinWrapBlockStart:0,floatMinWrapBlockEnd:0};function a(n,i,o){return"%"===n.unit?o*n.num/100:e.convertLengthToPx(n,i,t)}const l=this.floatFragments;return l.length>0&&(r=l.reduce((e,t)=>{if(n&&!n(t,this))return e;const i=this.toLogical(t.floatSide),o=t.area,r=t.continuations[0].float.floatMinWrapBlock;let l=e.top,h=e.left,c=e.bottom,u=e.right,d=e.floatMinWrapBlockStart,p=e.floatMinWrapBlockEnd;switch(i){case"inline-start":o.vertical?l=Math.max(l,o.top+o.height):h=Math.max(h,o.left+o.width);break;case"block-start":o.vertical?(r&&o.left<u&&(d=a(r,o.rootViewNodes[0],s.x2-s.x1)),u=Math.min(u,o.left)):(r&&o.top+o.height>l&&(d=a(r,o.rootViewNodes[0],s.y2-s.y1)),l=Math.max(l,o.top+o.height));break;case"inline-end":o.vertical?c=Math.min(c,o.top):u=Math.min(u,o.left);break;case"block-end":o.vertical?(r&&o.left+o.width>h&&(p=a(r,o.rootViewNodes[0],s.x2-s.x1)),h=Math.max(h,o.left+o.width)):(r&&o.top<c&&(p=a(r,o.rootViewNodes[0],s.y2-s.y1)),c=Math.min(c,o.top));break;default:throw new Error(`Unknown logical float side: ${i}`)}return{top:l,left:h,bottom:c,right:u,floatMinWrapBlockStart:d,floatMinWrapBlockEnd:p}},r)),r.left+=i,r.right+=i,r.top+=o,r.bottom+=o,r}setFloatAreaDimensions(e,t,n,i,o,s,r){if(t!==this.floatReference)return this.getParent(t).setFloatAreaDimensions(e,t,n,i,o,s,r);let a=this.toLogical(n);if("snap-block"===a){if(!r["block-start"]&&!r["block-end"])return null}else if(!r[a])return null;e.clientLayout;let l=this.getLimitValue("block-start",e.layoutContext,e.clientLayout),h=this.getLimitValue("block-end",e.layoutContext,e.clientLayout),c=this.getLimitValue("inline-start",e.layoutContext,e.clientLayout),u=this.getLimitValue("inline-end",e.layoutContext,e.clientLayout);const d=e.vertical?e.originX:e.originY,p=e.vertical?e.originY:e.originX;function f(t,n){let i=t(e.bands,n);return i?(e.vertical&&(i=an(i)),l=e.vertical?Math.min(l,i.x2):Math.max(l,i.y1),h=e.vertical?Math.max(h,i.x1):Math.min(h,i.y2),!0):s}let g,m,b,w;if(l=e.vertical?Math.min(l,e.left+e.getInsetLeft()+e.width+e.getInsetRight()+d):Math.max(l,e.top+d),h=e.vertical?Math.max(h,e.left+d):Math.min(h,e.top+e.getInsetTop()+e.height+e.getInsetBottom()+d),o){const t=e.vertical?rn(new $t(h,c,l,u)):new $t(c,l,u,h);if(("block-start"===a||"snap-block"===a||"inline-start"===a)&&!f(un,t))return null;if(("block-end"===a||"snap-block"===a||"inline-end"===a)&&!f(dn,t))return null;if(b=(h-l)*e.getBoxDir(),g=b-e.getInsetBefore()-e.getInsetAfter(),w=u-c,m=w-e.getInsetStart()-e.getInsetEnd(),!s&&(g<=0||m<=0))return null}else{g=e.computedBlockSize,b=g+e.getInsetBefore()+e.getInsetAfter();const t=(h-l)*e.getBoxDir();if("snap-block"===a){if(null===i)a="block-start";else{const e=this.container.getPaddingRect();a=this.container.getBoxDir()*(i-(this.container.vertical?e.x2:e.y1))<=this.container.getBoxDir()*((this.container.vertical?e.x1:e.y2)-i-b)?"block-start":"block-end"}if(!r[a]){if(!r["block-end"])return null;a="block-end"}}if(!s&&t<b)return null;m="inline-start"===a||"inline-end"===a?yr(e.clientLayout,e.element,[Er.FIT_CONTENT_INLINE_SIZE])[Er.FIT_CONTENT_INLINE_SIZE]:e.adjustContentRelativeSize?e.getContentInlineSize():e.vertical?e.height:e.width,w=m+e.getInsetStart()+e.getInsetEnd();const n=u-c;if(!s&&n<w)return null}switch(l-=d,h-=d,c-=p,u-=p,a){case"inline-start":case"block-start":case"snap-block":e.setInlinePosition(c,m),e.setBlockPosition(l,g);break;case"inline-end":case"block-end":e.setInlinePosition(u-w,m),e.setBlockPosition(h-b*e.getBoxDir(),g);break;default:throw new Error(`unknown float direction: ${n}`)}return a}getFloatFragmentExclusions(){const e=this.floatFragments.map(e=>e.getOuterShape());return this.parent?this.parent.getFloatFragmentExclusions().concat(e):e}reattachFloatFragments(){const e=this.container.element&&this.container.element.parentNode;e&&this.floatFragments.forEach(t=>{e.appendChild(t.area.element)})}getMaxReachedAfterEdge(){const e=this.getContainer().vertical;return this.floatFragments.reduce((t,n)=>{const i=n.getOuterRect();return e?Math.min(t,i.x1):Math.max(t,i.y2)},e?1/0:0)}getBlockStartEdgeOfBlockEndFloats(){const e=this.getContainer().vertical;return this.floatFragments.filter(e=>"block-end"===e.floatSide).reduce((t,n)=>{const i=n.getOuterRect();return e?Math.max(t,i.x2):Math.min(t,i.y1)},e?0:1/0)}getPageFloatClearEdge(e,t){function n(e){return t=>e.isAnchorAlreadyAppeared(t.float.getId())}function i(e,t){return e.continuations.some(n(t))}const o=t.getPaddingRect(),s=t.vertical?o.x1:o.y2;let r=this;for(;r;){if(r.floatsDeferredToNext.some(n(r)))return s;r=r.parent}t.clientLayout;const a=this.getLimitValue("block-start",t.layoutContext,t.clientLayout,i);return this.getLimitValue("block-end",t.layoutContext,t.clientLayout,i)*t.getBoxDir()<s*t.getBoxDir()?s:a}getPageFloatPlacementCondition(e,t,n){if(e.floatReference!==this.floatReference)return this.getParent(e.floatReference).getPageFloatPlacementCondition(e,t,n);const i={"block-start":!0,"block-end":!0,"inline-start":!0,"inline-end":!0};if(!n)return i;const o=this.toLogical(t),s=this.toLogical(n);let r;r="all"===s?["block-start","block-end","inline-start","inline-end"]:"both"===s?["inline-start","inline-end"]:"same"===s?"snap-block"===o?["block-start","block-end"]:[o]:[s];const a=e.getOrder();function l(e){return t=>t.floatSide===e&&t.getOrder()<a}return r.forEach(e=>{switch(e){case"block-start":case"inline-start":i[e]=!function e(t,n){return t.children.some(t=>t.floatFragments.some(l(n))||e(t,n))}(this,e);break;case"block-end":case"inline-end":i[e]=!function e(t,n){const i=t.parent;return!!i&&(i.floatFragments.some(l(n))||e(i,n))}(this,e);break;default:throw new Error(`Unexpected side: ${e}`)}}),i}getLayoutConstraints(){return(this.parent?this.parent.getLayoutConstraints():[]).concat(this.layoutConstraints)}addLayoutConstraint(e,t){t===this.floatReference?this.layoutConstraints.push(e):this.getParent(t).addLayoutConstraint(e,t)}isColumnFullWithPageFloats(e){const t=e.layoutContext,n=e.clientLayout;let i=this,o=null;for(;i&&i.container;){const s=i.getLimitValuesInner(t,n);o?e.vertical?(s.right<o.right&&(o.right=s.right,o.floatMinWrapBlockStart=s.floatMinWrapBlockStart),s.left>o.left&&(o.left=s.left,o.floatMinWrapBlockEnd=s.floatMinWrapBlockEnd)):(s.top>o.top&&(o.top=s.top,o.floatMinWrapBlockStart=s.floatMinWrapBlockStart),s.bottom<o.bottom&&(o.bottom=s.bottom,o.floatMinWrapBlockEnd=s.floatMinWrapBlockEnd)):o=s,i=i.parent}const s=Math.max(o.floatMinWrapBlockStart,o.floatMinWrapBlockEnd);return(e.vertical?o.right-o.left:o.bottom-o.top)<=s}getMaxBlockSizeOfPageFloats(){const e=this.getContainer().vertical;return this.floatFragments.length?Math.max.apply(null,this.floatFragments.map(t=>{const n=t.area;return e?n.width:n.height})):0}lock(){this.locked=!0}unlock(){this.locked=!1}isLocked(){return this.locked}}const Ia=[];class Pa{static register(e){Ia.push(e)}findByNodeContext(e){for(let t=Ia.length-1;t>=0;t--){const n=Ia[t];if(n.appliesToNodeContext(e))return n}throw new Error(`No PageFloatLayoutStrategy found for ${e}`)}findByFloat(e){for(let t=Ia.length-1;t>=0;t--){const n=Ia[t];if(n.appliesToFloat(e))return n}throw new Error(`No PageFloatLayoutStrategy found for ${e}`)}}Pa.register(new class{appliesToNodeContext(e){return Sa(e.floatReference)}appliesToFloat(e){return!0}createPageFloat(e,t,n){let i=e.floatReference;e.floatSide;const o=e.floatSide,s=e.toNodePosition();return n.resolveFloatReferenceFromColumnSpan(i,e.columnSpan,e).thenAsync(n=>{i=n,t.flowName;const r=new Na(s,i,o,e.clearSide,t.flowName,e.floatMinWrapBlock);return t.addPageFloat(r),fi(r)})}createPageFloatFragment(e,t,n,i){const o=e[0].float;return new Ca(o.floatReference,t,e,n,i)}findPageFloatFragment(e,t){return t.findPageFloatFragment(e)}adjustPageFloatArea(e,t,n){}forbid(e,t){}});const Aa=Ca;class Oa extends Na{constructor(e,t,n,i,o){super(e,t,"block-end",null,n,o),this.footnotePolicy=i}isAllowedToPrecede(e){return!(e instanceof Oa)}}class Ra extends Aa{constructor(e,t,n,i){super(e,"block-end",t,n,i)}getOrder(){return 1/0}shouldBeStashedBefore(e){return e instanceof Oa||this.getOrder()<e.getOrder()}}class La{constructor(e){this.footnote=e}allowLayout(e){return!sa(e.toNodePosition(),this.footnote.nodePosition)}}Pa.register(new class{appliesToNodeContext(e){return"footnote"===e.floatSide}appliesToFloat(e){return e instanceof Oa}createPageFloat(e,t,n){let i=ya.REGION;const o=t.getPageFloatLayoutContext(i);t.getPageFloatLayoutContext(ya.PAGE).hasSameContainerAs(o)&&(i=ya.PAGE);const s=e.toNodePosition();t.flowName;const r=new Oa(s,i,t.flowName,e.footnotePolicy,e.floatMinWrapBlock);return t.addPageFloat(r),fi(r)}createPageFloatFragment(e,t,n,i){const o=e[0].float;return new Ra(o.floatReference,e,n,i)}findPageFloatFragment(e,t){const n=t.getPageFloatLayoutContext(e.floatReference).floatFragments.filter(e=>e instanceof Ra);return n.length,n[0]||null}adjustPageFloatArea(e,t,n){e.isFootnote=!0,e.adjustContentRelativeSize=!1;const i=e.element;e.vertical=n.layoutContext.applyFootnoteStyle(t.vertical,n.layoutContext.nodeContext&&"rtl"===n.layoutContext.nodeContext.direction,i),e.convertPercentageSizesToPx(i),n.setComputedInsets(i,e),n.setComputedWidthAndHeight(i,e)}forbid(e,t){const n=e;switch(n.footnotePolicy){case Bt.line:{const e=new La(n);t.addLayoutConstraint(e,n.floatReference);break}}}});const ka={page:!0,left:!0,right:!0,recto:!0,verso:!0,column:!0,region:!0};function Fa(e){return!!ka[e]}const Da={avoid:!0,"avoid-page":!0,"avoid-column":!0,"avoid-region":!0};function _a(e){return!!Da[e]}function Ba(e,t){if(!e)return t;if(!t)return e;{const n=Fa(e),i=Fa(t);if(!n||!i)return i?t:n?e:_a(t)?t:_a(e)?e:t;switch(t){case"column":return e;case"region":return"column"===e?t:e;default:return t}}}function Ma(e){switch(e){case"left":case"right":case"recto":case"verso":return e;default:return"any"}}function Ua(e){switch(e){case"left":case"right":case"recto":case"verso":return e;default:return null}}function za(e,t,n,i){const o=e.viewNode;if(!o)return NaN;if(1==o.nodeType){if(e.after||!e.inline){const n=t.getElementClientRect(o);if(n.right>=n.left&&n.bottom>=n.top)return e.after?i?n.left:n.bottom:i?n.right:n.top}return NaN}{let s=NaN;const r=o.ownerDocument.createRange(),a=o.textContent.length;if(!a)return NaN;e.after&&(n+=a),n>=a&&(n=a-1),r.setStart(o,n),r.setEnd(o,n+1);let l=t.getRangeClientRects(r);i&&function(e){if(null==ne){const t=e.ownerDocument,n=t.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.width="100px",n.style.height="100px",n.style.overflow="hidden",n.style.lineHeight="16px",n.style.fontSize="16px",U(n,"writing-mode","vertical-rl"),e.appendChild(n);const i=t.createTextNode("a a a a a a a a a a a a a a a a");n.appendChild(i);const o=t.createRange();o.setStart(i,0),o.setEnd(i,1);const s=o.getBoundingClientRect();ne=s.right-s.left<10,e.removeChild(n)}return ne}(document.body)&&(l=function(e,t,n){const i=n.ownerDocument.createRange();i.setStart(n,0),i.setEnd(n,n.textContent.length);const o=e.getRangeClientRects(i),s=[];for(const e of t){let t;for(t=0;t<o.length;t++){const n=o[t];if(e.top>=n.top&&e.bottom<=n.bottom&&Math.abs(e.left-n.left)<1){s.push({top:e.top,left:n.left,bottom:e.bottom,right:n.right});break}}t==o.length&&(h.warn("Could not fix character box"),s.push(e))}return s}(t,l,o));let c=0;for(const e of l){const t=i?e.bottom-e.top:e.right-e.left;e.right>e.left&&e.bottom>e.top&&(isNaN(s)||t>c)&&(s=i?e.left:e.bottom,c=t)}return s}}function Va(e,t,n){const i=t.clientLayout.getElementClientRect(e),o=t.getComputedMargin(e);return n?i.width+o.left+o.right:i.height+o.top+o.bottom}function Ha(e){for(;e;){if(e.parentNode===e.ownerDocument)return!1;e=e.parentNode}return!0}function Ga(e,t){if(!e)return;let n;for(;(n=e.lastChild)!=t;)e.removeChild(n)}function $a(e){return!!e.getAttribute(qr)}function Wa(e){if(!e)return!1;const t=e.viewNode;return!(!t||1!==t.nodeType)&&$a(t)}u("SIMPLE_PROPERTY",(function(e){const t=e.name,n=e.value;switch(t){case"page-break-before":case"page-break-after":case"page-break-inside":return{name:t.replace(/^page-/,""),value:n===Bt.always?Bt.page:n,important:e.important};default:return e}}));class Xa{calculateOffset(e){return ja(this.getNodeContext(),e.collectElementsOffset())}breakPositionChosen(e){}getNodeContext(){return null}}function ja(e,t){return{current:t.reduce((t,n)=>t+n.calculateOffset(e),0),minimum:t.reduce((t,n)=>t+n.calculateMinimumOffset(e),0)}}class Ka extends Xa{constructor(e,t,n,i){super(),this.position=e,this.breakOnEdge=t,this.overflows=n,this.computedBlockSize=i,this.isEdgeUpdated=!1,this.edge=0,this.overflowIfRepetitiveElementsDropped=n}findAcceptableBreak(e,t){return this.updateOverflows(e),t<this.getMinBreakPenalty()?null:e.findEdgeBreakPosition(this)}getMinBreakPenalty(){if(!this.isEdgeUpdated)throw new Error("EdgeBreakPosition.prototype.updateEdge not called");const e=this.isFirstContentOfRepetitiveElementsOwner()&&!this.overflowIfRepetitiveElementsDropped;return(_a(this.breakOnEdge)?1:0)+(this.overflows&&!e?3:0)+(this.position.parent?this.position.parent.breakPenalty:0)}updateEdge(e){const t=e.calculateClonedPaddingBorder(this.position);this.edge=za(this.position,e.clientLayout,0,e.vertical)+t,this.isEdgeUpdated=!0}updateOverflows(e){this.isEdgeUpdated||this.updateEdge(e);const t=this.edge,n=this.calculateOffset(e);this.overflowIfRepetitiveElementsDropped=e.isOverflown(t+(e.vertical?-1:1)*n.minimum),this.overflows=this.position.overflow=e.isOverflown(t+(e.vertical?-1:1)*n.current)}getNodeContext(){return this.position}isFirstContentOfRepetitiveElementsOwner(){const e=this.getNodeContext();if(!e||!e.parent)return!1;const{formattingContext:t}=e.parent;if(!Br.isInstanceOfRepetitiveElementsOwnerFormattingContext(t))return!1;const n=t.getRepetitiveElements();return!!n&&n.isFirstContentNode(e)}}const Ya="data-vivliostyle-flow-root";function qa(e){const t=e.toString();let n;switch(t){case"inline-flex":n="flex";break;case"inline-grid":n="grid";break;case"inline-table":n="table";break;case"inline":case"table-row-group":case"table-column":case"table-column-group":case"table-header-group":case"table-footer-group":case"table-row":case"table-cell":case"table-caption":case"inline-block":n="block";break;default:n=t}return Ct(n)}function Za(e){return e===Bt.absolute||e===Bt.fixed}function Qa(e,t,n,i){return e===Bt.none||(Za(t)?(n=Bt.none,e=qa(e)):(n&&n!==Bt.none||i)&&(e=qa(e))),{display:e,position:t,float:n}}function Ja(e,t,n,i){return Qa(e,t,n,i).display===Bt.block}function el(e){switch(e.toString()){case"inline":case"inline-block":case"inline-list-item":case"inline-flex":case"inline-grid":case"ruby":case"inline-table":return!0;default:return!1}}class tl{find(e){const n=p(t.HOOKS.RESOLVE_LAYOUT_PROCESSOR);for(let t=0;t<n.length;t++){const i=n[t](e);if(i)return i}throw new Error(`No processor found for a formatting context: ${e.getName()}`)}}class nl{layout(e,t,n){return t.isFloatNodeContext(e)?t.layoutFloatOrFootnote(e):t.isBreakable(e)?t.layoutBreakableBlock(e):t.layoutUnbreakable(e)}createEdgeBreakPosition(e,t,n,i){return new Ka(e.copy(),t,n,i)}startNonInlineElementNode(e){return!1}afterNonInlineElementNode(e,t){return!1}clearOverflownViewNodes(e,t,n,i){if(!n.viewNode)return;if(!n.viewNode.parentNode)return;const o=n.viewNode.parentNode;Ga(o,n.viewNode),i&&o.removeChild(n.viewNode)}finishBreak(e,t,n,i){const o=n||null!=t.viewNode&&1==t.viewNode.nodeType&&!t.after;return e.clearOverflownViewNodes(t,o),i&&(e.fixJustificationIfNeeded(t,!0),e.layoutContext.processFragmentedBlockEdge(o?t:t.parent)),fi(!0)}}class il{constructor(e){this.parent=e,this.formattingContextType="Block"}getName(){return"Block formatting context (BlockFormattingContext)"}isFirstTime(e,t){return t}getParent(){return this.parent}saveState(){}restoreState(e){}}const ol=new nl,sl=Fr.isInstanceOfBlockFormattingContext;u(t.HOOKS.RESOLVE_FORMATTING_CONTEXT,(e,t,n,i,o,s)=>{const r=e.parent;return!r&&e.formattingContext?null:r&&e.formattingContext!==r.formattingContext?null:e.establishesBFC||!e.formattingContext&&Ja(n,i,o,s)?new il(r?r.formattingContext:null):null}),u(t.HOOKS.RESOLVE_LAYOUT_PROCESSOR,e=>e instanceof il?ol:null);class rl{constructor(){this.initialBreakPositions=null,this.initialStateOfFormattingContext=null}layout(e,t){return this.prepareLayout(e,t),this.tryLayout(e,t)}tryLayout(e,t){const n=pi("AbstractLayoutRetryer.tryLayout");this.saveState(e,t);const i=this.resolveLayoutMode(e);return i.doLayout(e,t).then(o=>{let s=i.accept(o,t);s=i.postLayout(o,this.initialPosition,t,s),s?n.finish(o):(this.initialPosition,this.clearNodes(this.initialPosition),this.restoreState(e,t),this.tryLayout(this.initialPosition,t).thenFinish(n))}),n.result()}prepareLayout(e,t){}clearNodes(e){const t=e.viewNode||e.parent.viewNode;let n,i;for(;n=t.lastChild;)t.removeChild(n);for(;i=t.nextSibling;)i.parentNode.removeChild(i)}saveState(e,t){this.initialPosition=e.copy(),this.initialBreakPositions=[].concat(t.breakPositions),this.initialFragmentLayoutConstraints=[].concat(t.fragmentLayoutConstraints),e.formattingContext&&(this.initialStateOfFormattingContext=e.formattingContext.saveState())}restoreState(e,t){t.breakPositions=this.initialBreakPositions,t.fragmentLayoutConstraints=this.initialFragmentLayoutConstraints,e.formattingContext&&e.formattingContext.restoreState(this.initialStateOfFormattingContext)}}class al{initialState(e){return{nodeContext:e,atUnforcedBreak:!1,break:!1}}startNonDisplayableNode(e){}afterNonDisplayableNode(e){}startIgnoredTextNode(e){}afterIgnoredTextNode(e){}startNonElementNode(e){}afterNonElementNode(e){}startInlineElementNode(e){}afterInlineElementNode(e){}startNonInlineElementNode(e){}afterNonInlineElementNode(e){}finish(e){}}class ll{constructor(e,t){this.strategy=e,this.layoutContext=t}iterate(e){const t=this.strategy,n=t.initialState(e),i=pi("LayoutIterator");return i.loopWithFrame(e=>{let i;for(;n.nodeContext;){i=n.nodeContext.viewNode?1!==n.nodeContext.viewNode.nodeType?Jr(n.nodeContext.viewNode,n.nodeContext.whitespace)?n.nodeContext.after?t.afterIgnoredTextNode(n):t.startIgnoredTextNode(n):n.nodeContext.after?t.afterNonElementNode(n):t.startNonElementNode(n):n.nodeContext.inline?n.nodeContext.after?t.afterInlineElementNode(n):t.startInlineElementNode(n):n.nodeContext.after?t.afterNonInlineElementNode(n):t.startNonInlineElementNode(n):n.nodeContext.after?t.afterNonDisplayableNode(n):t.startNonDisplayableNode(n);const o=(i&&i.isPending()?i:fi(!0)).thenAsync(()=>n.break?fi(null):this.layoutContext.nextInTree(n.nodeContext,n.atUnforcedBreak));if(o.isPending())return void o.then(t=>{n.break?e.breakLoop():(n.nodeContext=t,e.continueLoop())});if(n.break)return void e.breakLoop();n.nodeContext=o.get()}t.finish(n),e.breakLoop()}).then(()=>{i.finish(n.nodeContext)}),i.result()}}class hl extends al{constructor(e){super(),this.leadingEdge=e}startNonInlineBox(e){}endEmptyNonInlineBox(e){}endNonInlineBox(e){}initialState(e){return{nodeContext:e,atUnforcedBreak:!!this.leadingEdge&&e.after,break:!1,leadingEdge:this.leadingEdge,breakAtTheEdge:null,onStartEdges:!1,leadingEdgeContexts:[],lastAfterNodeContext:null}}processForcedBreak(e,t){const n=!e.leadingEdge&&Fa(e.breakAtTheEdge);if(n){const n=e.nodeContext=e.leadingEdgeContexts[0]||e.nodeContext;n.viewNode.parentNode.removeChild(n.viewNode),t.pageBreakType=e.breakAtTheEdge}return n}saveEdgeAndProcessOverflow(e,t){const n=t.checkOverflowAndSaveEdgeAndBreakPosition(e.lastAfterNodeContext,null,!0,e.breakAtTheEdge);return n&&(e.nodeContext=(e.lastAfterNodeContext||e.nodeContext).modify(),e.nodeContext.overflow=!0),n}processLayoutConstraint(e,t,n){let i=e.nodeContext;const o=!t.allowLayout(i);return o&&(n.checkOverflowAndSaveEdgeAndBreakPosition(e.lastAfterNodeContext,null,!1,e.breakAtTheEdge),i=e.nodeContext=i.modify(),i.overflow=!0),o}startNonElementNode(e){e.onStartEdges=!1}startNonInlineElementNode(e){return e.leadingEdgeContexts.push(e.nodeContext.copy()),e.breakAtTheEdge=Ba(e.breakAtTheEdge,e.nodeContext.breakBefore),e.onStartEdges=!0,this.startNonInlineBox(e)}afterNonInlineElementNode(e){let t,n;return e.onStartEdges?(t=this.endEmptyNonInlineBox(e),n=t&&t.isPending()?t:fi(!0),n=n.thenAsync(()=>(e.break||(e.leadingEdgeContexts=[],e.leadingEdge=!1,e.atUnforcedBreak=!1,e.breakAtTheEdge=null),fi(!0)))):(t=this.endNonInlineBox(e),n=t&&t.isPending()?t:fi(!0)),n.thenAsync(()=>(e.break||(e.onStartEdges=!1,e.lastAfterNodeContext=e.nodeContext.copy(),e.breakAtTheEdge=Ba(e.breakAtTheEdge,e.nodeContext.breakAfter)),fi(!0)))}}let cl=[];const ul=(new DOMParser).parseFromString(`<root xmlns="${L.SHADOW}"/>`,"text/xml"),dl=["footnote-marker","first-5-lines","first-4-lines","first-3-lines","first-2-lines","first-line","first-letter","before","","after"],pl="data-adapt-pseudo";function fl(e){return e.getAttribute(pl)||""}function gl(e,t){e.setAttribute(pl,t)}class ml{constructor(e,t,n,i,o){this.element=e,this.style=t,this.styler=n,this.context=i,this.exprContentListener=o,this.contentProcessed={}}getStyle(e,t){const n=fl(e);this.styler&&n&&n.match(/after$/)&&(this.style=this.styler.getStyle(this.element,!0),this.styler=null);const i=Xo(this.style,"_pseudos")[n]||{};if(n.match(/^first-/)&&!i["x-first-pseudo"]){let e,t=1;"first-letter"==n?t=0:null!=(e=n.match(/^first-([0-9]+)-lines$/))&&(t=e[1]-0),i["x-first-pseudo"]=new _o(new It(t),0)}return i}processContent(e,t){const n=fl(e);if(!this.contentProcessed[n]){this.contentProcessed[n]=!0;const i=t.content;i&&Ea(i)&&i.visit(new wa(e,this.context,i,this.exprContentListener))}}}_r.isInstanceOfAfterIfContinuesLayoutConstraint;const bl=vo.registerFragmentIndex;class wl{constructor(e,t){this.sourceNode=e,this.styler=t}createElement(e,t){const n=t.viewNode.ownerDocument.createElement("div"),i=new Pl(e,n,t),o=i.getColumn().pageBreakType;return i.getColumn().pageBreakType=null,i.layout(this.createNodePositionForPseudoElement(),!0).thenAsync(()=>{this.styler.contentProcessed["after-if-continues"]=!1,i.getColumn().pageBreakType=o;const e=n.firstChild;return U(e,"display","block"),fi(e)})}createNodePositionForPseudoElement(){const e=ul.createElementNS(L.XHTML,"div");gl(e,"after-if-continues");const t=this.createShadowContext(e),n={node:e,shadowType:t.type,shadowContext:t,nodeShadow:null,shadowSibling:null};return new pa({steps:[n],offsetInNode:0,after:!1,preprocessedTextContent:null})}createShadowContext(e){return new ha(this.sourceNode,e,null,null,null,Ur.ShadowType.ROOTED,this.styler)}}class El{constructor(e,t,n){this.nodeContext=e,this.afterIfContinues=t,this.pseudoElementHeight=n,this.flagmentLayoutConstraintType="AfterIfContinue"}allowLayout(e,t,n){return!(t&&!e||e&&e.overflow)}nextCandidate(e){return!1}postLayout(e,t,n,i){}finishBreak(e,t){return this.getRepetitiveElements().affectTo(e)?this.afterIfContinues.createElement(t,this.nodeContext).thenAsync(e=>(this.nodeContext.viewNode.appendChild(e),fi(!0))):fi(!0)}getRepetitiveElements(){return new yl(this.nodeContext,this.pseudoElementHeight)}equalsTo(e){return e instanceof El&&this.afterIfContinues==e.afterIfContinues}getPriorityOfFinishBreak(){return 9}}class yl{constructor(e,t){this.nodeContext=e,this.pseudoElementHeight=t}calculateOffset(e){return this.affectTo(e)?this.pseudoElementHeight:0}calculateMinimumOffset(e){return this.calculateOffset(e)}affectTo(e){if(!e)return!1;const t=e.shadowContext?e.shadowContext.owner:e.sourceNode;if(t===this.nodeContext.sourceNode)return!!e.after;for(let e=t.parentNode;e;e=e.parentNode)if(e===this.nodeContext.sourceNode)return!0;return!1}}function Sl(e,t){if(!e||!e.afterIfContinues||e.after||t.isFloatNodeContext(e))return fi(e);const n=e.afterIfContinues;return n.createElement(t,e).thenAsync(i=>{const o=function(e,t,n){const i=e.viewNode;i.appendChild(n);const o=Va(n,t,e.vertical);return i.removeChild(n),o}(e,t,i);return t.fragmentLayoutConstraints.push(new El(e,n,o)),fi(e)})}function Nl(e,t){return e.thenAsync(e=>Sl(e,t))}const vl={img:!0,svg:!0,audio:!0,video:!0};class Cl{constructor(e){this.constraints=e}allowLayout(e){return this.constraints.every(t=>t.allowLayout(e))}}class Tl extends Xa{constructor(e,t){super(),this.checkPoints=e,this.penalty=t,this.alreadyEvaluated=!1,this.breakNodeContext=null}findAcceptableBreak(e,t){return t<this.getMinBreakPenalty()?null:(this.alreadyEvaluated||(this.breakNodeContext=e.findBoxBreakPosition(this,t>0),this.alreadyEvaluated=!0),this.breakNodeContext)}getMinBreakPenalty(){return this.penalty}getNodeContext(){return this.alreadyEvaluated?this.breakNodeContext:this.checkPoints[this.checkPoints.length-1]}}function xl(e){switch(e){case"ruby":case"inline-block":case"inline-flex":case"inline-grid":case"inline-list-item":case"inline-table":return!0}return!1}class Il extends ba{constructor(e,t,n,i,o){super(e),this.layoutContext=t,this.clientLayout=n,this.layoutConstraint=i,this.pageFloatLayoutContext=o,this.flowRootFormattingContext=null,this.isFloat=!1,this.isFootnote=!1,this.startEdge=0,this.endEdge=0,this.beforeEdge=0,this.afterEdge=0,this.footnoteEdge=0,this.box=null,this.chunkPositions=null,this.bands=null,this.overflown=!1,this.breakPositions=null,this.pageBreakType=null,this.forceNonfitting=!0,this.leftFloatEdge=0,this.rightFloatEdge=0,this.bottommostFloatTop=0,this.stopAtOverflow=!0,this.lastAfterPosition=null,this.fragmentLayoutConstraints=[],this.pseudoParent=null,this.nodeContextOverflowingDueToRepetitiveElements=null,this.blockDistanceToBlockEndFloats=NaN,this.last=e.lastChild,this.viewDocument=e.ownerDocument,o.setContainer(this)}getTopEdge(){return this.vertical?this.startEdge:this.beforeEdge}getBottomEdge(){return this.vertical?this.endEdge:this.afterEdge}getLeftEdge(){return this.vertical?this.afterEdge:this.startEdge}getRightEdge(){return this.vertical?this.beforeEdge:this.endEdge}isFloatNodeContext(e){return!(!e.floatSide||this.isFloat&&!e.parent)}stopByOverflow(e){return this.stopAtOverflow&&!!e&&e.overflow}isOverflown(e){return this.vertical?e<this.footnoteEdge:e>this.footnoteEdge}getExclusions(){const e=this.pageFloatLayoutContext.getFloatFragmentExclusions();return this.exclusions.concat(e)}openAllViews(e){const t=this,n=pi("openAllViews"),i=e.steps;t.layoutContext.setViewRoot(t.element,t.isFootnote);let o=i.length-1,s=null;return n.loop(()=>{for(;o>=0;){const n=s,r=i[o];if(s=aa(r,n),o!==i.length-1||s.formattingContext||(s.formattingContext=t.flowRootFormattingContext),0==o&&(s.offsetInNode=t.calculateOffsetInNodeForNodeContext(e),s.after=e.after,s.preprocessedTextContent=e.preprocessedTextContent,s.after))break;const a=t.layoutContext.setCurrent(s,0==o&&0==s.offsetInNode);if(o--,a.isPending())return a}return fi(!1)}).then(()=>{n.finish(s)}),n.result()}calculateOffsetInNodeForNodeContext(e){return e.preprocessedTextContent?function(e,t){return Gr(e,t,1)}(e.preprocessedTextContent,e.offsetInNode):e.offsetInNode}maybePeelOff(e,t){if(e.firstPseudo&&e.inline&&!e.after&&0==e.firstPseudo.count&&1!=e.viewNode.nodeType){const t=e.viewNode.textContent.match(Al);return this.layoutContext.peelOff(e,t[0].length)}return fi(e)}buildViewToNextBlockEdge(e,t){const n=this;let i=!1;const o=pi("buildViewToNextBlockEdge");return o.loopWithFrame(o=>{e.viewNode&&!Wa(e)&&t.push(e.copy()),n.maybePeelOff(e,0).then(s=>{s!==e&&(Wa(e=s)||t.push(e.copy())),n.nextInTree(e).then(t=>{(e=t)?(!i&&n.layoutConstraint.allowLayout(e)||(i=!0,(e=e.modify()).overflow=!0),n.isFloatNodeContext(e)&&!n.vertical?n.layoutFloatOrFootnote(e).then(t=>{e=t,n.pageFloatLayoutContext.isInvalidated()&&(e=null),e?o.continueLoop():o.breakLoop()}):e.inline?o.continueLoop():o.breakLoop()):o.breakLoop()})})}).then(()=>{o.finish(e)}),o.result()}nextInTree(e,t){return Nl(this.layoutContext.nextInTree(e,t),this)}buildDeepElementView(e){if(!e.viewNode)return fi(e);let t=[];const n=e.sourceNode,i=this,o=pi("buildDeepElementView");return o.loopWithFrame(o=>{e.viewNode&&e.inline&&!Wa(e)?t.push(e.copy()):(t.length>0&&i.postLayoutBlock(e,t),t=[]),i.maybePeelOff(e,0).then(s=>{const r=s;if(r!==e){let i=r;for(;i&&i.sourceNode!=n;)i=i.parent;if(null==i)return e=r,void o.breakLoop();Wa(r)||t.push(r.copy())}i.nextInTree(r).then(t=>{(e=t)&&e.sourceNode!=n?i.layoutConstraint.allowLayout(e)?o.continueLoop():((e=e.modify()).overflow=!0,i.stopAtOverflow?o.breakLoop():o.continueLoop()):o.breakLoop()})})}).then(()=>{t.length>0&&i.postLayoutBlock(e,t),o.finish(e)}),o.result()}createFloat(e,t,n,i){const o=this.viewDocument.createElement("div");return this.vertical?(i>=this.height&&(i-=.1),U(o,"height",`${n}px`),U(o,"width",`${i}px`)):(n>=this.width&&(n-=.1),U(o,"width",`${n}px`),U(o,"height",`${i}px`)),U(o,"float",t),U(o,"clear",t),this.element.insertBefore(o,e),o}killFloats(){let e=this.element.firstChild;for(;e;){const t=e.nextSibling;if(1==e.nodeType){const t=e,n=t.style.cssFloat;if("left"!=n&&"right"!=n)break;this.element.removeChild(t)}e=t}}createFloats(){const e=this.element.firstChild,t=this.bands,n=this.vertical?this.getTopEdge():this.getLeftEdge(),i=this.vertical?this.getBottomEdge():this.getRightEdge();for(const o of t){const t=o.y2-o.y1;o.left=this.createFloat(e,"left",o.x1-n,t),o.right=this.createFloat(e,"right",i-o.x2,t)}}calculateEdge(e,t,n,i){let o;if(e&&Ha(e.viewNode))return NaN;if(e&&e.after&&!e.inline&&(o=za(e,this.clientLayout,0,this.vertical),!isNaN(o)))return o;let s=i-(e=t[n]).boxOffset;for(;;){if(o=za(e,this.clientLayout,s,this.vertical),!isNaN(o))return o;if(s>0)s--;else{if(--n<0)return this.beforeEdge;1!=(e=t[n]).viewNode.nodeType&&(s=e.viewNode.textContent.length)}}}parseComputedLength(e){if("number"==typeof e)return e;const t=e.match(/^(-?[0-9]*(\.[0-9]*)?)px$/);return t?parseFloat(t[0]):0}getComputedMargin(e){const t=this.clientLayout.getElementComputedStyle(e),n=new Xt(0,0,0,0);return t&&(n.left=this.parseComputedLength(t.marginLeft),n.top=this.parseComputedLength(t.marginTop),n.right=this.parseComputedLength(t.marginRight),n.bottom=this.parseComputedLength(t.marginBottom)),n}getComputedPaddingBorder(e){const t=this.clientLayout.getElementComputedStyle(e),n=new Xt(0,0,0,0);return t&&(n.left=this.parseComputedLength(t.borderLeftWidth)+this.parseComputedLength(t.paddingLeft),n.top=this.parseComputedLength(t.borderTopWidth)+this.parseComputedLength(t.paddingTop),n.right=this.parseComputedLength(t.borderRightWidth)+this.parseComputedLength(t.paddingRight),n.bottom=this.parseComputedLength(t.borderBottomWidth)+this.parseComputedLength(t.paddingBottom)),n}getComputedInsets(e){const t=this.clientLayout.getElementComputedStyle(e),n=new Xt(0,0,0,0);if(t){if("border-box"==t.boxSizing)return this.getComputedMargin(e);n.left=this.parseComputedLength(t.marginLeft)+this.parseComputedLength(t.borderLeftWidth)+this.parseComputedLength(t.paddingLeft),n.top=this.parseComputedLength(t.marginTop)+this.parseComputedLength(t.borderTopWidth)+this.parseComputedLength(t.paddingTop),n.right=this.parseComputedLength(t.marginRight)+this.parseComputedLength(t.borderRightWidth)+this.parseComputedLength(t.paddingRight),n.bottom=this.parseComputedLength(t.marginBottom)+this.parseComputedLength(t.borderBottomWidth)+this.parseComputedLength(t.paddingBottom)}return n}setComputedInsets(e,t){const n=this.clientLayout.getElementComputedStyle(e);n&&(t.marginLeft=this.parseComputedLength(n.marginLeft),t.borderLeft=this.parseComputedLength(n.borderLeftWidth),t.paddingLeft=this.parseComputedLength(n.paddingLeft),t.marginTop=this.parseComputedLength(n.marginTop),t.borderTop=this.parseComputedLength(n.borderTopWidth),t.paddingTop=this.parseComputedLength(n.paddingTop),t.marginRight=this.parseComputedLength(n.marginRight),t.borderRight=this.parseComputedLength(n.borderRightWidth),t.paddingRight=this.parseComputedLength(n.paddingRight),t.marginBottom=this.parseComputedLength(n.marginBottom),t.borderBottom=this.parseComputedLength(n.borderBottomWidth),t.paddingBottom=this.parseComputedLength(n.paddingBottom))}setComputedWidthAndHeight(e,t){const n=this.clientLayout.getElementComputedStyle(e);n&&(t.width=this.parseComputedLength(n.width),t.height=this.parseComputedLength(n.height))}layoutUnbreakable(e){return this.buildDeepElementView(e)}layoutFloat(e){const t=this,n=pi("layoutFloat"),i=e.viewNode,o=e.floatSide;return U(i,"float","none"),U(i,"display","inline-block"),U(i,"vertical-align","top"),t.buildDeepElementView(e).then(s=>{const r=t.clientLayout.getElementClientRect(i),a=t.getComputedMargin(i);let l=new $t(r.left-a.left,r.top-a.top,r.right+a.right,r.bottom+a.bottom),h=t.startEdge,c=t.endEdge,u=e.parent;for(;u&&u.inline;)u=u.parent;if(u){const n=u.viewNode.ownerDocument.createElement("div");n.style.left="0px",n.style.top="0px",t.vertical?(n.style.bottom="0px",n.style.width="1px"):(n.style.right="0px",n.style.height="1px"),u.viewNode.appendChild(n);const i=t.clientLayout.getElementClientRect(n);h=Math.max(t.getStartEdge(i),h),c=Math.min(t.getEndEdge(i),c),u.viewNode.removeChild(n);const s=t.vertical?l.y2-l.y1:l.x2-l.x1;"left"==o?c=Math.max(c,h+s):h=Math.min(h,c-s),u.viewNode.appendChild(e.viewNode)}let d=new $t(h,t.getBoxDir()*t.beforeEdge,c,t.getBoxDir()*t.afterEdge),p=l;t.vertical&&(p=rn(l));const f=t.getBoxDir();if(p.y1<t.bottommostFloatTop*f){const e=p.y2-p.y1;p.y1=t.bottommostFloatTop*f,p.y2=p.y1+e}(function(e,t,n,i){let o=n.y1;const s=n.x2-n.x1,r=n.y2-n.y1;let a=cn(t,o);for(;;){const l=o+r;if(l>e.y2)return!1;let h=e.x1,c=e.x2;for(let e=a;e<t.length&&t[e].y1<l;e++){const n=t[e];n.x1>h&&(h=n.x1),n.x2<c&&(c=n.x2)}if(h+s<=c||a>=t.length)return"left"==i?(n.x1=h,n.x2=h+s):(n.x1=c-s,n.x2=c),n.y2+=o-n.y1,n.y1=o,!0;o=t[a].y2,a++}})(d,t.bands,p,o),t.vertical&&(l=an(p));const g=t.getComputedInsets(i);let m;U(i,"width",`${l.x2-l.x1-g.left-g.right}px`),U(i,"height",`${l.y2-l.y1-g.top-g.bottom}px`),U(i,"position","absolute"),e.display,U(i,"display",e.display);let b=null;if(u&&(b=u.containingBlockForAbsolute?u:u.getContainingBlockForAbsolute()),b){const e=b.viewNode.ownerDocument.createElement("div");e.style.position="absolute",b.vertical?e.style.right="0":e.style.left="0",e.style.top="0",b.viewNode.appendChild(e),m=t.clientLayout.getElementClientRect(e),b.viewNode.removeChild(e)}else m={left:t.getLeftEdge()-t.paddingLeft,right:t.getRightEdge()+t.paddingRight,top:t.getTopEdge()-t.paddingTop};(b?b.vertical:t.vertical)?U(i,"right",`${m.right-l.x2}px`):U(i,"left",`${l.x1-m.left}px`),U(i,"top",`${l.y1-m.top}px`),e.clearSpacer&&(e.clearSpacer.parentNode.removeChild(e.clearSpacer),e.clearSpacer=null);const w=t.vertical?l.x1:l.y2,E=t.vertical?l.x2:l.y1;t.isOverflown(w)&&0!=t.breakPositions.length?((e=e.modify()).overflow=!0,n.finish(e)):(t.killFloats(),d=new $t(t.getLeftEdge(),t.getTopEdge(),t.getRightEdge(),t.getBottomEdge()),t.vertical&&(d=rn(d)),function(e,t,n,i,o){for(i||(i=[new Kt(n.y1,n.y2,n.x1,n.x2)]);i.length>0&&i[0].y2<=e.y1;)i.shift();if(0==i.length)return;let s;i[0].y1<e.y1&&(i[0].y1=e.y1);const r=0==t.length?e.y1:t[t.length-1].y2;r<e.y2&&t.push(new Kt(r,e.y2,e.x1,e.x2));let a=cn(t,i[0].y1);for(const n of i){if(a==t.length)break;for(t[a].y1<n.y1&&(s=t[a],a++,t.splice(a,0,new Kt(n.y1,s.y2,s.x1,s.x2)),s.y2=n.y1);a<t.length&&(s=t[a++],s.y2>n.y2&&(t.splice(a,0,new Kt(n.y2,s.y2,s.x1,s.x2)),s.y2=n.y2),n.x1!=n.x2&&("left"==o?s.x1=Math.min(n.x2,e.x2):s.x2=Math.max(n.x1,e.x1)),s.y2!=n.y2););}hn(e,t)}(d,t.bands,p,null,o),t.createFloats(),"left"==o?t.leftFloatEdge=w:t.rightFloatEdge=w,t.bottommostFloatTop=E,t.updateMaxReachedAfterEdge(w),n.finish(s))}),n.result()}setupFloatArea(e,t,n,i,o,s){const r=this.pageFloatLayoutContext,a=r.getContainer(t),l=e.element;a.element.parentNode.appendChild(l),e.isFloat=!0,e.originX=a.originX,e.originY=a.originY,e.vertical=a.vertical,e.marginLeft=e.marginRight=e.marginTop=e.marginBottom=0,e.borderLeft=e.borderRight=e.borderTop=e.borderBottom=0,e.paddingLeft=e.paddingRight=e.paddingTop=e.paddingBottom=0,e.exclusions=(a.exclusions||[]).concat(),e.forceNonfitting=!r.hasFloatFragments(),e.innerShape=null;const h=a.getPaddingRect();e.setHorizontalPosition(h.x1-a.originX,h.x2-h.x1),e.setVerticalPosition(h.y1-a.originY,h.y2-h.y1),o.adjustPageFloatArea(e,a,this),e.init();const c=!!r.setFloatAreaDimensions(e,t,n,i,!0,!r.hasFloatFragments(),s);return c?(e.killFloats(),e.init()):a.element.parentNode.removeChild(l),c}createPageFloatArea(e,t,n,i,o){const s=this.element.ownerDocument.createElement("div");U(s,"position","absolute");const r=this.pageFloatLayoutContext.getPageFloatLayoutContext(e.floatReference),a=new xa(null,ya.COLUMN,null,this.pageFloatLayoutContext.flowName,e.nodePosition,null,null),l=r.getContainer(),h=new Fl(t,s,this.layoutContext.clone(),this.clientLayout,this.layoutConstraint,a,l);return a.setContainer(h),this.setupFloatArea(h,e.floatReference,t,n,i,o)?h:null}layoutSinglePageFloatFragment(e,t,n,i,o,s,r){const a=this.pageFloatLayoutContext,l=r?r.continuations:[],h=(e=l.concat(e))[0].float,c=a.getPageFloatPlacementCondition(h,t,n),u=this.createPageFloatArea(h,t,s,o,c),d={floatArea:u,pageFloatFragment:null,newPosition:null};if(!u)return fi(d);const p=pi("layoutSinglePageFloatFragment");let f=!1,g=0;return p.loopWithFrame(t=>{if(g>=e.length)return void t.breakLoop();const n=e[g],o=new pa(n.nodePosition);u.layout(o,!0).then(e=>{d.newPosition=e,!e||i?(g++,t.continueLoop()):(f=!0,t.breakLoop())})}).then(()=>{if(!f){const n=a.setFloatAreaDimensions(u,h.floatReference,t,s,!1,i,c);if(n){const t=o.createPageFloatFragment(e,n,u,!!d.newPosition);a.addPageFloatFragment(t,!0),d.pageFloatFragment=t}else f=!0}p.finish(d)}),p.result()}layoutPageFloatInner(e,t,n,i){const o=this.pageFloatLayoutContext,s=e.float;function r(t,n){n?o.removePageFloatFragment(n,!0):t&&t.element.parentNode.removeChild(t.element),o.restoreStashedFragments(s.floatReference),o.deferPageFloat(e)}o.stashEndFloatFragments(s);const a=pi("layoutPageFloatInner"),l=this;return this.layoutSinglePageFloatFragment([e],s.floatSide,s.clearSide,!o.hasFloatFragments(),t,n,i).then(e=>{const t=e.floatArea,n=e.pageFloatFragment,h=e.newPosition;n?l.layoutStashedPageFloats(s.floatReference,[i]).then(e=>{if(e){if(o.addPageFloatFragment(n),o.discardStashedFragments(s.floatReference),h){const e=new Ta(s,h.primary);o.deferPageFloat(e)}a.finish(!0)}else r(t,n),a.finish(!1)}):(r(t,n),a.finish(!1))}),a.result()}layoutStashedPageFloats(e,t){const n=this.pageFloatLayoutContext,i=n.getStashedFloatFragments(e),o=[],s=[];let r=!1;const a=pi("layoutStashedPageFloats"),l=this;let h=0;return a.loopWithFrame(e=>{if(h>=i.length)return void e.breakLoop();const n=i[h];if(t.includes(n))return h++,void e.continueLoop();const a=(new Pa).findByFloat(n.continuations[0].float);l.layoutSinglePageFloatFragment(n.continuations,n.floatSide,null,!1,a,null).then(t=>{const n=t.floatArea;n&&o.push(n);const i=t.pageFloatFragment;i?(s.push(i),h++,e.continueLoop()):(r=!0,e.breakLoop())})}).then(()=>{r?(s.forEach(e=>{n.removePageFloatFragment(e,!0)}),o.forEach(e=>{const t=e.element;t&&t.parentNode&&t.parentNode.removeChild(t)})):i.forEach(e=>{const t=e.area.element;t&&t.parentNode&&t.parentNode.removeChild(t)}),a.finish(!r)}),a.result()}setFloatAnchorViewNode(e){const t=e.viewNode.parentNode,n=t.ownerDocument.createElement("span");n.setAttribute(qr,"1"),"footnote"===e.floatSide&&this.layoutContext.applyPseudoelementStyle(e,"footnote-call",n),t.appendChild(n),t.removeChild(e.viewNode);const i=e.modify();return i.after=!0,i.viewNode=n,i}resolveFloatReferenceFromColumnSpan(e,t,n){const i=this,o=pi("resolveFloatReferenceFromColumnSpan"),s=this.pageFloatLayoutContext,r=s.getPageFloatLayoutContext(ya.REGION);return s.getContainer().width<r.getContainer().width&&e===ya.COLUMN?t===Bt.auto?this.buildDeepElementView(n.copy()).then(t=>{const n=t.viewNode;let s=yr(i.clientLayout,n,[Er.MIN_CONTENT_INLINE_SIZE])[Er.MIN_CONTENT_INLINE_SIZE];const r=i.getComputedMargin(n);i.vertical?s+=r.top+r.bottom:s+=r.left+r.right,s>i.width?o.finish(ya.REGION):o.finish(e)}):t===Bt.all?o.finish(ya.REGION):o.finish(e):o.finish(e),o.result()}layoutPageFloat(e){const t=this,n=this.pageFloatLayoutContext,i=(new Pa).findByNodeContext(e);let o;const s=n.findPageFloatByNodePosition(e.toNodePosition());return o=s?fi(s):i.createPageFloat(e,n,this),o.thenAsync(o=>{const s=ra(e,0),r=t.setFloatAnchorViewNode(e),a=i.findPageFloatFragment(o,n),l=new Ta(o,s);if(a&&a.hasFloat(o))return n.registerPageFloatAnchor(o,r.viewNode),fi(r);if(n.isForbidden(o)||n.hasPrecedingFloatsDeferredToNext(o))return n.deferPageFloat(l),n.registerPageFloatAnchor(o,r.viewNode),fi(r);if(t.nodeContextOverflowingDueToRepetitiveElements)return fi(null);{const e=za(r,t.clientLayout,0,t.vertical);return t.isOverflown(e)?fi(r):t.layoutPageFloatInner(l,i,e,a).thenAsync(e=>e?fi(null):(n.registerPageFloatAnchor(o,r.viewNode),fi(r)))}})}createJustificationAdjustmentElement(e,t,n,i){const o=t.createElement("span");o.style.visibility="hidden",o.style.verticalAlign="top",o.setAttribute(qr,"1");const s=t.createElement("span");s.style.fontSize="0",s.style.lineHeight="0",s.textContent=" #",o.appendChild(s),o.style.display="block",o.style.textIndent="0",o.style.textAlign="left",n.insertBefore(o,e);const r=this.clientLayout.getElementClientRect(s);o.style.textAlign="right";const a=this.clientLayout.getElementClientRect(s);o.style.textAlign="",function(e){if(null===ie){const t=e.ownerDocument,n=t.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.width="30px",n.style.height="100px",n.style.lineHeight="16px",n.style.fontSize="16px",n.style.textAlign="justify",e.appendChild(n);const i=t.createTextNode("a | ");n.appendChild(i);const o=t.createElement("span");o.style.display="inline-block",o.style.width="30px",n.appendChild(o);const s=t.createRange();s.setStart(i,0),s.setEnd(i,3);const r=s.getBoundingClientRect();ie=r.right<27,e.removeChild(n)}return ie}(document.body)?o.style.display="inline":o.style.display="inline-block";const l=i?a.top-r.top:a.left-r.left,h=l>=1?`${l-1}px`:"100%";return i?o.style.paddingTop=h:o.style.paddingLeft=h,o}addAndAdjustJustificationElement(e,t,n,i,o,s){return function(e,t,n,i){if(function(e){if(null===oe){const t=e.ownerDocument,n=t.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.width="40px",n.style.height="100px",n.style.lineHeight="16px",n.style.fontSize="16px",n.style.textAlign="justify",e.appendChild(n);const i=t.createTextNode("a a-");n.appendChild(i);const o=t.createElement("span");o.style.display="inline-block",o.style.width="40px",n.appendChild(o);const s=t.createRange();s.setStart(i,2),s.setEnd(i,4);const r=s.getBoundingClientRect();oe=r.right<37,e.removeChild(n)}return oe}(document.body)){const o=Rl(e),s=t?n:n.previousSibling,r=s?s.textContent:"";if(r.charAt(r.length-1)===o){const e=n.ownerDocument,t=n.parentNode;!function(e){if(null===se){const t=e.ownerDocument,n=t.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.width="40px",n.style.height="100px",n.style.lineHeight="16px",n.style.fontSize="16px",n.style.textAlign="justify",e.appendChild(n);const i=t.createTextNode("a a-");n.appendChild(i),n.appendChild(t.createElement("wbr"));const o=t.createElement("span");o.style.display="inline-block",o.style.width="40px",n.appendChild(o);const s=t.createRange();s.setStart(i,2),s.setEnd(i,4);const r=s.getBoundingClientRect();se=r.right<37,e.removeChild(n)}return se}(document.body)?t.insertBefore(e.createElement("wbr"),i):t.insertBefore(e.createTextNode(" "),i)}}}(e,t,n,i),this.createJustificationAdjustmentElement(i,o,s,e.vertical)}compensateJustificationLineHeight(e,t,n){const i=this.clientLayout.getElementClientRect(e),o=this.clientLayout.getElementClientRect(t);n.vertical?(t.style.marginRight=`${o.right-i.right}px`,t.style.width="0px"):(t.style.marginTop=`${i.top-o.top}px`,t.style.height="0px"),t.setAttribute(qr,"1")}fixJustificationIfNeeded(e,t){if(e.after&&!e.inline)return;if(t){let t="";for(let n=e.parent;n&&!t;n=n.parent)!n.inline&&n.viewNode&&(t=n.viewNode.style.textAlign);if("justify"!==t)return}const n=e.viewNode,i=n.ownerDocument,o=t&&(e.after||1!=n.nodeType);let s=o?n.nextSibling:n;s&&!s.parentNode&&(s=null);const r=n.parentNode||e.parent&&e.parent.viewNode;if(!r)return;const a=this.addAndAdjustJustificationElement(e,o,n,s,i,r);if(!t){const t=i.createElement("div");r.insertBefore(t,s),this.compensateJustificationLineHeight(a,t,e)}}processLineStyling(e,t,n){const i=this,o=pi("processLineStyling");let s=n.concat([]);n.splice(0,n.length);let r=0,a=e.firstPseudo;return 0==a.count&&(a=a.outer),o.loopWithFrame(n=>{if(!a)return void n.breakLoop();const o=i.findLinePositions(s),l=a.count-r;if(o.length<=l)return void n.breakLoop();const h=i.findAcceptableBreakInside(s,o[l-1],!0);null!=h?i.finishBreak(h,!1,!1).then(()=>{r+=l,i.layoutContext.peelOff(h,0).then(o=>{e=o,i.fixJustificationIfNeeded(e,!1),a=e.firstPseudo,s=[],i.buildViewToNextBlockEdge(e,s).then(e=>{t=e,n.continueLoop()})})}):n.breakLoop()}).then(()=>{Array.prototype.push.apply(n,s),o.finish(t)}),o.result()}isLoneImage(e){return!(2!=e.length&&this.breakPositions.length>0)&&e[0].sourceNode==e[1].sourceNode&&vl[e[0].sourceNode.localName]}getTrailingMarginEdgeAdjustment(e){let t=0,n=0;for(let i=e.length-1;i>=0;i--){const o=e[i];if(!o.after||!o.viewNode||1!=o.viewNode.nodeType)break;const s=this.getComputedMargin(o.viewNode),r=this.vertical?-s.left:s.bottom;r>0?t=Math.max(t,r):n=Math.min(n,r)}return t-n}layoutBreakableBlock(e){const t=this,n=pi("layoutBreakableBlock"),i=[];return t.buildViewToNextBlockEdge(e,i).then(o=>{const s=i.length-1;if(s<0)return void n.finish(o);let r,a=t.calculateEdge(o,i,s,i[s].boxOffset),l=!1;if(!o||!Ha(o.viewNode)){const e=ja(o,t.collectElementsOffset());l=t.isOverflown(a+(t.vertical?-1:1)*e.minimum),t.isOverflown(a+(t.vertical?-1:1)*e.current)&&!t.nodeContextOverflowingDueToRepetitiveElements&&(t.nodeContextOverflowingDueToRepetitiveElements=o)}null==o&&(a+=t.getTrailingMarginEdgeAdjustment(i)),t.updateMaxReachedAfterEdge(a),r=e.firstPseudo?t.processLineStyling(e,o,i):fi(o),r.then(e=>{t.postLayoutBlock(e,i),i.length>0&&(t.saveBoxBreakPosition(i),l&&!t.isLoneImage(i)&&e&&((e=e.modify()).overflow=!0)),n.finish(e)})}),n.result()}postLayoutBlock(e,n){p(t.HOOKS.POST_LAYOUT_BLOCK).forEach(t=>{t(e,n,this)})}findEndOfLine(e,t,n){const i=this.vertical?e-1:e+1;let o,s=0,r=t[0].boxOffset,a=s,l=t.length-1,h=t[l].boxOffset;for(;r<h;){o=r+Math.ceil((h-r)/2),a=s;let e=l;for(;a<e;){const n=a+Math.ceil((e-a)/2);t[n].boxOffset>o?e=n-1:a=n}const c=this.calculateEdge(null,t,a,o);if(this.vertical?c<=i:c>=i){for(h=o-1;t[a].boxOffset==o;)a--;l=a}else n&&this.updateMaxReachedAfterEdge(c),r=o,s=a}return{nodeContext:t[a],index:r,checkPointIndex:a}}findAcceptableBreakInside(e,t,n){const i=this.findEndOfLine(t,e,!0);let o=i.nodeContext;const s=o.viewNode;if(1!=s.nodeType){const t=s;o=this.resolveTextNodeBreaker(o).breakTextNode(t,o,i.index,e,i.checkPointIndex,n)}return this.clearOverflownViewNodes(o,!1),o}resolveTextNodeBreaker(e){return p(t.HOOKS.RESOLVE_TEXT_NODE_BREAKER).reduce((t,n)=>n(e)||t,Ol.instance)}getRangeBoxes(e,t){const n=[],i=e.ownerDocument.createRange();let o=!1,s=e,r=null,a=!1,l=!0;for(;l;){let e=!0;do{let n=null;s==t&&(l=1===t.nodeType&&!(!t.firstChild||o)),1!=s.nodeType?(a||(i.setStartBefore(s),a=!0),r=s):o?o=!1:$a(s)?e=!a:"ruby"==s.localName||xl(this.clientLayout.getElementComputedStyle(s).display)?(e=!a,e&&(i.setStartBefore(s),a=!0,r=s),s.contains(t)&&(l=!1)):n=s.firstChild,n||(n=s.nextSibling,n||(o=!0,n=s.parentNode)),s=n}while(e&&l);if(a){i.setEndAfter(r);const e=this.clientLayout.getRangeClientRects(i);for(let t=0;t<e.length;t++)n.push(e[t]);a=!1}}return n}findLinePositions(e){const t=[],n=this.getRangeBoxes(e[0].viewNode,e[e.length-1].viewNode);n.sort(this.vertical?ia:na);let i=0,o=0,s=0,r=0,a=0;const l=this.getBoxDir();for(;;){if(a<n.length){const e=n[a];let t=1;if(r>0){const n=Math.max(this.getBoxSize(e),1);t=l*this.getBeforeEdge(e)<l*i?l*(this.getAfterEdge(e)-i)/n:l*this.getAfterEdge(e)>l*o?l*(o-this.getBeforeEdge(e))/n:1}if(0==r||t>=.6||t>=.2&&this.getStartEdge(e)>=s-1){s=this.getEndEdge(e),this.vertical?(i=0==r?e.right:Math.max(i,e.right),o=0==r?e.left:Math.min(o,e.left)):(i=0==r?e.top:Math.min(i,e.top),o=0==r?e.bottom:Math.max(o,e.bottom)),r++,a++;continue}}if(r>0&&(t.push(o),r=0),a>=n.length)break}return t.sort(Q),this.vertical&&t.reverse(),t}calculateClonedPaddingBorder(e){let t=0;return e.walkUpBlocks(e=>{if("clone"===e.inheritedProps["box-decoration-break"]){e.viewNode,Element;const n=this.getComputedPaddingBorder(e.viewNode);t+=e.vertical?-n.left:n.bottom,"table"===e.display&&(t+=e.blockBorderSpacing)}}),t}getOffsetByRepetitiveElements(e){let t;return t=e?e.calculateOffset(this):ja(null,this.collectElementsOffset()),t.current}findBoxBreakPosition(e,t){const n=this,i=e.checkPoints;let o,s,r=i[0];for(;r.parent&&r.inline;)r=r.parent;t?(o=1,s=1):(o=Math.max((r.inheritedProps.widows||2)-0,1),s=Math.max((r.inheritedProps.orphans||2)-0,1));const a=n.calculateClonedPaddingBorder(r),l=this.findLinePositions(i);let h=this.footnoteEdge-a;const c=this.getBoxDir(),u=this.getOffsetByRepetitiveElements(e);h-=c*u;const d=this.findFirstOverflowingEdgeAndCheckPoint(i);isNaN(d.edge)&&(d.edge=c*(1/0));let p=Z(l.length,e=>{const t=l[e];return n.vertical?t<h||t<=d.edge:t>h||t>=d.edge});const f=p<=0;if(f&&(p=Z(l.length,e=>n.vertical?l[e]<h:l[e]>h)),p=Math.min(l.length-o,p),p<s)return null;let g;if(h=l[p-1],g=f?d.checkPoint:this.findAcceptableBreakInside(e.checkPoints,h,t),g){const e=this.getAfterEdgeOfBlockContainer(g);!isNaN(e)&&e<h&&(h=e),this.computedBlockSize=c*(h-this.beforeEdge)+u}return g}getAfterEdgeOfBlockContainer(e){let t=e;do{t=t.parent}while(t&&t.inline);return t?(t=t.copy().modify(),t.after=!0,za(t,this.clientLayout,0,this.vertical)):NaN}findFirstOverflowingEdgeAndCheckPoint(e){const t=e.findIndex(e=>e.overflow);if(t<0)return{edge:NaN,checkPoint:null};const n=e[t];return{edge:this.calculateEdge(null,e,t,n.boxOffset),checkPoint:n}}findEdgeBreakPosition(e){return this.computedBlockSize=e.computedBlockSize+this.getOffsetByRepetitiveElements(e),e.position}finishBreak(e,t,n){e.formattingContext;let i=(new tl).find(e.formattingContext).finishBreak(this,e,t,n);return i||(i=ol.finishBreak(this,e,t,n)),i}findAcceptableBreakPosition(){let e=null,t=null,n=0,i=0;do{n=i,i=Number.MAX_VALUE;for(let o=this.breakPositions.length-1;o>=0&&!t;--o){e=this.breakPositions[o],t=e.findAcceptableBreak(this,n);const s=e.getMinBreakPenalty();s>n&&(i=Math.min(i,s))}}while(i>n&&!t&&this.forceNonfitting);return{breakPosition:t?e:null,nodeContext:t}}doFinishBreak(e,t,n,i){if(this.pageFloatLayoutContext.isInvalidated()||this.pageBreakType||!t)return fi(e);const o=this,s=pi("doFinishBreak");let r=!1;if(!e){if(this.forceNonfitting)return h.warn("Could not find any page breaks?!!"),o.skipTailEdges(t).then(e=>{e?((e=e.modify()).overflow=!1,o.finishBreak(e,r,!0).then(()=>{s.finish(e)})):s.finish(e)}),s.result();e=n,r=!0,o.computedBlockSize=i}return this.finishBreak(e,r,!0).then(()=>{s.finish(e)}),s.result()}isBreakable(e){if(e.after)return!0;switch(e.sourceNode.namespaceURI){case L.SVG:return!1}return!e.flexContainer}zeroIndent(e){const t=e.toString();return""==t||"auto"==t||!!t.match(/^0+(.0*)?[^0-9]/)}checkOverflowAndSaveEdge(e,t){if(!e)return!1;if(Ha(e.viewNode))return!1;let n=za(e,this.clientLayout,0,this.vertical);const i=ja(e,this.collectElementsOffset()),o=this.isOverflown(n+(this.vertical?-1:1)*i.minimum);if(this.isOverflown(n+(this.vertical?-1:1)*i.current)&&!this.nodeContextOverflowingDueToRepetitiveElements)this.nodeContextOverflowingDueToRepetitiveElements=e;else if(t){const e=n+this.getTrailingMarginEdgeAdjustment(t),o=this.footnoteEdge-this.getBoxDir()*i.current;n=this.vertical?Math.min(n,Math.max(e,o)):Math.max(n,Math.min(e,o))}return this.updateMaxReachedAfterEdge(n),o}checkOverflowAndSaveEdgeAndBreakPosition(e,t,n,i){if(!e)return!1;if(Ha(e.viewNode))return!1;const o=this.checkOverflowAndSaveEdge(e,t);return!n&&o||this.saveEdgeBreakPosition(e,i,o),o}applyClearance(e){if(!e.viewNode.parentNode)return!1;const t=this.getComputedMargin(e.viewNode),n=e.viewNode.ownerDocument.createElement("div");this.vertical?(n.style.bottom="0px",n.style.width="1px",n.style.marginRight=`${t.right}px`):(n.style.right="0px",n.style.height="1px",n.style.marginTop=`${t.top}px`),e.viewNode.parentNode.insertBefore(n,e.viewNode);let i=this.clientLayout.getElementClientRect(n);const o=this.getBeforeEdge(i),s=this.getBoxDir(),r=e.clearSide;let a=-this.getBoxDir()*(1/0);switch("all"===r&&(a=this.pageFloatLayoutContext.getPageFloatClearEdge(r,this)),r){case"left":a=s*Math.max(a*s,this.leftFloatEdge*s);break;case"right":a=s*Math.max(a*s,this.rightFloatEdge*s);break;default:a=s*Math.max(a*s,Math.max(this.rightFloatEdge*s,this.leftFloatEdge*s))}if(o*s>=a*s)return e.viewNode.parentNode.removeChild(n),!1;{const r=Math.max(1,(a-o)*s);this.vertical?n.style.width=`${r}px`:n.style.height=`${r}px`,i=this.clientLayout.getElementClientRect(n);const l=this.getAfterEdge(i);if(this.vertical){let e=l+t.right-a;e>0==t.right>=0&&(e+=t.right),n.style.marginLeft=`${e}px`}else{let e=a-(l+t.top);e>0==t.top>=0&&(e+=t.top),n.style.marginBottom=`${e}px`}return e.clearSpacer=n,!0}}isBFC(e){return!!sl(e)||!!Br.isInstanceOfRepetitiveElementsOwnerFormattingContext(e)}skipEdges(e,t,n){const i=e.after?e.parent&&e.parent.formattingContext:e.formattingContext;if(i&&!this.isBFC(i))return fi(e);const o=this,s=pi("skipEdges");let r=!n&&t&&e&&e.after,a=n,l=null,h=[],c=[],u=!1;function d(){return!!n||!t&&Fa(a)}function p(){(e=h[0]||e).viewNode.parentNode.removeChild(e.viewNode),o.pageBreakType=a}return s.loopWithFrame(n=>{for(;e;){e.formattingContext;const i=(new tl).find(e.formattingContext);do{if(!e.viewNode)break;if(e.inline&&1!=e.viewNode.nodeType){if(Jr(e.viewNode,e.whitespace))break;if(!e.after)return d()?p():o.checkOverflowAndSaveEdgeAndBreakPosition(l,null,!0,a)?(e=(o.stopAtOverflow&&l||e).modify()).overflow=!0:(e=e.modify()).breakBefore=a,void n.breakLoop()}if(!e.after){if(i&&i.startNonInlineElementNode(e))break;if(e.clearSide&&o.applyClearance(e)&&t&&0===o.breakPositions.length&&o.saveEdgeBreakPosition(e.copy(),a,!1),!o.isBFC(e.formattingContext)||Br.isInstanceOfRepetitiveElementsOwnerFormattingContext(e.formattingContext)||o.isFloatNodeContext(e)||e.flexContainer)return h.push(e.copy()),a=Ba(a,e.breakBefore),d()?p():!o.checkOverflowAndSaveEdgeAndBreakPosition(l,null,!0,a)&&o.layoutConstraint.allowLayout(e)||((e=(o.stopAtOverflow&&l||e).modify()).overflow=!0),void n.breakLoop()}if(1!=e.viewNode.nodeType)break;const s=e.viewNode.style;if(e.after){if(e.inline)break;if(i&&i.afterNonInlineElementNode(e,o.stopAtOverflow))break;if(u){if(d())return p(),void n.breakLoop();h=[],t=!1,r=!1,a=null}u=!1,l=e.copy(),c.push(l),a=Ba(a,e.breakAfter),!s||o.zeroIndent(s.paddingBottom)&&o.zeroIndent(s.borderBottomWidth)||(c=[l])}else{if(h.push(e.copy()),a=Ba(a,e.breakBefore),!o.layoutConstraint.allowLayout(e)&&(o.checkOverflowAndSaveEdgeAndBreakPosition(l,null,!o.stopAtOverflow,a),(e=e.modify()).overflow=!0,o.stopAtOverflow))return void n.breakLoop();const t=e.viewNode.localName;if(vl[t])return d()?p():o.checkOverflowAndSaveEdgeAndBreakPosition(l,null,!0,a)&&((e=(o.stopAtOverflow&&l||e).modify()).overflow=!0),void n.breakLoop();!s||o.zeroIndent(s.paddingTop)&&o.zeroIndent(s.borderTopWidth)||(r=!1,c=[]),u=!0}}while(0);const s=o.nextInTree(e,r);if(s.isPending())return void s.then(t=>{e=t,n.continueLoop()});e=s.get()}o.checkOverflowAndSaveEdgeAndBreakPosition(l,c,!o.stopAtOverflow,a)?l&&o.stopAtOverflow&&((e=l.modify()).overflow=!0):Fa(a)&&(o.pageBreakType=a),n.breakLoop()}).then(()=>{l&&(o.lastAfterPosition=l.toNodePosition()),s.finish(e)}),s.result()}skipTailEdges(e){let t=e.copy();const n=this,i=pi("skipEdges");let o=null,s=!1;return i.loopWithFrame(i=>{for(;e;){do{if(!e.viewNode)break;if(e.inline&&1!=e.viewNode.nodeType){if(Jr(e.viewNode,e.whitespace))break;if(!e.after)return Fa(o)&&(n.pageBreakType=o),void i.breakLoop()}if(!e.after&&(n.isFloatNodeContext(e)||e.flexContainer))return o=Ba(o,e.breakBefore),Fa(o)&&(n.pageBreakType=o),void i.breakLoop();if(1!=e.viewNode.nodeType)break;const t=e.viewNode.style;if(e.after){if(s){if(Fa(o))return n.pageBreakType=o,void i.breakLoop();o=null}s=!1,o=Ba(o,e.breakAfter)}else{o=Ba(o,e.breakBefore);const s=e.viewNode.localName;if(vl[s])return Fa(o)&&(n.pageBreakType=o),void i.breakLoop();if(t&&(!n.zeroIndent(t.paddingTop)||!n.zeroIndent(t.borderTopWidth)))return void i.breakLoop()}s=!0}while(0);const t=n.layoutContext.nextInTree(e);if(t.isPending())return void t.then(t=>{e=t,i.continueLoop()});e=t.get()}t=null,i.breakLoop()}).then(()=>{i.finish(t)}),i.result()}layoutFloatOrFootnote(e){return Sa(e.floatReference)||"footnote"===e.floatSide?this.layoutPageFloat(e):this.layoutFloat(e)}layoutNext(e,t,n){const i=this,o=pi("layoutNext");return this.skipEdges(e,t,n||null).then(n=>{if(!(e=n)||i.pageBreakType||i.stopByOverflow(e))o.finish(e);else{const n=e.formattingContext;(new tl).find(n).layout(e,i,t).thenFinish(o)}}),o.result()}clearOverflownViewNodes(e,t){if(e)for(let n=e.parent;e;e=n,n=n?n.parent:null){const i=(n||e).formattingContext;(new tl).find(i).clearOverflownViewNodes(this,n,e,t),t=!1}}initGeom(){const e=this.element.ownerDocument.createElement("div");e.style.position="absolute",e.style.top=`${this.paddingTop}px`,e.style.right=`${this.paddingRight}px`,e.style.bottom=`${this.paddingBottom}px`,e.style.left=`${this.paddingLeft}px`,this.element.appendChild(e);const t=this.clientLayout.getElementClientRect(e);this.element.removeChild(e);const n=this.originX+this.left+this.getInsetLeft(),i=this.originY+this.top+this.getInsetTop();this.box=new $t(n,i,n+this.width,i+this.height),this.startEdge=t?this.vertical?t.top:t.left:0,this.endEdge=t?this.vertical?t.bottom:t.right:0,this.beforeEdge=t?this.vertical?t.right:t.top:0,this.afterEdge=t?this.vertical?t.left:t.bottom:0,this.leftFloatEdge=this.beforeEdge,this.rightFloatEdge=this.beforeEdge,this.bottommostFloatTop=this.beforeEdge,this.footnoteEdge=this.afterEdge,this.bands=function(e,t,n,i,o,s){s&&(e=rn(e),t=t.map(e=>ln(e)),n=n.map(e=>ln(e)));const r=t.length,a=n?n.length:0,l=[],h=[];let c,u,d;for(c=0;c<r;c++)t[c].addSegments(h,c);for(c=0;c<a;c++)n[c].addSegments(h,c+r);const p=h.length;h.sort(Yt);let f=0;for(;h[f].shapeId>=r;)f++;let g=h[f].low.y;g>e.y1&&l.push(new Kt(e.y1,g,e.x2,e.x2));let m=0;const b=[];for(;m<p&&(d=h[m]).low.y<g;)d.high.y>g&&b.push(d),m++;for(;m<p||b.length>0;){let t=e.y2;const n=Math.min(on(Math.ceil(g+i),o),e.y2);for(u=0;u<b.length&&t>n;u++)d=b[u],d.low.x==d.high.x?d.high.y<t&&(t=Math.max(sn(d.high.y,o),n)):d.low.x!=d.high.x&&(t=n);for(t>e.y2&&(t=e.y2);m<p&&(d=h[m]).low.y<t;)if(d.high.y<g)m++;else{if(!(d.low.y<n)){const e=sn(d.low.y,o);e<t&&(t=e);break}d.low.y==d.high.y&&d.low.y==g||(b.push(d),t=n),m++}const s=[];for(u=0;u<b.length;u++)tn(s,b[u],g,t);s.sort((e,t)=>e.x-t.x||e.lowOrHigh-t.lowOrHigh);const c=nn(s,r,a);if(0==c.length)l.push(new Kt(g,t,e.x2,e.x2));else{let n=0,i=e.x1;for(u=0;u<c.length;u+=2){const t=Math.max(e.x1,c[u]),o=Math.min(e.x2,c[u+1])-t;o>n&&(n=o,i=t)}0==n?l.push(new Kt(g,t,e.x2,e.x2)):l.push(new Kt(g,t,Math.max(i,e.x1),Math.min(i+n,e.x2)))}if(t==e.y2)break;for(g=t,u=b.length-1;u>=0;u--)b[u].high.y<=t&&b.splice(u,1)}return hn(e,l),l}(this.box,[this.getInnerShape()],this.getExclusions(),8,this.snapHeight,this.vertical),this.createFloats()}init(){this.chunkPositions=[],U(this.element,"width",`${this.width}px`),U(this.element,"height",`${this.height}px`),this.initGeom(),this.computedBlockSize=0,this.overflown=!1,this.pageBreakType=null,this.lastAfterPosition=null}saveEdgeBreakPosition(e,t,n){e.formattingContext;const i=e.copy(),o=(new tl).find(e.formattingContext),s=this.calculateClonedPaddingBorder(i),r=o.createEdgeBreakPosition(i,t,n,this.computedBlockSize+s);this.breakPositions.push(r)}saveBoxBreakPosition(e){const t=e[0].breakPenalty,n=new Tl(e,t);this.breakPositions.push(n)}updateMaxReachedAfterEdge(e){if(!isNaN(e)){const t=this.getBoxDir()*(e-this.beforeEdge);this.computedBlockSize=Math.max(t,this.computedBlockSize)}}layout(e,t,n){if(this.chunkPositions.push(e),e.primary.after&&(this.lastAfterPosition=e.primary),this.stopAtOverflow&&this.overflown)return fi(e);if(this.isFullWithPageFloats())return e.primary.after&&1===e.primary.steps.length?fi(null):fi(e);const i=this,o=pi("layout");return i.openAllViews(e.primary).then(e=>{let s=null;if(e.viewNode)s=e.copy();else{const e=t=>{t.nodeContext.viewNode&&(s=t.nodeContext,i.layoutContext.removeEventListener("nextInTree",e))};i.layoutContext.addEventListener("nextInTree",e)}const r=new Ll(t,n);r.layout(e,i).then(e=>{i.doFinishBreak(e,r.context.overflownNodeContext,s,r.initialComputedBlockSize).then(e=>{let t=null;t=i.pseudoParent?fi(null):i.doFinishBreakOfFragmentLayoutConstraints(e),t.then(()=>{if(i.pageFloatLayoutContext.isInvalidated())o.finish(null);else if(e){i.overflown=!0;const t=new pa(e.toNodePosition());o.finish(t)}else o.finish(null)})})})}),o.result()}isFullWithPageFloats(){return this.pageFloatLayoutContext.isColumnFullWithPageFloats(this)}getMaxBlockSizeOfPageFloats(){return this.pageFloatLayoutContext.getMaxBlockSizeOfPageFloats()}doFinishBreakOfFragmentLayoutConstraints(e){const t=pi("doFinishBreakOfFragmentLayoutConstraints"),n=[].concat(this.fragmentLayoutConstraints);n.sort((e,t)=>e.getPriorityOfFinishBreak()-t.getPriorityOfFinishBreak());let i=0;return t.loop(()=>i<n.length?n[i++].finishBreak(e,this).thenReturn(!0):fi(!1)).then(()=>{t.finish(!0)}),t.result()}doLayout(e,t,n){const i=this,o=pi("doLayout");let s=null;return i.breakPositions=[],i.nodeContextOverflowingDueToRepetitiveElements=null,o.loopWithFrame(o=>{for(;e;){let r=!0;if(i.layoutNext(e,t,n||null).then(a=>{if(t=!1,n=null,i.nodeContextOverflowingDueToRepetitiveElements&&i.stopAtOverflow?(i.pageBreakType=null,(e=i.nodeContextOverflowingDueToRepetitiveElements).overflow=!0):e=a,i.pageFloatLayoutContext.isInvalidated())o.breakLoop();else if(i.pageBreakType)o.breakLoop();else if(e&&i.stopByOverflow(e)){s=e;const t=i.findAcceptableBreakPosition();e=t.nodeContext,t.breakPosition&&t.breakPosition.breakPositionChosen(i),o.breakLoop()}else r?r=!1:o.continueLoop()}),r)return void(r=!1)}i.computedBlockSize+=i.getOffsetByRepetitiveElements(),o.breakLoop()}).then(()=>{o.finish({nodeContext:e,overflownNodeContext:s})}),o.result()}redoLayout(){const e=this.chunkPositions;let t=this.element.lastChild;for(;t!=this.last;){const e=t.previousSibling;this.element===t.parentNode&&this.layoutContext.isPseudoelement(t)||this.element.removeChild(t),t=e}this.killFloats(),this.init();const n=this,i=pi("redoLayout");let o=0,s=null,r=!0;return i.loopWithFrame(t=>{if(o<e.length){const i=e[o++];n.layout(i,r).then(e=>{r=!1,e?(s=e,t.breakLoop()):t.continueLoop()})}else t.breakLoop()}).then(()=>{i.finish(s)}),i.result()}saveDistanceToBlockEndFloats(){const e=this.pageFloatLayoutContext.getBlockStartEdgeOfBlockEndFloats();e>0&&isFinite(e)&&(this.blockDistanceToBlockEndFloats=this.getBoxDir()*(e-this.beforeEdge-this.computedBlockSize))}collectElementsOffset(){const e=[];for(let t=this;t;t=t.pseudoParent)t.fragmentLayoutConstraints.forEach(t=>{if(Br.isInstanceOfRepetitiveElementsOwnerLayoutConstraint(t)){const n=t.getRepetitiveElements();e.push(n)}if(_r.isInstanceOfAfterIfContinuesLayoutConstraint(t)){const n=t.getRepetitiveElements();e.push(n)}Mr.isInstanceOfTableRowLayoutConstraint(t)&&t.getElementsOffsetsForTableCell(this).forEach(t=>{e.push(t)})});return e}}class Pl{constructor(e,t,n){this.startNodeContexts=[],this.column=Object.create(e),this.column.element=t,this.column.layoutContext=e.layoutContext.clone(),this.column.stopAtOverflow=!1,this.column.flowRootFormattingContext=n.formattingContext,this.column.pseudoParent=e;const i=this.column.calculateClonedPaddingBorder(n);this.column.footnoteEdge=this.column.footnoteEdge-i;const o=this;this.column.openAllViews=function(e){return Il.prototype.openAllViews.call(this,e).thenAsync(e=>(o.startNodeContexts.push(e.copy()),fi(e)))}}layout(e,t){return this.column.layout(e,t)}findAcceptableBreakPosition(e){const t=this.column.findAcceptableBreakPosition();if(e){const e=this.startNodeContexts[0].copy(),n=new Ka(e,null,e.overflow,0);if(n.findAcceptableBreak(this.column,0),!t.nodeContext)return{breakPosition:n,nodeContext:e}}return t}finishBreak(e,t,n){return this.column.finishBreak(e,t,n)}doFinishBreakOfFragmentLayoutConstraints(e){this.column.doFinishBreakOfFragmentLayoutConstraints(e)}isStartNodeContext(e){const t=this.startNodeContexts[0];return t.viewNode===e.viewNode&&t.after===e.after&&t.offsetInNode===e.offsetInNode}isLastAfterNodeContext(e){return sa(e.toNodePosition(),this.column.lastAfterPosition)}getColumnElement(){return this.column.element}getColumn(){return this.column}}const Al=/^[^A-Za-z0-9_\u009E\u009F\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02AF\u037B-\u037D\u0386\u0388-\u0482\u048A-\u0527]*([A-Za-z0-9_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02AF\u037B-\u037D\u0386\u0388-\u0482\u048A-\u0527][^A-Za-z0-9_\u009E\u009F\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02AF\u037B-\u037D\u0386\u0388-\u0482\u048A-\u0527]*)?/;class Ol{breakTextNode(e,t,n,i,o,s){if(t.after)t.offsetInNode=e.length;else{let i=n-t.boxOffset;const o=e.data;i=173==o.charCodeAt(i)?this.breakAfterSoftHyphen(e,o,i,t):this.breakAfterOtherCharacter(e,o,i,t),i>0&&(t=this.updateNodeContext(t,i,e))}return t}breakAfterSoftHyphen(e,t,n,i){return e.replaceData(n,t.length-n,i.breakWord?"":Rl(i)),n+1}breakAfterOtherCharacter(e,t,n,i){const o=t.charAt(n);n++;const s=t.charAt(n);return e.replaceData(n,t.length-n,!i.breakWord&&j(o)&&j(s)?Rl(i):""),n}updateNodeContext(e,t,n){return(e=e.modify()).offsetInNode+=t,e.breakBefore=null,e}}function Rl(e){return e.hyphenateCharacter||e.parent&&e.parent.hyphenateCharacter||"-"}Ol.instance=new Ol;class Ll extends rl{constructor(e,t){super(),this.leadingEdge=e,this.initialPageBreakType=null,this.initialComputedBlockSize=0,this.initialOverflown=!1,this.context={overflownNodeContext:null},this.breakAfter=t||null}resolveLayoutMode(e){return new kl(this.leadingEdge,this.breakAfter,this.context)}prepareLayout(e,t){t.fragmentLayoutConstraints=[],t.pseudoParent||(cl=[])}clearNodes(e){super.clearNodes(e);let t=e;for(;t;){const e=t.viewNode;e&&Ga(e.parentNode,e),t=t.parent}}saveState(e,t){super.saveState(e,t),this.initialPageBreakType=t.pageBreakType,this.initialComputedBlockSize=t.computedBlockSize,this.initialOverflown=t.overflown}restoreState(e,t){super.restoreState(e,t),t.pageBreakType=this.initialPageBreakType,t.computedBlockSize=this.initialComputedBlockSize,t.overflown=this.initialOverflown}}class kl{constructor(e,t,n){this.leadingEdge=e,this.breakAfter=t,this.context=n}doLayout(e,t){const n=pi("DefaultLayoutMode.doLayout");return function(e,t){const n=pi("processAfterIfContinuesOfAncestors");let i=e;return n.loop(()=>{if(null!==i){const e=Sl(i,t);return i=i.parent,e.thenReturn(!0)}return fi(!1)}).then(()=>{n.finish(!0)}),n.result()}(e,t).then(()=>{t.doLayout(e,this.leadingEdge,this.breakAfter).then(e=>{this.context.overflownNodeContext=e.overflownNodeContext,n.finish(e.nodeContext)})}),n.result()}accept(e,t){return!(!t.pageFloatLayoutContext.isInvalidated()&&!t.pageBreakType)||t.fragmentLayoutConstraints.length<=0||t.fragmentLayoutConstraints.every(n=>n.allowLayout(e,this.context.overflownNodeContext,t))}postLayout(e,t,n,i){if(!i){const t=n.fragmentLayoutConstraints.some(t=>t.nextCandidate(e));i=!t}return n.fragmentLayoutConstraints.forEach(o=>{o.postLayout(i,e,t,n)}),i}}class Fl extends Il{constructor(e,t,n,i,o,s,r){super(t,n,i,o,s),this.floatSide=e,this.parentContainer=r,this.rootViewNodes=[],this.floatMargins=[],this.adjustContentRelativeSize=!0}openAllViews(e){return super.openAllViews(e).thenAsync(e=>(e&&this.fixFloatSizeAndPosition(e),fi(e)))}convertPercentageSizesToPx(e){const t=this.parentContainer.getPaddingRect(),n=t.x2-t.x1,i=t.y2-t.y1;function o(t,n){t.forEach(t=>{const i=z(e,t);if(i&&"%"===i.charAt(i.length-1)){const o=parseFloat(i);U(e,t,`${n*o/100}px`)}})}o(["width","max-width","min-width"],n),o(["height","max-height","min-height"],i),o(["margin-top","margin-right","margin-bottom","margin-left","padding-top","padding-right","padding-bottom","padding-left"],this.vertical?i:n),["margin-top","margin-right","margin-bottom","margin-left"].forEach(t=>{"auto"===z(e,t)&&U(e,t,"0")})}fixFloatSizeAndPosition(e){for(;e.parent;)e=e.parent;e.viewNode.nodeType;const t=e.viewNode;if(this.rootViewNodes.push(t),this.adjustContentRelativeSize&&this.convertPercentageSizesToPx(t),this.floatMargins.push(this.getComputedMargin(t)),this.adjustContentRelativeSize){const e=this.floatSide;if(this.parentContainer.vertical){if("block-end"===e||"left"===e){const e=z(t,"height");""!==e&&"auto"!==e&&U(t,"margin-top","auto")}}else if("block-end"===e||"bottom"===e){const e=z(t,"width");""!==e&&"auto"!==e&&U(t,"margin-left","auto")}}}getContentInlineSize(){return Math.max.apply(null,this.rootViewNodes.map((e,t)=>{const n=this.clientLayout.getElementClientRect(e),i=this.floatMargins[t];return this.vertical?i.top+n.height+i.bottom:i.left+n.width+i.right}))}}class Dl{constructor(e,t){this.parent=e,this.rootSourceNode=t,this.formattingContextType="RepetitiveElementsOwner",this.isRoot=!1,this.repetitiveElements=null}getName(){return"Repetitive elements owner formatting context (RepetitiveElementsOwnerFormattingContext)"}isFirstTime(e,t){return t}getParent(){return this.parent}getRepetitiveElements(){return this.repetitiveElements}getRootViewNode(e){const t=this.getRootNodeContext(e);return t?t.viewNode:null}getRootNodeContext(e){do{if(!e.belongsTo(this)&&e.sourceNode===this.rootSourceNode)return e}while(e=e.parent);return null}initializeRepetitiveElements(e){this.repetitiveElements||cl.some(e=>e.root===this.rootSourceNode&&(this.repetitiveElements=e.elements,!0))||(this.repetitiveElements=new _l(e,this.rootSourceNode),cl.push({root:this.rootSourceNode,elements:this.repetitiveElements}))}saveState(){}restoreState(e){}}class _l{constructor(e,t){this.vertical=e,this.ownerSourceNode=t,this.headerSourceNode=null,this.footerSourceNode=null,this.headerViewNode=null,this.footerViewNode=null,this.headerNodePosition=null,this.footerNodePosition=null,this.headerHeight=0,this.footerHeight=0,this.isSkipHeader=!1,this.isSkipFooter=!1,this.enableSkippingFooter=!0,this.enableSkippingHeader=!0,this.doneInitialLayout=!1,this.firstContentSourceNode=null,this.lastContentSourceNode=null,this.affectedNodeCache=[],this.afterLastContentNodeCache=[],this.allowInsert=!1}setHeaderNodeContext(e){this.headerNodePosition||(this.headerNodePosition=ra(e,0),this.headerSourceNode=e.sourceNode,this.headerViewNode=e.viewNode)}setFooterNodeContext(e){this.footerNodePosition||(this.footerNodePosition=ra(e,0),this.footerSourceNode=e.sourceNode,this.footerViewNode=e.viewNode)}updateHeight(e){this.headerViewNode&&(this.headerHeight=Va(this.headerViewNode,e,this.vertical),this.headerViewNode=null),this.footerViewNode&&(this.footerHeight=Va(this.footerViewNode,e,this.vertical),this.footerViewNode=null)}prepareLayoutFragment(){this.isSkipHeader=this.isSkipFooter=!1,this.enableSkippingFooter=!0,this.enableSkippingHeader=!0}appendHeaderToFragment(e,t,n){return!this.headerNodePosition||this.isSkipHeader?fi(!0):this.appendElementToFragment(this.headerNodePosition,e,t,n)}appendFooterToFragment(e,t,n){return!this.footerNodePosition||this.isSkipFooter?fi(!0):this.appendElementToFragment(this.footerNodePosition,e,t,n)}appendElementToFragment(e,t,n,i){const o=t.viewNode.ownerDocument,s=t.viewNode,r=o.createElement("div");s.appendChild(r);const a=new Pl(i,r,t),l=a.getColumn().pageBreakType;return a.getColumn().pageBreakType=null,this.allowInsertRepeatitiveElements=!0,a.layout(new pa(e),!0).thenAsync(()=>(this.allowInsertRepeatitiveElements=!1,s.removeChild(r),this.moveChildren(r,s,n),a.getColumn().pageBreakType=l,fi(!0)))}moveChildren(e,t,n){if(t)for(;e.firstChild;){const i=e.firstChild;e.removeChild(i),i.setAttribute(qr,"1"),n?t.insertBefore(i,n):t.appendChild(i)}}calculateOffset(e){let t=0;return e&&!this.affectTo(e)?t:((!this.isSkipFooter||e&&this.isAfterLastContent(e))&&(t+=this.footerHeight),this.isSkipHeader||(t+=this.headerHeight),t)}calculateMinimumOffset(e){let t=0;return e&&!this.affectTo(e)?t:(e&&this.isAfterLastContent(e)&&(t+=this.footerHeight),this.enableSkippingHeader||(t+=this.headerHeight),t)}isAfterLastContent(e){return this.findResultFromCache(e,this.afterLastContentNodeCache,t=>this.isAfterNodeContextOf(this.lastContentSourceNode,e,!1))}affectTo(e){return this.findResultFromCache(e,this.affectedNodeCache,t=>this.isAfterNodeContextOf(this.ownerSourceNode,e,!0))}findResultFromCache(e,t,n){const i=t.filter(t=>t.nodeContext.sourceNode===e.sourceNode&&t.nodeContext.after===e.after);if(i.length>0)return i[0].result;{const i=n(e);return t.push({nodeContext:e,result:i}),i}}isAfterNodeContextOf(e,t,n){const i=[];for(let n=e;n;n=n.parentNode){if(t.sourceNode===n)return t.after;i.push(n)}for(let e=t.sourceNode;e;e=e.parentNode){const t=i.indexOf(e);if(t>=0)return!!n&&0===t;for(let t=e;t;t=t.previousElementSibling)if(i.includes(t))return!0}return t.after}isFirstContentNode(e){return e&&this.firstContentSourceNode===e.sourceNode}isEnableToUpdateState(){return!!(!this.isSkipFooter&&this.enableSkippingFooter&&this.footerNodePosition||!this.isSkipHeader&&this.enableSkippingHeader&&this.headerNodePosition)}updateState(){!this.isSkipFooter&&this.enableSkippingFooter&&this.footerNodePosition?this.isSkipFooter=!0:!this.isSkipHeader&&this.enableSkippingHeader&&this.headerNodePosition&&(this.isSkipHeader=!0)}preventSkippingHeader(){this.isSkipHeader=!1,this.enableSkippingHeader=!1}preventSkippingFooter(){this.isSkipFooter=!1,this.enableSkippingFooter=!1}isHeaderRegistered(){return!!this.headerNodePosition}isFooterRegistered(){return!!this.footerNodePosition}isHeaderSourceNode(e){return this.headerSourceNode===e}isFooterSourceNode(e){return this.footerSourceNode===e}}class Bl{constructor(e){this.formattingContext=e}accept(e,t){return!!e}postLayout(e,t,n,i){const o=this.formattingContext.getRepetitiveElements();return o&&(n.clientLayout,o.doneInitialLayout||(o.updateHeight(n),o.doneInitialLayout=!0)),i}}class Ml{constructor(e){this.formattingContext=e}accept(e,t){return!0}postLayout(e,t,n,i){return i}}class Ul extends Bl{constructor(e,t){super(e),this.processor=t}doLayout(e,t){return this.processor.doInitialLayout(e,t)}accept(e,t){return!1}}class zl extends Ml{constructor(e,t){super(e),this.processor=t}doLayout(e,t){return e.belongsTo(this.formattingContext)||e.after||t.fragmentLayoutConstraints.unshift(new Vl(e)),this.processor.doLayout(e,t)}}class Vl{constructor(e){this.flagmentLayoutConstraintType="RepetitiveElementsOwner";const t=e.formattingContext;this.nodeContext=t.getRootNodeContext(e)}allowLayout(e,t,n){const i=this.getRepetitiveElements();return!(i&&!Ha(this.nodeContext.viewNode)&&i.isEnableToUpdateState()&&(t&&!e||e&&e.overflow))}nextCandidate(e){const t=this.getRepetitiveElements();return!!t&&!!t.isEnableToUpdateState()&&(t.updateState(),!0)}postLayout(e,t,n,i){const o=this.getRepetitiveElements();o&&e&&i.stopAtOverflow&&(null==t||o.isAfterLastContent(t))&&o.preventSkippingFooter()}finishBreak(e,t){const n=this.nodeContext.formattingContext,i=this.getRepetitiveElements();if(!i)return fi(!0);const o=this.nodeContext;return function(e,t,n){const i=e.getRepetitiveElements();if(i){const o=e.getRootNodeContext(t);if(o.viewNode){const e=o.viewNode.firstChild;return i.appendHeaderToFragment(o,e,n)}}return fi(!0)}(n,o,t).thenAsync(()=>(function(e,t,n){const i=e.getRepetitiveElements();if(i&&!i.isSkipFooter){const o=e.getRootNodeContext(t);if(o.viewNode)return i.appendFooterToFragment(o,null,n)}return fi(!0)})(n,o,t).thenAsync(()=>(i.prepareLayoutFragment(),fi(!0))))}getRepetitiveElements(){return this.nodeContext.formattingContext.getRepetitiveElements()}equalsTo(e){return e instanceof Vl&&this.nodeContext.formattingContext===e.nodeContext.formattingContext}getPriorityOfFinishBreak(){return 10}}class Hl extends rl{constructor(e,t){super(),this.formattingContext=e,this.processor=t}resolveLayoutMode(e){const t=this.formattingContext.getRepetitiveElements();return e.belongsTo(this.formattingContext)||t.doneInitialLayout?(e.belongsTo(this.formattingContext)||e.after||t&&t.preventSkippingHeader(),new zl(this.formattingContext,this.processor)):new Ul(this.formattingContext,this.processor)}}class Gl extends hl{constructor(e,t){super(),this.formattingContext=e,this.column=t}startNonInlineElementNode(e){const t=this.formattingContext,n=e.nodeContext,i=t.getRepetitiveElements();if(n.parent&&t.rootSourceNode===n.parent.sourceNode){switch(n.repeatOnBreak){case"header":if(!i.isHeaderRegistered())return i.setHeaderNodeContext(n),fi(!0);n.repeatOnBreak="none";break;case"footer":if(!i.isFooterRegistered())return i.setFooterNodeContext(n),fi(!0);n.repeatOnBreak="none"}i.firstContentSourceNode||(i.firstContentSourceNode=n.sourceNode)}return hl.prototype.startNonInlineElementNode.call(this,e)}afterNonInlineElementNode(e){const t=this.formattingContext,n=e.nodeContext;return n.sourceNode===t.rootSourceNode&&(t.getRepetitiveElements().lastContentSourceNode=e.lastAfterNodeContext&&e.lastAfterNodeContext.sourceNode,e.break=!0),"header"===n.repeatOnBreak||"footer"===n.repeatOnBreak?fi(!0):hl.prototype.afterNonInlineElementNode.call(this,e)}}function $l(e,t){e&&function(e,t){for(let n=e;n;n=n.parent){const e=n.formattingContext;e&&e instanceof Dl&&!n.belongsTo(e)&&t(e,n)}}(e.after?e.parent:e,(e,n)=>{Mr.isInstanceOfTableFormattingContext(e)||t.fragmentLayoutConstraints.push(new Vl(n))})}const Wl=new class extends nl{layout(e,t,n){if(t.isFloatNodeContext(e))return t.layoutFloatOrFootnote(e);const i=e.formattingContext;return i.getRootViewNode(e)?(n&&$l(e.parent,t),e.belongsTo(i)?nl.prototype.layout.call(this,e,t,n):new Hl(i,this).layout(e,t)):t.buildDeepElementView(e)}startNonInlineElementNode(e){const t=function(e){const t=e.formattingContext;return t&&t instanceof Dl?t:null}(e).getRepetitiveElements();return!!t&&(t.allowInsertRepeatitiveElements||!t.isHeaderSourceNode(e.sourceNode)&&!t.isFooterSourceNode(e.sourceNode)||e.viewNode.parentNode.removeChild(e.viewNode),!1)}doInitialLayout(e,t){e.formattingContext;const n=pi("BlockLayoutProcessor.doInitialLayout");return this.layoutEntireBlock(e,t).thenFinish(n),n.result()}layoutEntireBlock(e,t){const n=e.formattingContext,i=new Gl(n,t);return new ll(i,t.layoutContext).iterate(e)}doLayout(e,t){const n=e.formattingContext,i=pi("doLayout");return Nl(t.layoutContext.nextInTree(e,!1),t).then(e=>{let o=e;i.loopWithFrame(e=>{for(;o;){let i=!0;if(t.layoutNext(o,!1).then(s=>{o=s,t.pageFloatLayoutContext.isInvalidated()?e.breakLoop():t.pageBreakType?e.breakLoop():o&&t.stopByOverflow(o)?e.breakLoop():o&&o.after&&o.sourceNode==n.rootSourceNode?e.breakLoop():i?i=!1:e.continueLoop()}),i)return void(i=!1)}e.breakLoop()}).then(()=>{i.finish(o)})}),i.result()}finishBreak(e,t,n,i){return nl.prototype.finishBreak.call(this,e,t,n,i)}clearOverflownViewNodes(e,t,n,i){nl.prototype.clearOverflownViewNodes(e,t,n,i)}};u(t.HOOKS.RESOLVE_LAYOUT_PROCESSOR,e=>e instanceof Dl&&!Mr.isInstanceOfTableFormattingContext(e)?Wl:null);class Xl{constructor(e,t){this.rowIndex=e,this.sourceNode=t,this.cells=[]}addCell(e){this.cells.push(e)}getMinimumHeight(){return Math.min.apply(null,this.cells.map(e=>e.height))}}class jl{constructor(e,t,n){this.rowIndex=e,this.columnIndex=t,this.height=0,this.anchorSlot=null,this.viewElement=n,this.colSpan=n.colSpan||1,this.rowSpan=n.rowSpan||1}setHeight(e){this.height=e}setAnchorSlot(e){this.anchorSlot=e}}class Kl{constructor(e,t,n){this.rowIndex=e,this.columnIndex=t,this.cell=n}}class Yl{constructor(e,t,n){this.column=e,this.cellNodeContext=n,this.empty=!1,this.pseudoColumn=new Pl(e,t,n)}findAcceptableBreakPosition(){const e=this.cellNodeContext.viewNode,t=this.cellNodeContext.verticalAlign;"middle"!==t&&"bottom"!==t||U(e,"vertical-align","top");const n=this.pseudoColumn.findAcceptableBreakPosition(!0);return U(e,"vertical-align",t),n}}class ql{constructor(e,t){this.viewNode=e,this.side=t}}class Zl extends Ka{constructor(e,t,n,i){super(e,t,n,i),this.acceptableCellBreakPositions=null,this.rowIndex=null,this.formattingContext=e.formattingContext}findAcceptableBreak(e,t){const n=super.findAcceptableBreak(e,t);return t<this.getMinBreakPenalty()?null:this.getAcceptableCellBreakPositions().every(e=>!!e.nodeContext)?n:null}getMinBreakPenalty(){let e=super.getMinBreakPenalty();return this.getAcceptableCellBreakPositions().forEach(t=>{e+=t.breakPosition.getMinBreakPenalty()}),e}getAcceptableCellBreakPositions(){if(!this.acceptableCellBreakPositions){this.formattingContext;const e=this.getCellFragments();this.acceptableCellBreakPositions=e.map(e=>e.findAcceptableBreakPosition())}return this.acceptableCellBreakPositions}getRowIndex(){return null!=this.rowIndex?this.rowIndex:this.rowIndex=this.formattingContext.findRowIndexBySourceNode(this.position.sourceNode)}getCellFragments(){return this.formattingContext.getRowSpanningCellsOverflowingTheRow(this.getRowIndex()).map(this.formattingContext.getCellFragmentOfCell,this.formattingContext)}}class Ql extends Xa{constructor(e,t,n){super(),this.rowIndex=e,this.beforeNodeContext=t,this.formattingContext=n,this.acceptableCellBreakPositions=null}findAcceptableBreak(e,t){if(t<this.getMinBreakPenalty())return null;const n=this.getCellFragments(),i=this.getAcceptableCellBreakPositions(),o=i.every(e=>!!e.nodeContext)&&i.some((e,t)=>{const i=n[t].pseudoColumn,o=e.nodeContext;return!i.isStartNodeContext(o)&&!i.isLastAfterNodeContext(o)});return this.beforeNodeContext.overflow=i.some(e=>e.nodeContext&&e.nodeContext.overflow),o?this.beforeNodeContext:null}getMinBreakPenalty(){const e=this.formattingContext,t=e.getRowByIndex(this.rowIndex);let n=0;return e.isFreelyFragmentableRow(t)||(n+=10),this.getAcceptableCellBreakPositions().forEach(e=>{n+=e.breakPosition.getMinBreakPenalty()}),n}getAcceptableCellBreakPositions(){if(!this.acceptableCellBreakPositions){const e=this.getCellFragments();this.acceptableCellBreakPositions=e.map(e=>e.findAcceptableBreakPosition())}return this.acceptableCellBreakPositions}getCellFragments(){return this.formattingContext.getCellsFallingOnRow(this.rowIndex).map(this.formattingContext.getCellFragmentOfCell,this.formattingContext)}}class Jl extends Dl{constructor(e,t){super(e,t),this.tableSourceNode=t,this.formattingContextType="Table",this.vertical=!1,this.columnCount=-1,this.tableWidth=0,this.captions=[],this.colGroups=null,this.colWidths=null,this.inlineBorderSpacing=0,this.rows=[],this.slots=[],this.cellFragments=[],this.lastRowViewNode=null,this.cellBreakPositions=[],this.repetitiveElements=null}getName(){return"Table formatting context (Table.TableFormattingContext)"}isFirstTime(e,t){if(!t)return t;switch(e.display){case"table-row":return 0===this.cellBreakPositions.length;case"table-cell":return!this.cellBreakPositions.some(t=>t.cellNodePosition.steps[0].node===e.sourceNode);default:return t}}getParent(){return this.parent}finishFragment(){this.cellFragments=[]}addRow(e,t){this.rows[e]=t}getRowSlots(e){let t=this.slots[e];return t||(t=this.slots[e]=[]),t}addCell(e,t){let n=this.rows[e];n||(this.addRow(e,new Xl(e,null)),n=this.rows[e]),n.addCell(t);const i=e+t.rowSpan;let o=this.getRowSlots(e),s=0;for(;o[s];)s++;for(;e<i;e++){o=this.getRowSlots(e);for(let n=s;n<s+t.colSpan;n++){const i=o[n]=new Kl(e,n,t);t.anchorSlot||t.setAnchorSlot(i)}}}getRowByIndex(e){return this.rows[e]}findRowIndexBySourceNode(e){return this.rows.findIndex(t=>e===t.sourceNode)}addCellFragment(e,t,n){let i=this.cellFragments[e];i||(i=this.cellFragments[e]=[]),i[t]=n}getCellsFallingOnRow(e){return this.getRowSlots(e).reduce((e,t)=>t.cell!==e[e.length-1]?e.concat(t.cell):e,[])}getRowSpanningCellsOverflowingTheRow(e){return this.getCellsFallingOnRow(e).filter(t=>t.rowIndex+t.rowSpan-1>e)}getCellFragmentOfCell(e){return this.cellFragments[e.rowIndex]&&this.cellFragments[e.rowIndex][e.columnIndex]}isFreelyFragmentableRow(e){return e.getMinimumHeight()>this.tableWidth/2}getColumnCount(){return this.columnCount<0&&(this.columnCount=Math.max.apply(null,this.rows.map(e=>e.cells.reduce((e,t)=>e+t.colSpan,0)))),this.columnCount}updateCellSizes(e){this.rows.forEach(t=>{t.cells.forEach(t=>{const n=e.getElementClientRect(t.viewElement);t.viewElement=null,t.setHeight(this.vertical?n.width:n.height)})})}findCellFromColumn(e){if(!e)return null;let t=null,n=0,i=0;e:for(n=0;n<this.cellFragments.length;n++)if(this.cellFragments[n])for(i=0;i<this.cellFragments[n].length;i++)if(this.cellFragments[n][i]&&e===this.cellFragments[n][i].pseudoColumn.getColumn()){t=this.rows[n].cells[i];break e}if(!t)return null;for(;n<this.slots.length;n++)for(;i<this.slots[n].length;i++){const e=this.slots[n][i];if(e.cell===t)return{rowIndex:e.rowIndex,columnIndex:e.columnIndex}}return null}collectElementsOffsetOfUpperCells(e){const t=[];return this.slots.reduce((n,i,o)=>{if(o>=e.rowIndex)return n;const s=this.getCellFragmentOfCell(i[e.columnIndex].cell);return!s||t.includes(s)?n:(this.collectElementsOffsetFromColumn(s.pseudoColumn.getColumn(),n),t.push(s),n)},[])}collectElementsOffsetOfHighestColumn(){const e=[];return this.rows.forEach(t=>{t.cells.forEach((t,n)=>{e[n]||(e[n]={collected:[],elements:[]});const i=e[n],o=this.getCellFragmentOfCell(t);o&&!i.collected.includes(o)&&(this.collectElementsOffsetFromColumn(o.pseudoColumn.getColumn(),i.elements),i.collected.push(o))})}),[new eh(e.map(e=>e.elements))]}collectElementsOffsetFromColumn(e,t){e.fragmentLayoutConstraints.forEach(e=>{if(Br.isInstanceOfRepetitiveElementsOwnerLayoutConstraint(e)){const n=e.getRepetitiveElements();t.push(n)}Mr.isInstanceOfTableRowLayoutConstraint(e)&&e.getElementsOffsetsForTableCell(null).forEach(e=>{t.push(e)})})}saveState(){return[].concat(this.cellBreakPositions)}restoreState(e){this.cellBreakPositions=e}}class eh{constructor(e){this.repeatitiveElementsInColumns=e}calculateOffset(e){return this.calculateMaxOffsetOfColumn(e,e=>e.current)}calculateMinimumOffset(e){return this.calculateMaxOffsetOfColumn(e,e=>e.minimum)}calculateMaxOffsetOfColumn(e,t){let n=0;return this.repeatitiveElementsInColumns.forEach(i=>{const o=ja(e,i);n=Math.max(n,t(o))}),n}}function th(e){return function(e){return"table-row-group"===e||"table-header-group"===e||"table-footer-group"===e}(e)||function(e){return"table"===e||"inline-table"===e}(e)}function nh(e,t,n){const i=e.nodeContext,o=i.display,s=i.parent?i.parent.display:null;let r=!1;if("inline-table"===s&&!(i.formattingContext instanceof Jl))for(let e=i.parent;e;e=e.parent)if(e.formattingContext instanceof Jl){r=e.formattingContext===t;break}return r||"table-row"===o&&!th(s)||"table-cell"===o&&"table-row"!==s&&!th(s)||i.formattingContext instanceof Jl&&i.formattingContext!==t?n.buildDeepElementView(i).thenAsync(t=>(e.nodeContext=t,fi(!0))):null}class ih extends hl{constructor(e,t){super(),this.formattingContext=e,this.column=t,this.rowIndex=-1,this.columnIndex=0,this.inRow=!1,this.checkPoints=[],this.inHeaderOrFooter=!1}startNonInlineElementNode(e){const t=this.formattingContext,n=nh(e,t,this.column);if(n)return n;this.postLayoutBlockContents(e);const i=e.nodeContext,o=i.display,s=t.getRepetitiveElements();switch(o){case"table":t.inlineBorderSpacing=i.inlineBorderSpacing;break;case"table-caption":{const e=new ql(i.viewNode,i.captionSide);t.captions.push(e);break}case"table-header-group":return s.isHeaderRegistered()||(this.inHeaderOrFooter=!0,s.setHeaderNodeContext(i)),fi(!0);case"table-footer-group":return s.isFooterRegistered()||(this.inHeaderOrFooter=!0,s.setFooterNodeContext(i)),fi(!0);case"table-row":this.inHeaderOrFooter||(this.inRow=!0,this.rowIndex++,i.sourceNode,this.columnIndex=0,t.addRow(this.rowIndex,new Xl(this.rowIndex,i.sourceNode)),s.firstContentSourceNode||(s.firstContentSourceNode=i.sourceNode))}return super.startNonInlineElementNode(e)}afterNonInlineElementNode(e){const t=this.formattingContext,n=e.nodeContext,i=n.display,o=this.column.clientLayout;if(this.postLayoutBlockContents(e),n.sourceNode===t.tableSourceNode){const i=o.getElementComputedStyle(t.getRootViewNode(n));t.tableWidth=parseFloat(i[t.vertical?"height":"width"]),t.getRepetitiveElements().lastContentSourceNode=e.lastAfterNodeContext&&e.lastAfterNodeContext.sourceNode,e.break=!0}else switch(i){case"table-header-group":case"table-footer-group":if(this.inHeaderOrFooter)return this.inHeaderOrFooter=!1,fi(!0);break;case"table-row":this.inHeaderOrFooter||(t.lastRowViewNode=n.viewNode,this.inRow=!1);break;case"table-cell":if(!this.inHeaderOrFooter){this.inRow||(this.rowIndex++,this.columnIndex=0,this.inRow=!0);const e=n.viewNode;t.addCell(this.rowIndex,new jl(this.rowIndex,this.columnIndex,e)),this.columnIndex++}}return super.afterNonInlineElementNode(e)}startNonElementNode(e){this.registerCheckPoint(e)}afterNonElementNode(e){this.registerCheckPoint(e)}startInlineElementNode(e){this.registerCheckPoint(e)}afterInlineElementNode(e){this.registerCheckPoint(e)}registerCheckPoint(e){const t=e.nodeContext;t&&t.viewNode&&!Wa(t)&&this.checkPoints.push(t.clone())}postLayoutBlockContents(e){this.checkPoints.length>0&&this.column.postLayoutBlock(e.nodeContext,this.checkPoints),this.checkPoints=[]}}class oh extends hl{constructor(e,t){super(!0),this.formattingContext=e,this.column=t,this.inRow=!1,this.currentRowIndex=-1,this.currentColumnIndex=0,this.originalStopAtOverflow=t.stopAtOverflow,t.stopAtOverflow=!1}resetColumn(){this.column.stopAtOverflow=this.originalStopAtOverflow}getColSpanningCellWidth(e){const t=this.formattingContext.colWidths;let n=0;for(let i=0;i<e.colSpan;i++)n+=t[e.anchorSlot.columnIndex+i];return n+=this.formattingContext.inlineBorderSpacing*(e.colSpan-1),n}layoutCell(e,t,n){const i=e.rowIndex,o=e.columnIndex,s=e.colSpan,r=t.viewNode;t.verticalAlign,s>1&&(U(r,"box-sizing","border-box"),U(r,this.formattingContext.vertical?"height":"width",`${this.getColSpanningCellWidth(e)}px`));const a=r.ownerDocument.createElement("div");r.appendChild(a);const l=new Yl(this.column,a,t);return this.formattingContext.addCellFragment(i,o,l),1===n.primary.steps.length&&n.primary.after&&(l.empty=!0),l.pseudoColumn.layout(n,!0).thenReturn(!0)}hasBrokenCellAtSlot(e){const t=this.formattingContext.cellBreakPositions[0];return!!t&&t.cell.anchorSlot.columnIndex===e}extractRowSpanningCellBreakPositions(){const e=this.formattingContext.cellBreakPositions;if(0===e.length)return[];const t=[];let n=0;do{const i=e[n],o=i.cell.rowIndex;if(o<this.currentRowIndex){let s=t[o];s||(s=t[o]=[]),s.push(i),e.splice(n,1)}else n++}while(n<e.length);return t}layoutRowSpanningCellsFromPreviousFragment(e){const t=this.formattingContext,n=this.extractRowSpanningCellBreakPositions(),i=n.reduce(e=>e+1,0);if(0===i)return fi(!0);const o=this.column.layoutContext,s=e.nodeContext;s.viewNode.parentNode.removeChild(s.viewNode);const r=pi("layoutRowSpanningCellsFromPreviousFragment");let a=fi(!0),l=0;const h=[];return n.forEach(e=>{a=a.thenAsync(()=>{const n=aa(e[0].cellNodePosition.steps[1],s.parent);return o.setCurrent(n,!1).thenAsync(()=>{let s=fi(!0),r=0;function a(e){for(;r<e;){if(!h.includes(r)){const e=n.viewNode.ownerDocument.createElement("td");U(e,"padding","0"),n.viewNode.appendChild(e)}r++}}return e.forEach(e=>{s=s.thenAsync(()=>{const t=e.cell;a(t.anchorSlot.columnIndex);const s=e.cellNodePosition,c=aa(s.steps[0],n);return c.offsetInNode=s.offsetInNode,c.after=s.after,c.fragmentIndex=s.steps[0].fragmentIndex+1,o.setCurrent(c,!1).thenAsync(()=>{const n=e.breakChunkPosition;for(let e=0;e<t.colSpan;e++)h.push(r+e);return r+=t.colSpan,this.layoutCell(t,c,n).thenAsync(()=>(c.viewNode.rowSpan=t.rowIndex+t.rowSpan-this.currentRowIndex+i-l,fi(!0)))})})}),s.thenAsync(()=>(a(t.getColumnCount()),l++,fi(!0)))})})}),a.then(()=>{o.setCurrent(s,!0,e.atUnforcedBreak).then(()=>{r.finish(!0)})}),r.result()}startTableRow(e){if(this.inHeader||this.inFooter)return fi(!0);const t=e.nodeContext,n=this.formattingContext;return this.currentRowIndex<0?(t.sourceNode,this.currentRowIndex=n.findRowIndexBySourceNode(t.sourceNode)):this.currentRowIndex++,this.currentColumnIndex=0,this.inRow=!0,this.layoutRowSpanningCellsFromPreviousFragment(e).thenAsync(()=>(this.registerCellFragmentIndex(),this.column.checkOverflowAndSaveEdgeAndBreakPosition(e.lastAfterNodeContext,null,!0,e.breakAtTheEdge)&&0===n.getRowSpanningCellsOverflowingTheRow(this.currentRowIndex-1).length&&(this.resetColumn(),t.overflow=!0,e.break=!0),fi(!0)))}registerCellFragmentIndex(){this.formattingContext.getRowByIndex(this.currentRowIndex).cells.forEach(e=>{const t=this.formattingContext.cellBreakPositions[e.columnIndex];if(t&&t.cell.anchorSlot.columnIndex==e.anchorSlot.columnIndex){const e=t.cellNodePosition.steps[0],n=this.column.layoutContext.xmldoc.getElementOffset(e.node);bl(n,e.fragmentIndex+1,1)}})}startTableCell(e){if(this.inHeader||this.inFooter)return fi(!0);const t=e.nodeContext;this.inRow||(this.currentRowIndex<0?this.currentRowIndex=0:this.currentRowIndex++,this.currentColumnIndex=0,this.inRow=!0);const n=this.formattingContext.getRowByIndex(this.currentRowIndex).cells[this.currentColumnIndex],i=t.copy().modify();i.after=!0,e.nodeContext=i;const o=pi("startTableCell");let s;if(this.hasBrokenCellAtSlot(n.anchorSlot.columnIndex)){const e=this.formattingContext.cellBreakPositions.shift();t.fragmentIndex=e.cellNodePosition.steps[0].fragmentIndex+1,s=fi(e.breakChunkPosition)}else s=this.column.nextInTree(t,e.atUnforcedBreak).thenAsync(e=>{e.viewNode&&t.viewNode.removeChild(e.viewNode);const n=ra(e,0);return fi(new pa(n))});return s.then(i=>{this.layoutCell(n,t,i).then(()=>{this.afterNonInlineElementNode(e),this.currentColumnIndex++,o.finish(!0)})}),o.result()}startNonInlineBox(e){const t=nh(e,this.formattingContext,this.column);if(t)return t;const n=e.nodeContext,i=this.formattingContext.getRepetitiveElements(),o=n.display;return"table-header-group"===o&&i&&i.isHeaderSourceNode(n.sourceNode)?(this.inHeader=!0,fi(!0)):"table-footer-group"===o&&i&&i.isFooterSourceNode(n.sourceNode)?(this.inFooter=!0,fi(!0)):"table-row"===o?this.startTableRow(e):"table-cell"===o?this.startTableCell(e):fi(!0)}endNonInlineBox(e){const t=e.nodeContext;if("table-row"===t.display&&(this.inRow=!1,!this.inHeader&&!this.inFooter)){const e=t.copy().modify();e.after=!1;const n=new Ql(this.currentRowIndex,e,this.formattingContext);this.column.breakPositions.push(n)}return fi(!0)}afterNonInlineElementNode(e){const t=e.nodeContext,n=this.formattingContext.getRepetitiveElements(),i=t.display;if("table-header-group"===i?n&&!n.allowInsertRepeatitiveElements&&n.isHeaderSourceNode(t.sourceNode)?(this.inHeader=!1,t.viewNode.parentNode.removeChild(t.viewNode)):U(t.viewNode,"display","table-row-group"):"table-footer-group"===i&&(n&&!n.allowInsertRepeatitiveElements&&n.isFooterSourceNode(t.sourceNode)?(this.inFooter=!1,t.viewNode.parentNode.removeChild(t.viewNode)):U(t.viewNode,"display","table-row-group")),i&&oh.ignoreList[i])t.viewNode.parentNode.removeChild(t.viewNode);else{if(t.sourceNode!==this.formattingContext.tableSourceNode)return super.afterNonInlineElementNode(e);t.overflow=this.column.checkOverflowAndSaveEdge(t,null),this.resetColumn(),e.break=!0}return fi(!0)}}oh.ignoreList={"table-caption":!0,"table-column-group":!0,"table-column":!0};const sh=[];class rh{layoutEntireTable(e,t){const n=e.formattingContext,i=new ih(n,t);return new ll(i,t.layoutContext).iterate(e)}getColumnWidths(e,t,n,i){const o=e.ownerDocument,s=o.createElement("tr"),r=[];for(let e=0;e<t;e++){const e=o.createElement("td");s.appendChild(e),r.push(e)}e.parentNode.insertBefore(s,e.nextSibling);const a=r.map(e=>{const t=i.getElementClientRect(e);return n?t.height:t.width});return e.parentNode.removeChild(s),a}getColGroupElements(e){const t=[];let n=e.firstElementChild;for(;n;)"colgroup"===n.localName&&t.push(n),n=n.nextElementSibling;return t}normalizeAndGetColElements(e){const t=[];return e.forEach(e=>{let n=e.span;e.removeAttribute("span");let i=e.firstElementChild;for(;i;){if("col"===i.localName){let o=i.span;for(i.removeAttribute("span"),n-=o;o-- >1;){const n=i.cloneNode(!0);e.insertBefore(n,i),t.push(n)}t.push(i)}i=i.nextElementSibling}for(;n-- >0;)i=e.ownerDocument.createElement("col"),e.appendChild(i),t.push(i)}),t}addMissingColElements(e,t,n,i){if(e.length<n){const o=i.ownerDocument.createElement("colgroup");t.push(o);for(let t=e.length;t<n;t++){const t=i.ownerDocument.createElement("col");o.appendChild(t),e.push(t)}}}normalizeColGroups(e,t,n){const i=e.vertical,o=e.lastRowViewNode;if(!o)return;e.lastRowViewNode=null;const s=o.ownerDocument.createDocumentFragment(),r=e.getColumnCount();if(!(r>0))return void(e.colGroups=s);const a=e.colWidths=this.getColumnWidths(o,r,i,n.clientLayout),l=this.getColGroupElements(t),h=this.normalizeAndGetColElements(l);this.addMissingColElements(h,l,r,t),h.forEach((e,t)=>{U(e,i?"height":"width",`${a[t]}px`)}),l.forEach(e=>{s.appendChild(e.cloneNode(!0))}),e.colGroups=s}doInitialLayout(e,t){const n=e.formattingContext;n.vertical=e.vertical,n.initializeRepetitiveElements(e.vertical),e.sourceNode;const i=function(e){const t=sh.findIndex(t=>t.root===e),n=sh[t];return n?n.tableLayoutOption:null}(e.sourceNode);!function(e){const t=sh.findIndex(t=>t.root===e);t>=0&&sh.splice(t,1)}(e.sourceNode);const o=pi("TableLayoutProcessor.doInitialLayout"),s=e.copy();return this.layoutEntireTable(e,t).then(r=>{const a=r.viewNode,l=t.clientLayout.getElementClientRect(a);let h=t.vertical?l.left:l.bottom;if(h+=(t.vertical?-1:1)*ja(e,t.collectElementsOffset()).current,!(t.isOverflown(h)||i&&i.calculateBreakPositionsInside))return t.breakPositions.push(new hh(s)),void o.finish(r);this.normalizeColGroups(n,a,t),n.updateCellSizes(t.clientLayout),o.finish(null)}),o.result()}addCaptions(e,t,n){const i=e.captions;i.forEach((e,o)=>{e&&(t.insertBefore(e.viewNode,n),"top"===e.side&&(i[o]=null))})}addColGroups(e,t,n){e.colGroups&&0===this.getColGroupElements(t).length&&t.insertBefore(e.colGroups.cloneNode(!0),n)}removeColGroups(e,t){if(e.colGroups&&t){const e=this.getColGroupElements(t);e&&e.forEach(e=>{t.removeChild(e)})}}doLayout(e,t){const n=e.formattingContext,i=n.getRootViewNode(e),o=i.firstChild;this.addCaptions(n,i,o),this.addColGroups(n,i,o);const s=new oh(n,t),r=new ll(s,t.layoutContext),a=pi("TableFormattingContext.doLayout");return r.iterate(e).thenFinish(a),a.result()}layout(e,t,n){const i=e.formattingContext;return i.getRootViewNode(e)?(n&&$l(e.parent,t),new ah(i,this).layout(e,t)):t.buildDeepElementView(e)}createEdgeBreakPosition(e,t,n,i){return new Zl(e,t,n,i)}startNonInlineElementNode(e){return!1}afterNonInlineElementNode(e,t){return!1}finishBreak(e,t,n,i){const o=t.formattingContext;if("table-row"===t.display){t.sourceNode;const n=o.findRowIndexBySourceNode(t.sourceNode);let i;if(o.cellBreakPositions=[],i=t.after?o.getRowSpanningCellsOverflowingTheRow(n):o.getCellsFallingOnRow(n),i.length){const s=pi("TableLayoutProcessor.finishBreak");let r=0;return s.loopWithFrame(e=>{if(r===i.length)return void e.breakLoop();const t=i[r++],s=o.getCellFragmentOfCell(t),a=s.findAcceptableBreakPosition().nodeContext,l=s.cellNodeContext,h=l.toNodePosition(),c=new pa(a.toNodePosition());o.cellBreakPositions.push({cellNodePosition:h,breakChunkPosition:c,cell:t});const u=l.viewNode;s.column.layoutContext.processFragmentedBlockEdge(s.cellNodeContext),n<t.rowIndex+t.rowSpan-1&&(u.rowSpan=n-t.rowIndex+1),s.empty?e.continueLoop():s.pseudoColumn.finishBreak(a,!1,!0).then(()=>{(function(e,t,n){const i=t.getRepetitiveElements();if(!i)return;const o=t.vertical,s=e.column,r=e.pseudoColumn.getColumnElement(),a=e.cellNodeContext.viewNode,l=s.clientLayout.getElementClientRect(a),h=s.getComputedPaddingBorder(a);o?U(r,"max-width",`${l.right-s.footnoteEdge-i.calculateOffset(n)-h.right}px`):U(r,"max-height",`${s.footnoteEdge-i.calculateOffset(n)-l.top-h.top}px`);U(r,"overflow","hidden")})(s,o,a),e.continueLoop()})}).then(()=>{e.clearOverflownViewNodes(t,!1),e.layoutContext.processFragmentedBlockEdge(t),o.finishFragment(),s.finish(!0)}),s.result()}}return o.finishFragment(),ol.finishBreak(e,t,n,i)}clearOverflownViewNodes(e,t,n,i){nl.prototype.clearOverflownViewNodes(e,t,n,i)}}class ah extends rl{constructor(e,t){super(),this.tableFormattingContext=e,this.processor=t}resolveLayoutMode(e){const t=this.tableFormattingContext.getRepetitiveElements();return t&&t.doneInitialLayout?(e.sourceNode!==this.tableFormattingContext.tableSourceNode||e.after||t&&t.preventSkippingHeader(),new uh(this.tableFormattingContext,this.processor)):new lh(this.tableFormattingContext,this.processor)}clearNodes(e){super.clearNodes(e);const t=this.tableFormattingContext.getRootViewNode(e);this.processor.removeColGroups(this.tableFormattingContext,t)}restoreState(e,t){super.restoreState(e,t),this.tableFormattingContext.finishFragment()}}class lh extends Bl{constructor(e,t){super(e),this.processor=t}doLayout(e,t){return this.processor.doInitialLayout(e,t)}}class hh extends Ka{constructor(e){super(e,null,e.overflow,0)}getMinBreakPenalty(){if(!this.isEdgeUpdated)throw new Error("EdgeBreakPosition.prototype.updateEdge not called");return(this.overflows?3:0)+(this.position.parent?this.position.parent.breakPenalty:0)}breakPositionChosen(e){e.fragmentLayoutConstraints.push(new ch(this.position.sourceNode))}}class ch{constructor(e){this.tableRootNode=e,this.flagmentLayoutConstraintType="EntireTable"}allowLayout(e,t,n){return e.overflow,!1}nextCandidate(e){return!0}postLayout(e,t,n,i){t.sourceNode,sh.push({root:t.sourceNode,tableLayoutOption:{calculateBreakPositionsInside:!0}})}finishBreak(e,t){return fi(!0)}equalsTo(e){return e instanceof ch&&e.tableRootNode===this.tableRootNode}getPriorityOfFinishBreak(){return 0}}class uh extends Ml{constructor(e,t){super(e),this.processor=t}doLayout(e,t){const n=this.formattingContext.getRepetitiveElements();if(n&&!n.isAfterLastContent(e)){const n=new dh(e);t.fragmentLayoutConstraints.some(e=>n.equalsTo(e))||t.fragmentLayoutConstraints.unshift(n)}return this.processor.doLayout(e,t)}}class dh extends Vl{constructor(e){super(e),this.flagmentLayoutConstraintType="TableRow",this.cellFragmentLayoutConstraints=[]}allowLayout(e,t,n){const i=this.getRepetitiveElements();return!(i&&!n.pseudoParent&&!Ha(this.nodeContext.viewNode)&&i.isEnableToUpdateState()&&(t&&!e||e&&e.overflow))}nextCandidate(e){const t=this.nodeContext.formattingContext;return!!this.collectCellFragmentLayoutConstraints(e,t).some(t=>t.constraints.some(t=>t.nextCandidate(e)))||super.nextCandidate(e)}postLayout(e,t,n,i){const o=this.nodeContext.formattingContext;if(this.cellFragmentLayoutConstraints=this.collectCellFragmentLayoutConstraints(t,o),this.cellFragmentLayoutConstraints.forEach(t=>{t.constraints.forEach(o=>{o.postLayout(e,t.breakPosition,n,i)})}),!e){const e=o.getRootViewNode(this.nodeContext);(new rh).removeColGroups(o,e),this.removeDummyRowNodes(n)}super.postLayout(e,t,n,i)}finishBreak(e,t){this.nodeContext.formattingContext;const n=pi("finishBreak"),i=this.cellFragmentLayoutConstraints.reduce((e,t)=>e.concat(t.constraints.map(e=>({constraint:e,breakPosition:t.breakPosition}))),[]);let o=0;return n.loop(()=>{if(o<i.length){const e=i[o++];return e.constraint.finishBreak(e.breakPosition,t).thenReturn(!0)}return fi(!1)}).then(()=>{n.finish(!0)}),n.result().thenAsync(()=>super.finishBreak(e,t))}removeDummyRowNodes(e){if(e&&"table-row"===e.display&&e.viewNode)for(;e.viewNode.previousElementSibling;){const t=e.viewNode.previousElementSibling;t.parentNode&&t.parentNode.removeChild(t)}}collectCellFragmentLayoutConstraints(e,t){return this.getCellFragemnts(e,t).map(e=>({constraints:e.fragment.pseudoColumn.getColumn().fragmentLayoutConstraints,breakPosition:e.breakPosition}))}getCellFragemnts(e,t){let n=Number.MAX_VALUE;e&&"table-row"===e.display&&(e.sourceNode,n=t.findRowIndexBySourceNode(e.sourceNode)+1),n=Math.min(t.cellFragments.length,n);const i=[];for(let e=0;e<n;e++)t.cellFragments[e]&&t.cellFragments[e].forEach(e=>{e&&i.push({fragment:e,breakPosition:e.findAcceptableBreakPosition().nodeContext})});return i}getElementsOffsetsForTableCell(e){const t=this.nodeContext.formattingContext,n=t.findCellFromColumn(e);return n?t.collectElementsOffsetOfUpperCells(n):t.collectElementsOffsetOfHighestColumn()}equalsTo(e){return e instanceof dh&&this.nodeContext.formattingContext===e.nodeContext.formattingContext}}const ph=new rh;function fh(e){return e.reduce((e,t)=>e+t,0)/e.length}u(t.HOOKS.RESOLVE_FORMATTING_CONTEXT,(function(e,t,n,i,o,s){if(!t)return null;if(n===Bt.table){const t=e.parent;return new Jl(t?t.formattingContext:null,e.sourceNode)}return null})),u(t.HOOKS.RESOLVE_LAYOUT_PROCESSOR,(function(e){return e instanceof Jl?ph:null}));class gh{constructor(e,t){this.layoutResult=e,this.penalty=t}}function mh(e){return e.vertical?e.width:e.height}function bh(e,t){e.vertical?e.width=t:e.height=t}class wh{constructor(e,t,n){this.layoutContainer=e,this.columnGenerator=t,this.regionPageFloatLayoutContext=n,this.originalContainerBlockSize=mh(e)}balanceColumns(e){const t=this,n=pi("ColumnBalancer#balanceColumns");t.preBalance(e),t.savePageFloatLayoutContexts(e),t.layoutContainer.clear();const i=[t.createTrialResult(e)];return n.loopWithFrame(e=>{t.hasNextCandidate(i)?(t.updateCondition(i),t.columnGenerator().then(n=>{t.savePageFloatLayoutContexts(n),t.layoutContainer.clear(),n?(i.push(t.createTrialResult(n)),e.continueLoop()):e.breakLoop()})):e.breakLoop()}).then(()=>{const e=i.reduce((e,t)=>t.penalty<e.penalty?t:e,i[0]);t.restoreContents(e.layoutResult),t.postBalance(),n.finish(e.layoutResult)}),n.result()}createTrialResult(e){const t=this.calculatePenalty(e);return new gh(e,t)}preBalance(e){}postBalance(){bh(this.layoutContainer,this.originalContainerBlockSize)}savePageFloatLayoutContexts(e){const t=this.regionPageFloatLayoutContext.detachChildren();e&&(e.columnPageFloatLayoutContexts=t)}restoreContents(e){const t=this.layoutContainer.element;e.columns.forEach(e=>{t.appendChild(e.element)}),e.columnPageFloatLayoutContexts,this.regionPageFloatLayoutContext.attachChildren(e.columnPageFloatLayoutContexts)}}const Eh=1;function yh(e){const t=e[e.length-1];if(0===t.penalty)return!1;const n=e[e.length-2];if(n&&t.penalty>=n.penalty)return!1;const i=t.layoutResult.columns;return Math.max.apply(null,i.map(e=>e.computedBlockSize))>Math.max.apply(null,i.map(e=>e.getMaxBlockSizeOfPageFloats()))+Eh}function Sh(e,t){const n=e[e.length-1].layoutResult.columns,i=Math.max.apply(null,n.map(e=>isNaN(e.blockDistanceToBlockEndFloats)?e.computedBlockSize:e.computedBlockSize-e.blockDistanceToBlockEndFloats+Eh))-Eh;i<mh(t)?bh(t,i):bh(t,mh(t)-1)}class Nh extends wh{constructor(e,t,n,i){super(n,e,t),this.columnCount=i,this.originalPosition=null,this.foundUpperBound=!1}preBalance(e){const t=e.columns.reduce((e,t)=>e+t.computedBlockSize,0);bh(this.layoutContainer,t/this.columnCount),this.originalPosition=e.position}checkPosition(e){return this.originalPosition?this.originalPosition.isSamePosition(e):null===e}calculatePenalty(e){if(!this.checkPosition(e.position))return 1/0;const t=e.columns;return vh(t)?1/0:Math.max.apply(null,t.map(e=>e.computedBlockSize))}hasNextCandidate(e){if(1===e.length)return!0;if(this.foundUpperBound)return yh(e);{const t=e[e.length-1];return this.checkPosition(t.layoutResult.position)&&!vh(t.layoutResult.columns)?(this.foundUpperBound=!0,!0):mh(this.layoutContainer)<this.originalContainerBlockSize}}updateCondition(e){if(this.foundUpperBound)Sh(e,this.layoutContainer);else{const e=Math.min(this.originalContainerBlockSize,mh(this.layoutContainer)+.1*this.originalContainerBlockSize);bh(this.layoutContainer,e)}}}function vh(e){if(e.length<=1)return!1;const t=e[e.length-1].computedBlockSize;return e.slice(0,e.length-1).every(e=>t>e.computedBlockSize)}class Ch extends wh{constructor(e,t,n){super(n,e,t)}calculatePenalty(e){return e.columns.every(e=>0===e.computedBlockSize)?1/0:function(e){const t=fh(e);return fh(e.map(e=>{const n=e-t;return n*n}))}(e.columns.filter(e=>!e.pageBreakType).map(e=>e.computedBlockSize))}hasNextCandidate(e){return yh(e)}updateCondition(e){Sh(e,this.layoutContainer)}}class Th{constructor(e,t,n){this.endStuckFixed=e,this.endFixed=t,this.endSlipped=n}}class xh{constructor(){this.map=[]}getMaxFixed(){return 0==this.map.length?0:this.map[this.map.length-1].endFixed}getMaxSlipped(){return 0==this.map.length?0:this.map[this.map.length-1].endSlipped}addStuckRange(e){if(0==this.map.length)this.map.push(new Th(e,e,e));else{const t=this.map[this.map.length-1],n=t.endSlipped+e-t.endFixed;t.endFixed==t.endStuckFixed?(t.endFixed=e,t.endStuckFixed=e,t.endSlipped=n):this.map.push(new Th(e,e,n))}}addSlippedRange(e){0==this.map.length?this.map.push(new Th(e,0,0)):this.map[this.map.length-1].endFixed=e}slippedByFixed(e){const t=this,n=Z(this.map.length,n=>e<=t.map[n].endFixed),i=this.map[n];return i.endSlipped-Math.max(0,i.endStuckFixed-e)}fixedBySlipped(e){const t=this,n=Z(this.map.length,n=>e<=t.map[n].endSlipped),i=this.map[n];return i.endStuckFixed-(i.endSlipped-e)}}class Ih{constructor(e,t,n,i,o,s,r,a){if(this.context=e,this.style=t,this.offset=n,this.isRoot=i,this.flowChunk=o,this.atBlockStart=s,this.atFlowStart=r,this.isParentBoxDisplayed=a,this.isBlockValue=null,this.hasBoxValue=null,this.styleValues={},this.beforeBox=null,this.afterBox=null,this.breakBefore=null,this.flowName=o.flowName,this.hasBox()){const i=t._pseudos;if(i&&i.before){const t=new Ih(e,i.before,n,!1,o,this.isBlock(),r,!0);Ea(t.styleValue("content"))&&(this.beforeBox=t,this.breakBefore=t.breakBefore)}}this.breakBefore=Ba(this.getBreakValue("before"),this.breakBefore),this.atFlowStart&&Fa(this.breakBefore)&&(o.breakBefore=Ba(o.breakBefore,this.breakBefore))}buildAfterPseudoElementBox(e,t,n){if(this.hasBox()){const i=this.style._pseudos;if(i&&i.after){const o=new Ih(this.context,i.after,e,!1,this.flowChunk,t,n,!0);Ea(o.styleValue("content"))&&(this.afterBox=o)}}}styleValue(e,t){if(!(e in this.styleValues)){const n=this.style[e];this.styleValues[e]=n?n.evaluate(this.context,e):t||null}return this.styleValues[e]}displayValue(){return this.styleValue("display",Bt.inline)}isBlock(){if(null===this.isBlockValue){const e=this.displayValue(),t=this.styleValue("position"),n=this.styleValue("float");this.isBlockValue=Ja(e,t,n,this.isRoot)}return this.isBlockValue}hasBox(){return null===this.hasBoxValue&&(this.hasBoxValue=this.isParentBoxDisplayed&&this.displayValue()!==Bt.none),this.hasBoxValue}getBreakValue(e){let t=null;if(this.isBlock()){const n=this.styleValue(`break-${e}`);n&&(t=n.toString())}return t}}class Ph{constructor(e){this.context=e,this.stack=[],this.atBlockStart=!0,this.atFlowStart=!0,this.atStartStack=[]}empty(){return 0===this.stack.length}lastBox(){return this.stack[this.stack.length-1]}lastFlowName(){const e=this.lastBox();return e?e.flowChunk.flowName:null}isCurrentBoxDisplayed(){return this.stack.every(e=>e.displayValue()!==Bt.none)}push(e,t,n,i){const o=this.lastBox();i&&o&&i.flowName!==o.flowName&&this.atStartStack.push({atBlockStart:this.atBlockStart,atFlowStart:this.atFlowStart});const s=i||o.flowChunk,r=this.atFlowStart||!!i,a=this.isCurrentBoxDisplayed(),l=new Ih(this.context,e,t,n,s,r||this.atBlockStart,r,a);return this.stack.push(l),this.atBlockStart=l.hasBox()?!l.beforeBox&&l.isBlock():this.atBlockStart,this.atFlowStart=l.hasBox()?!l.beforeBox&&r:this.atFlowStart,l}encounteredTextNode(e){const t=this.lastBox();(this.atBlockStart||this.atFlowStart)&&t.hasBox()&&(Jr(e,Qr(t.styleValue("white-space",Bt.normal).toString()))||(this.atBlockStart=!1,this.atFlowStart=!1))}pop(e){const t=this.stack.pop();if(t.buildAfterPseudoElementBox(e,this.atBlockStart,this.atFlowStart),this.atFlowStart&&t.afterBox){const e=t.afterBox.getBreakValue("before");t.flowChunk.breakBefore=Ba(t.flowChunk.breakBefore,e)}const n=this.lastBox();if(n)if(n.flowName===t.flowName)t.hasBox()&&(this.atBlockStart=this.atFlowStart=!1);else{const e=this.atStartStack.pop();this.atBlockStart=e.atBlockStart,this.atFlowStart=e.atFlowStart}return t}nearestBlockStartOffset(e){if(!e.atBlockStart)return e.offset;let t=this.stack.length-1,n=this.stack[t];for(n===e&&(t--,n=this.stack[t]);t>=0;){if(n.flowName!==e.flowName)return e.offset;if(!n.atBlockStart)return n.offset;if(n.isRoot)return n.offset;e=n,n=this.stack[--t]}throw new Error("No block start offset found!")}}class Ah{constructor(e,t,n,i,o,s,r,a){this.xmldoc=e,this.scope=n,this.context=i,this.primaryFlows=o,this.validatorSet=s,this.counterListener=r,this.rootStyle={},this.styleMap={},this.flows={},this.flowChunks=[],this.flowListener=null,this.flowToReach=null,this.idToReach=null,this.primary=!0,this.primaryStack=[],this.rootBackgroundAssigned=!1,this.rootLayoutAssigned=!1,this.breakBeforeValues={},this.bodyReached=!0,this.root=e.root,this.cascadeHolder=t,this.last=this.root,this.cascade=t.createInstance(i,r,a,e.lang),this.offsetMap=new xh;const l=e.getElementOffset(this.root);this.lastOffset=l,this.boxStack=new Ph(i),this.offsetMap.addStuckRange(l);const h=this.getAttrStyle(this.root);switch(this.cascade.pushElement(this.root,h,l),this.postprocessTopStyle(h,!1),this.root.namespaceURI){case L.XHTML:case L.FB2:this.bodyReached=!1}this.primaryStack.push(!0),this.styleMap={},this.styleMap[`e${l}`]=h,this.lastOffset++,this.replayFlowElementsFromOffset(-1)}hasProp(e,t,n){const i=e[n];return i&&i.evaluate(this.context)!==t[n]}transferPropsToRoot(e,t){for(const n in t){const i=e[n];if(i)this.rootStyle[n]=i,delete e[n];else{const e=t[n];e&&(this.rootStyle[n]=new _o(e,Bi))}}}postprocessTopStyle(e,t){if(["writing-mode","direction"].forEach(n=>{!e[n]||t&&this.rootStyle[n]||(this.rootStyle[n]=e[n])}),!this.rootBackgroundAssigned){const t=this.hasProp(e,this.validatorSet.backgroundProps,"background-color")?e["background-color"].evaluate(this.context):null,n=this.hasProp(e,this.validatorSet.backgroundProps,"background-image")?e["background-image"].evaluate(this.context):null;(t&&t!==Bt.inherit||n&&n!==Bt.inherit)&&(this.transferPropsToRoot(e,this.validatorSet.backgroundProps),this.rootBackgroundAssigned=!0)}if(!this.rootLayoutAssigned)for(let t=0;t<Oh.length;t++)if(this.hasProp(e,this.validatorSet.layoutProps,Oh[t])){this.transferPropsToRoot(e,this.validatorSet.layoutProps),this.rootLayoutAssigned=!0;break}if(!t){const t=e["font-size"];if(t){const e=t.evaluate(this.context);let n=e.num;switch(e.unit){case"em":case"rem":n*=this.context.initialFontSize;break;case"ex":n*=this.context.initialFontSize*Ie.ex/Ie.em;break;case"%":n*=this.context.initialFontSize/100;break;default:{const t=Ie[e.unit];t&&(n*=t)}}this.context.rootFontSize=n}}}getTopContainerStyle(){let e=0;for(;!this.bodyReached&&(e+=5e3,this.styleUntil(e,0)!=Number.POSITIVE_INFINITY););return this.rootStyle}getAttrStyle(e){if(e.style instanceof CSSStyleDeclaration){const t=e.getAttribute("style");if(t)return ar(this.scope,this.validatorSet,this.xmldoc.url,t)}return{}}getReachedOffset(){return this.lastOffset}replayFlowElementsFromOffset(e){if(e>=this.lastOffset)return;const t=this.context,n=this.xmldoc.getElementOffset(this.root);if(e<n){const e=this.getStyle(this.root,!1),i=$o(e,"flow-into"),o=i?i.evaluate(t,"flow-into").toString():"body",s=this.encounteredFlowElement(o,e,this.root,n);this.boxStack.empty()&&this.boxStack.push(e,n,!0,s)}let i=this.xmldoc.getNodeByOffset(e),o=this.xmldoc.getNodeOffset(i,0,!1);if(!(o>=this.lastOffset))for(;;){if(1!=i.nodeType)o+=i.textContent.length;else{const e=i,n=this.getStyle(e,!1),s=n["flow-into"];if(s){const i=s.evaluate(t,"flow-into").toString();this.encounteredFlowElement(i,n,e,o)}o++}if(o>=this.lastOffset)break;let e=i.firstChild;if(null==e)for(;e=i.nextSibling,!e;)if(i=i.parentNode,i===this.root)return;i=e}}resetFlowChunkStream(e){this.flowListener=e;for(let e=0;e<this.flowChunks.length;e++)this.flowListener.encounteredFlowChunk(this.flowChunks[e],this.flows[this.flowChunks[e].flowName])}styleUntilFlowIsReached(e){this.flowToReach=e;let t=0;for(;null!=this.flowToReach&&(t+=5e3,this.styleUntil(t,0)!=Number.POSITIVE_INFINITY););}styleUntilIdIsReached(e){if(!e)return;this.idToReach=e;let t=0;for(;this.idToReach&&(t+=5e3,this.styleUntil(t,0)!==Number.POSITIVE_INFINITY););this.idToReach=null}encounteredFlowElement(e,t,n,i){let o=0,s=Number.POSITIVE_INFINITY,r=!1,a=!1,l=!1;const c=t["flow-options"];if(c){const e=function(e){if(e){const t=new pn;try{return e.visit(t),t.propSet}catch(e){h.warn(e,"toSet:")}}return{}}(c.evaluate(this.context,"flow-options"));r=!!e.exclusive,a=!!e.static,l=!!e.last}const u=t["flow-linger"];u&&(s=gn(u.evaluate(this.context,"flow-linger"),Number.POSITIVE_INFINITY));const d=t["flow-priority"];d&&(o=gn(d.evaluate(this.context,"flow-priority"),0));const p=this.breakBeforeValues[i]||null;let f=this.flows[e];if(!f){const t=this.boxStack.lastFlowName();f=this.flows[e]=new ea(e,t)}const g=new ta(e,n,i,o,s,r,a,l,p);return this.flowChunks.push(g),this.flowToReach==e&&(this.flowToReach=null),this.flowListener&&this.flowListener.encounteredFlowChunk(g,f),g}registerForcedBreakOffset(e,t,n){if(Fa(e)){const e=this.flows[n].forcedBreakOffsets;(0===e.length||e[e.length-1]<t)&&e.push(t)}const i=this.breakBeforeValues[t];this.breakBeforeValues[t]=Ba(i,e)}styleUntil(e,t){let n,i=-1;if(e<=this.lastOffset&&(n=this.offsetMap.slippedByFixed(e),i=n+t,i<this.offsetMap.getMaxSlipped()))return this.offsetMap.fixedBySlipped(i);if(null==this.last)return Number.POSITIVE_INFINITY;const o=this.context;for(;;){let s=this.last.firstChild;if(null==s)for(;;){if(1==this.last.nodeType){this.cascade.popElement(this.last),this.primary=this.primaryStack.pop();const e=this.boxStack.pop(this.lastOffset);let t=null;if(e.afterBox){const n=e.afterBox.getBreakValue("before");this.registerForcedBreakOffset(n,e.afterBox.atBlockStart?this.boxStack.nearestBlockStartOffset(e):e.afterBox.offset,e.flowName),t=e.afterBox.getBreakValue("after")}t=Ba(t,e.getBreakValue("after")),this.registerForcedBreakOffset(t,this.lastOffset,e.flowName)}if(s=this.last.nextSibling,s)break;if(this.last=this.last.parentNode,this.last===this.root)return this.last=null,e<this.lastOffset&&(i<0&&(n=this.offsetMap.slippedByFixed(e),i=n+t),i<=this.offsetMap.getMaxSlipped())?this.offsetMap.fixedBySlipped(i):Number.POSITIVE_INFINITY}if(this.last=s,1!=this.last.nodeType)this.lastOffset+=this.last.textContent.length,this.boxStack.encounteredTextNode(this.last),this.primary?this.offsetMap.addStuckRange(this.lastOffset):this.offsetMap.addSlippedRange(this.lastOffset);else{const s=this.last,r=this.getAttrStyle(s);this.primaryStack.push(this.primary),this.cascade.pushElement(s,r,this.lastOffset);const a=s.getAttribute("id")||s.getAttributeNS(L.XML,"id");let l;a&&a===this.idToReach&&(this.idToReach=null),this.bodyReached||"body"!=s.localName||s.parentNode!=this.root||(this.postprocessTopStyle(r,!0),this.bodyReached=!0);const h=r["flow-into"];if(h){const e=h.evaluate(o,"flow-into").toString(),t=this.encounteredFlowElement(e,r,s,this.lastOffset);this.primary=!!this.primaryFlows[e],l=this.boxStack.push(r,this.lastOffset,s===this.root,t)}else l=this.boxStack.push(r,this.lastOffset,s===this.root);const c=this.boxStack.nearestBlockStartOffset(l);if(this.registerForcedBreakOffset(l.breakBefore,c,l.flowName),l.beforeBox){const e=l.beforeBox.getBreakValue("after");this.registerForcedBreakOffset(e,l.beforeBox.atBlockStart?c:l.offset,l.flowName)}if(this.primary&&l.displayValue()===Bt.none&&(this.primary=!1),this.styleMap[`e${this.lastOffset}`]=r,this.lastOffset++,this.primary?this.offsetMap.addStuckRange(this.lastOffset):this.offsetMap.addSlippedRange(this.lastOffset),e<this.lastOffset&&(i<0&&(n=this.offsetMap.slippedByFixed(e),i=n+t),i<=this.offsetMap.getMaxSlipped()))return this.offsetMap.fixedBySlipped(i)}}}getStyle(e,t){let n=this.xmldoc.getElementOffset(e);const i=`e${n}`;return t&&(n=this.xmldoc.getNodeOffset(e,0,!0)),this.lastOffset<=n&&this.styleUntil(n,0),this.styleMap[i]}processContent(e,t){}}const Oh=["column-count","column-width","column-fill"];var Rh,Lh="/*\n * Copyright 2013 Google, Inc.\n * Copyright 2015 Trim-marks Inc.\n * Copyright 2019 Vivliostyle Foundation\n *\n * CSS property validation.\n */\nNUM = POS_NUM | ZERO | NEGATIVE;\nNNEG_NUM = POS_NUM | ZERO;\nINT = POS_INT | ZERO | NEGATIVE;\nNNEG_INT = POS_INT | ZERO;\nPERCENTAGE = POS_PERCENTAGE | ZERO | NEGATIVE;\nSTRICT_PERCENTAGE = POS_PERCENTAGE | ZERO_PERCENTAGE | NEGATIVE;\nNNEG_PERCENTAGE = POS_PERCENTAGE | ZERO;\nLENGTH = POS_LENGTH | ZERO | NEGATIVE;\nNNEG_LENGTH = POS_LENGTH | ZERO | NEGATIVE;\nPLENGTH = LENGTH | PERCENTAGE;\nPPLENGTH = POS_LENGTH | ZERO | POS_PERCENTAGE;\nALENGTH = LENGTH | auto;\nAPLENGTH = PLENGTH | auto;\nPAPLENGTH = PPLENGTH | auto;\nANGLE = POS_ANGLE | ZERO | NEGATIVE;\nLENGTH_OR_NUM = LENGTH | NUM;\nANGLE_OR_NUM = ANGLE | NUM;\nSCOLOR = HASHCOLOR | aliceblue: #F0F8FF | antiquewhite: #FAEBD7 | aqua: #00FFFF | aquamarine: #7FFFD4 | azure: #F0FFFF |\n    beige: #F5F5DC | bisque: #FFE4C4 | black: #000000 | blanchedalmond: #FFEBCD | blue: #0000FF | blueviolet: #8A2BE2 | brown: #A52A2A |\n    burlywood: #DEB887 | cadetblue: #5F9EA0 | chartreuse: #7FFF00 | chocolate: #D2691E | coral: #FF7F50 | cornflowerblue: #6495ED |\n    cornsilk: #FFF8DC | crimson: #DC143C | cyan: #00FFFF | darkblue: #00008B | darkcyan: #008B8B | darkgoldenrod: #B8860B |\n    darkgray: #A9A9A9 | darkgreen: #006400 | darkgrey: #A9A9A9 | darkkhaki: #BDB76B | darkmagenta: #8B008B | darkolivegreen: #556B2F |\n    darkorange: #FF8C00 | darkorchid: #9932CC | darkred: #8B0000 | darksalmon: #E9967A | darkseagreen: #8FBC8F | darkslateblue: #483D8B |\n    darkslategray: #2F4F4F | darkslategrey: #2F4F4F | darkturquoise: #00CED1 | darkviolet: #9400D3 | deeppink: #FF1493 |\n    deepskyblue: #00BFFF | dimgray: #696969 | dimgrey: #696969 | dodgerblue: #1E90FF | firebrick: #B22222 | floralwhite: #FFFAF0 |\n    forestgreen: #228B22 | fuchsia: #FF00FF | gainsboro: #DCDCDC | ghostwhite: #F8F8FF | gold: #FFD700 | goldenrod: #DAA520 |\n    gray: #808080 | green: #008000 | greenyellow: #ADFF2F | grey: #808080 | honeydew: #F0FFF0 | hotpink: #FF69B4 | indianred: #CD5C5C |\n    indigo: #4B0082 | ivory: #FFFFF0 | khaki: #F0E68C | lavender: #E6E6FA | lavenderblush: #FFF0F5 | lawngreen: #7CFC00 |\n    lemonchiffon: #FFFACD | lightblue: #ADD8E6 | lightcoral: #F08080 | lightcyan: #E0FFFF | lightgoldenrodyellow: #FAFAD2 |\n    lightgray: #D3D3D3 | lightgreen: #90EE90 | lightgrey: #D3D3D3 | lightpink: #FFB6C1 | lightsalmon: #FFA07A | lightseagreen: #20B2AA |\n    lightskyblue: #87CEFA | lightslategray: #778899 | lightslategrey: #778899 | lightsteelblue: #B0C4DE | lightyellow: #FFFFE0 |\n    lime: #00FF00 | limegreen: #32CD32 | linen: #FAF0E6 | magenta: #FF00FF | maroon: #800000 | mediumaquamarine: #66CDAA |\n    mediumblue: #0000CD | mediumorchid: #BA55D3 | mediumpurple: #9370DB | mediumseagreen: #3CB371 | mediumslateblue: #7B68EE |\n    mediumspringgreen: #00FA9A | mediumturquoise: #48D1CC | mediumvioletred: #C71585 | midnightblue: #191970 | mintcream: #F5FFFA |\n    mistyrose: #FFE4E1 | moccasin: #FFE4B5 | navajowhite: #FFDEAD | navy: #000080 | oldlace: #FDF5E6 | olive: #808000 |\n    olivedrab: #6B8E23 | orange: #FFA500 | orangered: #FF4500 | orchid: #DA70D6 | palegoldenrod: #EEE8AA | palegreen: #98FB98 |\n    paleturquoise: #AFEEEE | palevioletred: #DB7093 | papayawhip: #FFEFD5 | peachpuff: #FFDAB9 | peru: #CD853F | pink: #FFC0CB |\n    plum: #DDA0DD | powderblue: #B0E0E6 | purple: #800080 | rebeccapurple: #663399 | red: #FF0000 | rosybrown: #BC8F8F | royalblue: #4169E1 |\n    saddlebrown: #8B4513 | salmon: #FA8072 | sandybrown: #F4A460 | seagreen: #2E8B57 | seashell: #FFF5EE | sienna: #A0522D |\n    silver: #C0C0C0 | skyblue: #87CEEB | slateblue: #6A5ACD | slategray: #708090 | slategrey: #708090 | snow: #FFFAFA |\n    springgreen: #00FF7F | steelblue: #4682B4 | tan: #D2B48C | teal: #008080 | thistle: #D8BFD8 | tomato: #FF6347 |\n    turquoise: #40E0D0 | violet: #EE82EE | wheat: #F5DEB3 | white: #FFFFFF | whitesmoke: #F5F5F5 | yellow: #FFFF00 |\n    yellowgreen: #9ACD32 | transparent | currentcolor;\nRGBCOLOR = rgb(INT{3}) | rgb(STRICT_PERCENTAGE{3});\nRGBACOLOR = rgba(NUM{4}) | rgba(STRICT_PERCENTAGE{3} NUM);\nHSLCOLOR = hsl(NUM PERCENTAGE{2});\nHSLACOLOR = hsl(NUM PERCENTAGE{2} NUM);\nCOLOR = SCOLOR | RGBCOLOR | RGBACOLOR | HSLCOLOR | HSLACOLOR;\nBG_POSITION_TERM = PLENGTH | left | center | right | top | bottom;\nSIDE_OR_CORNER =  [left | right] || [top | bottom];\nCOLOR_STOP = SPACE(COLOR [PERCENTAGE | LENGTH]?);\nLINEAR_GRADIENT = linear-gradient([ANGLE | SPACE(to SIDE_OR_CORNER)]? COLOR_STOP+) |\n                  repeating-linear-gradient([ANGLE | SPACE(to SIDE_OR_CORNER)]? COLOR_STOP+) |;\nGRADIENT_EXTENT = closest-corner | closest-side | farthest-corner | farthest-side;\nGRADIENT_POSITION = at BG_POSITION_TERM{1,4};\nGRADIENT_SHAPE = SPACE(circle LENGTH? GRADIENT_POSITION?) | SPACE(ellipse PLENGTH{2}? GRADIENT_POSITION?)| SPACE([circle | ellipse] GRADIENT_EXTENT? GRADIENT_POSITION?);\nRADIAL_GRADIENT = radial-gradient([GRADIENT_SHAPE | SPACE(GRADIENT_POSITION)]? COLOR_STOP+) |\n                  repeating-radial-gradient([GRADIENT_SHAPE | SPACE(GRADIENT_POSITION)]? COLOR_STOP+);\nURI_OR_NONE = URI | none;\nIMAGE =  URI | LINEAR_GRADIENT | RADIAL_GRADIENT | none;\nazimuth = ANGLE | [[ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards;\nbackground-attachment = COMMA( [scroll | fixed | local]+ );\nbackground-color = COLOR;\nbackground-image = COMMA( IMAGE+ );\nbackground-position = COMMA( SPACE(BG_POSITION_TERM{1,4})+ ); /* relaxed */\nbackground-repeat = COMMA( [repeat | repeat-x | repeat-y | no-repeat]+ );\nborder-collapse = collapse | separate;\nBORDER_SIDE_COLOR = COLOR;\nBORDER_SIDE_STYLE = none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset;\nBORDER_SIDE_WIDTH = thin: 1px | medium: 3px | thick: 5px | NNEG_LENGTH;\nborder-spacing = LENGTH LENGTH?;\nborder-top-color = BORDER_SIDE_COLOR;\nborder-right-color = BORDER_SIDE_COLOR;\nborder-bottom-color = BORDER_SIDE_COLOR;\nborder-left-color = BORDER_SIDE_COLOR;\nborder-top-style = BORDER_SIDE_STYLE;\nborder-right-style = BORDER_SIDE_STYLE;\nborder-bottom-style = BORDER_SIDE_STYLE;\nborder-left-style = BORDER_SIDE_STYLE;\nborder-top-width = BORDER_SIDE_WIDTH;\nborder-right-width = BORDER_SIDE_WIDTH;\nborder-bottom-width = BORDER_SIDE_WIDTH;\nborder-left-width = BORDER_SIDE_WIDTH;\nBORDER_RADIUS = PLENGTH{1,2};\nborder-top-left-radius = BORDER_RADIUS;\nborder-top-right-radius = BORDER_RADIUS;\nborder-bottom-right-radius = BORDER_RADIUS;\nborder-bottom-left-radius = BORDER_RADIUS;\nborder-image-source = IMAGE;\nborder-image-slice = [NUM | PERCENTAGE]{1,4} || fill; /* relaxed */\nborder-image-width = [NUM | PLENGTH | auto]{1,4};\nborder-image-outset = [NUM | LENGTH]{1,4};\nborder-image-repeat = [ stretch | repeat | round | space ]{1,2};\nbottom = APLENGTH;\ncaption-side = top | bottom;\nclear = none | left | right | top | bottom | both | all | same;\nclip = rect(ALENGTH{4}) | rect(SPACE(ALENGTH{4})) | auto;\ncolor = COLOR;\nLIST_STYLE_TYPE = disc | circle | square | decimal | decimal-leading-zero | lower-roman |\n    upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha |\n    upper-alpha | russian | upper-russian | lower-russian | cjk-ideographic | trad-chinese-informal |\n    hebrew | none;\nTYPE_OR_UNIT_IN_ATTR = string | color | url | integer | number | length | angle | time | frequency;\nATTR = attr(SPACE(IDENT TYPE_OR_UNIT_IN_ATTR?) [ STRING | IDENT | COLOR | INT | NUM | PLENGTH | ANGLE | POS_TIME | FREQUENCY]?);\nCONTENT = normal | none |\n    [ STRING | URI | counter(IDENT LIST_STYLE_TYPE?) |\n    counters(IDENT STRING LIST_STYLE_TYPE?) | ATTR |\n    target-counter([ STRING | URI ] IDENT LIST_STYLE_TYPE?) |\n    target-counter(ATTR IDENT LIST_STYLE_TYPE?) |\n    target-counters([ STRING | URI ] IDENT STRING LIST_STYLE_TYPE?) |\n    target-counters(ATTR IDENT STRING LIST_STYLE_TYPE?) |\n    open-quote | close-quote | no-open-quote | no-close-quote ]+;\ncontent = CONTENT;\nCOUNTER = [ IDENT INT? ]+ | none;\ncounter-increment = COUNTER;\ncounter-reset = COUNTER;\ncounter-set = COUNTER;\ncue-after = URI_OR_NONE;\ncue-before = URI_OR_NONE;\ncursor = COMMA(URI* [ auto | crosshair | default | pointer | move | e-resize | ne-resize | nw-resize |\n    n-resize | se-resize | sw-resize | s-resize | w-resize | text | wait | help | progress ]);\ndirection = ltr | rtl;\ndisplay = inline | block | list-item | inline-block | table | inline-table | table-row-group |\n    table-header-group | table-footer-group | table-row | table-column-group | table-column |\n    table-cell | table-caption | none | oeb-page-head | oeb-page-foot | flex | inline-flex |\n    ruby | ruby-base | ruby-text | ruby-base-container | ruby-text-container | run-in | compact | marker;\nelevation = ANGLE | below | level | above | higher | lower;\nempty-cells = show | hide;\nFAMILY = SPACE(IDENT+) | STRING;\nFAMILY_LIST = COMMA( FAMILY+ );\nfont-family = FAMILY_LIST;\nfont-size = xx-small | x-small | small | medium | large | x-large | xx-large | larger | smaller | PPLENGTH | POS_NUM;\nfont-style = normal | italic | oblique;\nfont-variant = normal | small-caps;\nfont-weight = normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;\nheight = PAPLENGTH | POS_NUM ;\nleft = APLENGTH;\nletter-spacing = normal | LENGTH_OR_NUM;\nline-height = normal | POS_NUM | PPLENGTH;\nlist-style-image = IMAGE;\nlist-style-position = inside | outside;\nlist-style-type = LIST_STYLE_TYPE;\nmargin-right = APLENGTH;\nmargin-left = APLENGTH;\nmargin-top = APLENGTH;\nmargin-bottom = APLENGTH;\nNPLENGTH = none | PLENGTH;\nmax-height = NPLENGTH;\nmax-width = NPLENGTH;\nmin-height = auto | PLENGTH;\nmin-width = auto | PLENGTH;\norphans = POS_INT;\noutline-offset = LENGTH;\noutline-color = COLOR | invert;\noutline-style = BORDER_SIDE_STYLE;\noutline-width = BORDER_SIDE_WIDTH;\noverflow = visible | hidden | scroll | auto;\npadding-right = PPLENGTH;\npadding-left = PPLENGTH;\npadding-top = PPLENGTH;\npadding-bottom = PPLENGTH;\nPAGE_BREAK = auto | always | avoid | left | right | recto | verso;\npage-break-after = PAGE_BREAK;\npage-break-before = PAGE_BREAK;\npage-break-inside = avoid | auto;\nPAUSE = POS_TIME | ZERO | POS_PERCENTAGE;\npause-after = PAUSE;\npause-before = PAUSE;\npitch-range = NUM;\npitch = FREQUENCY | x-low | low | medium | high | x-high;\nplay-during = [URI [ mix || repeat ]?] | auto | none;\nposition = static | relative | absolute | fixed;\nquotes = [STRING STRING]+ | none;\nrichness = NUM;\nright = APLENGTH;\nspeak-header = once | always;\nspeak-numeral = digits | continuous;\nspeak-punctuation = code | none;\nspeech-rate = NUM | x-slow | slow | medium | fast | x-fast | faster | slower;\nstress = NUM;\ntable-layout = auto | fixed;\ntext-align = left | right | center | justify | start | end;\ntext-decoration = none | [ underline || overline || line-through || blink ];\ntext-indent = PLENGTH;\ntext-transform = capitalize | uppercase | lowercase | none;\ntop = APLENGTH;\nvertical-align = baseline | sub | super | top | text-top | middle | bottom | text-bottom | PLENGTH;\nvisibility = visible | hidden | collapse;\nvoice-family = FAMILY_LIST;\nvolume = NUM | PERCENTAGE | silent | x-soft | soft | medium | loud | x-loud;\nwhite-space = normal | pre | nowrap | pre-wrap | pre-line;\nwidows = POS_INT;\nwidth = PAPLENGTH | POS_NUM ;\nword-spacing = normal | LENGTH_OR_NUM;\nz-index = auto | INT;\n\n[epub,moz,ms,webkit]hyphens = auto | manual | none;\n[webkit]hyphenate-character = auto | STRING;\n\n/* css-logical */\nmargin-block-start = APLENGTH;\nmargin-block-end = APLENGTH;\nmargin-inline-start = APLENGTH;\nmargin-inline-end = APLENGTH;\npadding-block-start = APLENGTH;\npadding-block-end = APLENGTH;\npadding-inline-start = APLENGTH;\npadding-inline-end = APLENGTH;\nborder-block-start-color = BORDER_SIDE_COLOR;\nborder-block-end-color = BORDER_SIDE_COLOR;\nborder-inline-start-color = BORDER_SIDE_COLOR;\nborder-inline-end-color = BORDER_SIDE_COLOR;\nborder-block-start-style = BORDER_SIDE_STYLE;\nborder-block-end-style = BORDER_SIDE_STYLE;\nborder-inline-start-style = BORDER_SIDE_STYLE;\nborder-inline-end-style = BORDER_SIDE_STYLE;\nborder-block-start-width = BORDER_SIDE_WIDTH;\nborder-block-end-width = BORDER_SIDE_WIDTH;\nborder-inline-start-width = BORDER_SIDE_WIDTH;\nborder-inline-end-width = BORDER_SIDE_WIDTH;\nblock-start = APLENGTH;\nblock-end = APLENGTH;\ninline-start = APLENGTH;\ninline-end = APLENGTH;\nblock-size = PAPLENGTH | POS_NUM;\ninline-size = PAPLENGTH | POS_NUM;\nmax-block-size = NPLENGTH;\nmax-inline-size = NPLENGTH;\nmin-block-size = auto | PLENGTH;\nmin-inline-size = auto | PLENGTH;\n\nSHAPE = auto | rectangle( PLENGTH{4} ) |  ellipse( PLENGTH{4} ) |  circle( PLENGTH{3} ) |\n    polygon( SPACE(PLENGTH+)+ );\n[epubx]shape-inside = SHAPE;\n[epubx,webkit]shape-outside = SHAPE;\n[epubx,ms]wrap-flow = auto | both | start | end | maximum | clear | around /* epub al */;\n\nTRANSFORM_FUNCTION = matrix(NUM{6}) | translate(PLENGTH{1,2}) | translateX(PLENGTH) | translateY(PLENGTH) |\n scale(NUM{1,2}) | scaleX(NUM) | scaleY(NUM) | rotate(ANGLE) | skewX(ANGLE) | skewY(ANGLE);\n[epub,ms]transform = none | TRANSFORM_FUNCTION+;\n[epub,ms]transform-origin = [[[ top | bottom | left | right] PLENGTH?] | center | PLENGTH]{1,2}; /* relaxed */\n\nBOX = border-box | padding-box | content-box;\nSHADOW = SPACE(inset || LENGTH{2,4} || COLOR); /* relaxed */\n[webkit]background-size = COMMA( SPACE( [PLENGTH | auto ]{1,2} | cover | contain)+ );\n[webkit]background-origin = COMMA( BOX+ );\n[webkit]background-clip = COMMA( BOX+ );\n[webkit]box-shadow = none | COMMA( SHADOW+ );\ntext-shadow = none |  COMMA( SHADOW+ );\n[webkit]box-decoration-break = slice | clone;\nFILTER_FUNCTION = blur(LENGTH) | brightness(NUM | PERCENTAGE) | contrast(NUM | PERCENTAGE) | drop-shadow(SPACE(LENGTH{2,3} COLOR?))\n                | grayscale(NUM | PERCENTAGE) | hue-rotate(ANGLE) | invert(NUM | PERCENTAGE) | opacity(NUM | PERCENTAGE)\n                | saturate(NUM | PERCENTAGE) | sepia(NUM | PERCENTAGE);\nFILTER_FUNCTION_LIST = FILTER_FUNCTION+;\n[webkit]filter = none | FILTER_FUNCTION_LIST;\n\nopacity = NUM;\n\n[moz,webkit]column-width = LENGTH | auto;\n[moz,webkit]column-count = INT | auto;\n[moz,webkit]column-gap = LENGTH | normal;\n[moz,webkit]column-rule-color = COLOR;\n[moz,webkit]column-rule-style = BORDER_SIDE_STYLE;\n[moz,webkit]column-rule-width = BORDER_SIDE_WIDTH;\nBREAK = auto | avoid | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region;\nbreak-before = BREAK;\nbreak-after = BREAK;\nbreak-inside = auto | avoid | avoid-page | avoid-column | avoid-region;\n[webkit]column-span = none | auto | all;\n[moz]column-fill = auto | balance | balance-all;\n\nsrc = COMMA([SPACE(URI format(STRING+)?) | local(FAMILY)]+); /* for font-face */\n\n[epubx,webkit]flow-from = IDENT;\n[epubx,webkit]flow-into = IDENT;\n[epubx]flow-linger = INT | none;\n[epubx]flow-priority = INT;\n[epubx]flow-options = none | [ exclusive || last || static ];\n[epubx]page = INT | auto;\n[epubx]min-page-width = LENGTH;\n[epubx]min-page-height = LENGTH;\n[epubx]required = true | false;\n[epubx]enabled = true | false;\n[epubx]conflicting-partitions = COMMA(IDENT+);\n[epubx]required-partitions = COMMA(IDENT+);\n[epubx]snap-height = LENGTH | none;\n[epubx]snap-width = LENGTH | none;\n[epubx]flow-consume = all | some;\n[epubx]utilization = NUM;\n[epubx]text-zoom = font-size | scale;\n\n[adapt]template = URI_OR_NONE;\n[adapt]behavior = IDENT;\n\n/* CSS Fonts */\nfont-size-adjust = none | NNEG_NUM;\n[webkit]font-kerning = auto | normal | none;\nfont-variant-east-asian = normal | [[ jis78 | jis83 | jis90 | jis04 | simplified | traditional ] || [ full-width | proportional-width ] || ruby];\nfont-feature-settings = COMMA( SPACE( STRING [ on | off | INT ]? )+ );\nfont-stretch = normal | wider | narrower | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded;\n\n/* CSS Images */\nimage-resolution = RESOLUTION;\nobject-fit = fill | contain | cover | none | scale-down;\nobject-position = COMMA( SPACE(BG_POSITION_TERM{1,4})+ ); /* relaxed */\n\n/* CSS Paged Media */\nPAGE_SIZE = a5 | a4 | a3 | b5 | b4 | jis-b5 | jis-b4 | letter | legal | ledger;\nbleed = auto | LENGTH;\nmarks = none | [ crop || cross ];\nsize = POS_LENGTH{1,2} | auto | [ PAGE_SIZE || [ portrait | landscape ] ];\n\n/* CSS Page Floats */\nfloat-reference = inline | column | region | page;\nfloat = block-start | block-end | inline-start | inline-end | snap-block | snap-inline | left | right | top | bottom | none | footnote;\nfloat-min-wrap-block = PPLENGTH;\n\n/* CSS Ruby */\nruby-align = start | center | space-between | space-around;\nruby-position = over | under | inter-character;\n\n/* CSS Size Adjust */\n[moz,ms]text-size-adjust = auto | none | POS_PERCENTAGE;\n\n/* CSS Text */\n[ms,webkit]line-break = auto | loose | normal | strict;\noverflow-wrap = normal | break-word;\n[moz]tab-size = NNEG_INT | NNEG_LENGTH;\n[moz,ms]text-align-last = auto | start | end | left | right | center | justify;\n[ms]text-justify = auto | none | inter-word | inter-character | inter-ideograph /* specified in UA stylesheet for IE */;\n[ms]word-break = normal | keep-all | break-all | break-word;\n[ms]word-wrap = normal | break-word;\n\n/* CSS Text Decoration */\n[webkit]text-decoration-color = COLOR;\n[webkit]text-decoration-line = none | [ underline || overline || line-through || blink ];\n[webkit]text-decoration-skip = none | [ objects || spaces || ink || edges || box-decoration ];\n[webkit]text-decoration-style = solid | double | dotted | dashed | wavy;\n[epub,webkit]text-emphasis-color = COLOR;\n[webkit]text-emphasis-position = [ over | under ] [ right | left ];\n[epub,webkit]text-emphasis-style = none | [[ filled | open ] || [ dot | circle | double-circle | triangle | sesame ]] | STRING;\n[ms,webkit]text-underline-position = auto | [ under || [ left | right ]];\n\n/* CSS Transforms */\n[ms,webkit]backface-visibility = visible | hidden;\n\n/* CSS UI */\nbox-sizing = content-box | padding-box | border-box;\n[ms]text-overflow = [clip | ellipsis | STRING]{1,2};\n\n/* CSS Writing Modes */\n[webkit]text-combine = none | horizontal;\n[epub,ms]text-combine-horizontal = none | all | [ digits POS_INT? ]; /* relaxed */\ntext-combine-upright = none | all | [ digits POS_INT? ]; /* relaxed */\n[epub,webkit]text-orientation = mixed | upright | sideways-right | sideways-left | sideways | use-glyph-orientation /* the following values are kept for backward-compatibility */ | vertical-right | rotate-right | rotate-left | rotate-normal | auto;\nunicode-bidi = normal | embed | isolate | bidi-override | isolate-override | plaintext;\n[epub,webkit]writing-mode = horizontal-tb | vertical-rl | lr-tb | rl-tb | tb-rl | lr | rl | tb;\n\n/* CSS Flex box */\nFLEX_BASIS = content | PAPLENGTH;\nflex-direction = row | row-reverse | column | column-reverse;\nflex-wrap = nowrap | wrap | wrap-reverse;\norder = INT;\nflex-grow = NNEG_NUM;\nflex-shrink = NNEG_NUM;\nflex-basis = FLEX_BASIS;\nflex = none | [ [ NNEG_NUM NNEG_NUM? ] || FLEX_BASIS ];\njustify-content = flex-start | flex-end | center | space-between | space-around;\nalign-items = flex-start | flex-end | center | baseline | stretch;\nalign-self = auto | flex-start | flex-end | center | baseline | stretch;\nalign-content = flex-start | flex-end | center | space-between | space-around | stretch;\n\n/* Pointer Events */\n[ms]touch-action = auto | none | [ pan-x || pan-y ] | manipulation;\n\n/* SVG 2 */\nOPACITY_VALUE = NUM | PERCENTAGE;\nDASH_ARRAY = COMMA( SPACE( [ LENGTH | PERCENTAGE | NUM ]+ )+ );\nPAINT = none | child | child(INT) | COLOR | SPACE( URI [none | COLOR]? ) | context-fill | context-stroke;\ncolor-interpolation = auto | sRGB | linearRGB;\ncolor-rendering = auto | optimizeSpeed | optimizeQuality;\nfill = PAINT;\nfill-opacity = OPACITY_VALUE;\nfill-rule = nonzero | evenodd;\nglyph-orientation-vertical = auto | NUM | ANGLE;\nimage-rendering = auto | optimizeSpeed | optimizeQuality | crisp-edges | pixelated;\nmarker-start = none | URI;\nmarker-mid = none | URI;\nmarker-end = none | URI;\npointer-events = bounding-box | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | none;\npaint-order = normal | [ fill || stroke || markers ];\nshape-rendering = auto | optimizeSpeed | crispEdges | geometricPrecision;\nstop-color = COLOR;\nstop-opacity = OPACITY_VALUE;\nstroke = PAINT;\nstroke-dasharray = none | DASH_ARRAY;\nstroke-dashoffset = PERCENTAGE | LENGTH_OR_NUM;\nstroke-linecap = butt | round | square;\nstroke-linejoin = miter | round | bevel;\nstroke-miterlimit = NUM;\nstroke-opacity = OPACITY_VALUE;\nstroke-width = PERCENTAGE | LENGTH_OR_NUM;\ntext-anchor = start | middle | end;\ntext-rendering = auto | optimizeSpeed | optimizeLegibility | geometricPrecision;\nvector-effect = none | SPACE( [ non-scaling-stroke | non-scaling-size | non-rotation | fixed-position ]+ [ viewport | screen ]? );\n\n/* SVG 1.1 */\nalignment-baseline = auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical;\nbaseline-shift = baseline | sub | super | PERCENTAGE | LENGTH_OR_NUM;\ndominant-baseline = auto | use-script | no-change | reset-size | ideographic | alphabetic | hanging | mathematical | central | middle | text-after-edge | text-before-edge;\nmask = none | URI;\n\n/* css-masking-1 */\nSHAPE_RADIUS = PLENGTH | closest-side | farthest-side;\nFILL_RULE = nonzero | evenodd;\nSHAPE_BOX = BOX | margin-box;\nGEOMETRY_BOX = SHAPE_BOX | fill-box | stroke-box | view-box;\nBASIC_SHAPE =\n    inset( SPACE( PLENGTH{1,4} [ round PLENGTH{1,4} [ SLASH PLENGTH{1,4} ]? ]? ) )\n  | circle(  SPACE( [SHAPE_RADIUS]?    [at BG_POSITION_TERM{1,4}]? ) )\n  | ellipse( SPACE( SHAPE_RADIUS{2}? [at BG_POSITION_TERM{1,4}]? ) )\n  | polygon( FILL_RULE? COMMA( SPACE( PLENGTH{2} )+ )+ );\n[webkit]clip-path = none | URI | [ BASIC_SHAPE || GEOMETRY_BOX ];\nclip-rule = nonzero | evenodd;\n\n/* filters */\nflood-color = COLOR;\nflood-opacity = OPACITY_VALUE;\nlighting-color = COLOR;\n\n/* compositing-1 */\nBLEND_MODE = normal | multiply | screen | overlay | darken | lighten | color-dodge | color-burn | hard-light | soft-light | difference | exclusion | hue | saturation | color | luminosity;\nmix-blend-mode = BLEND_MODE;\nisolation = auto | isolate;\nbackground-blend-mode = COMMA( BLEND_MODE+ );\n\n/* CSS GCPM */\nfootnote-policy = auto | line;\n\n[viv]repeat-on-break = auto | none | header | footer;\n\nDEFAULTS\n\nbackground-attachment: scroll;\nbackground-color: transparent;\nbackground-image: none;\nbackground-repeat: repeat;\nbackground-position: 0% 0%;\nbackground-clip: border-box;\nbackground-origin: padding-box;\nbackground-size: auto;\nborder-top-color: currentColor;\nborder-right-color: currentColor;\nborder-bottom-color: currentColor;\nborder-left-color: currentColor;\nborder-top-style: none;\nborder-right-style: none;\nborder-bottom-style: none;\nborder-left-style: none;\nborder-top-width: 3px;\nborder-right-width: 3px;\nborder-bottom-width: 3px;\nborder-left-width: 3px;\nborder-top-left-radius: 0;\nborder-top-right-radius: 0;\nborder-bottom-right-radius: 0;\nborder-bottom-left-radius: 0;\nborder-image-source: none;\nborder-image-slice: 100%;\nborder-image-width: 1;\nborder-image-outset: 0;\nborder-image-repeat: stretch;\ncolumn-count: auto;\ncolumn-gap: normal;\ncolumn-width: auto;\ncolumn-rule-color: currentColor;\ncolumn-rule-style: none;\ncolumn-rule-width: 3px;\ncolumn-fill: balance;\noutline-color: currentColor;\noutline-style: none;\noutline-width: 3px;\nflex-direction: row;\nflex-wrap: nowrap;\nfont-family: serif;\nfont-style: normal;\nfont-size: medium;\nfont-variant: normal;\nfont-weight: normal;\nfont-stretch: normal;\nline-height: normal;\nlist-style-image: none;\nlist-style-position: outside;\nlist-style-type: disc;\nmargin-bottom: auto;\nmargin-left: auto;\nmargin-right: auto;\nmargin-top: auto;\npadding-bottom: auto;\npadding-left: auto;\npadding-right: auto;\npadding-top: auto;\ntext-emphasis-color: currentColor;\ntext-emphasis-style: none;\nmarker-start: none;\nmarker-mid: none;\nmarker-end: none;\n\n/* css-logical */\nborder-block-start-color: currentColor;\nborder-block-end-color: currentColor;\nborder-inline-start-color: currentColor;\nborder-inline-end-color: currentColor;\nborder-block-start-style: none;\nborder-block-end-style: none;\nborder-inline-start-style: none;\nborder-inline-end-style: none;\nborder-block-start-width: 3px;\nborder-block-end-width: 3px;\nborder-inline-start-width: 3px;\nborder-inline-end-width: 3px;\n\nSHORTHANDS\n\nbackground = COMMA background-image [background-position [ / background-size ]] background-repeat\n     background-attachment [background-origin background-clip] background-color; /* background-color is a special case, see the code */\nborder-top = border-top-width border-top-style border-top-color;\nborder-right = border-right-width border-right-style border-right-color;\nborder-bottom = border-bottom-width border-bottom-style border-bottom-color;\nborder-left = border-left-width border-left-style border-left-color;\nborder-width = INSETS border-top-width border-right-width border-bottom-width border-left-width;\nborder-style = INSETS border-top-style border-right-style border-bottom-style border-left-style;\nborder-color = INSETS border-top-color border-right-color border-bottom-color border-left-color;\nborder = border-width border-style border-color;\nborder-image = border-image-source border-image-slice [ / border-image-width [ / border-image-outset ] ]\n     border-image-repeat;\nborder-radius = INSETS_SLASH border-top-left-radius border-top-right-radius\n     border-bottom-right-radius border-bottom-left-radius;\n[moz,webkit]columns = column-width column-count;\n[moz,webkit]column-rule = column-rule-width column-rule-style column-rule-color;\nflex-flow = flex-direction flex-wrap;\noeb-column-number = column-count;\noutline = outline-width outline-style outline-color;\nlist-style = list-style-type list-style-position list-style-image;\nmargin = INSETS margin-top margin-right margin-bottom margin-left;\npadding = INSETS padding-top padding-right padding-bottom padding-left;\npause = INSETS pause-before pause-after;\nfont = FONT font-style font-variant font-weight font-stretch /* font-size line-height font-family are special-cased */;\n[epub,webkit]text-emphasis = text-emphasis-style text-emphasis-color;\nmarker = INSETS marker-start marker-mid marker-end;\n\n/* css-logical */\nmargin-block = INSETS margin-block-start margin-block-end;\nmargin-inline = INSETS margin-inline-start margin-inline-end;\npadding-block = INSETS padding-block-start padding-block-end;\npadding-inline = INSETS padding-inline-start padding-inline-end;\nborder-block-width = INSETS border-block-start-width border-block-end-width;\nborder-block-style = INSETS border-block-start-style border-block-end-style;\nborder-block-color = INSETS border-block-start-color border-block-end-color;\nborder-inline-width = INSETS border-inline-start-width border-inline-end-width;\nborder-inline-style = INSETS border-inline-start-style border-inline-end-style;\nborder-inline-color = INSETS border-inline-start-color border-inline-end-color;\nborder-block = border-block-width border-block-style border-block-color;\nborder-inline = border-inline-width border-inline-style border-inline-color;\nborder-block-start = border-block-start-width border-block-start-style border-block-start-color;\nborder-block-end = border-block-end-width border-block-end-style border-block-end-color;\nborder-inline-start = border-inline-start-width border-inline-start-style border-inline-start-color;\nborder-inline-end = border-inline-end-width border-inline-end-style border-inline-end-color;\ninset-block-start = block-start;\ninset-block-end = block-end;\ninset-inline-start = inline-start;\ninset-inline-end = inline-end;\ninset-block = INSETS block-start block-end;\ninset-inline = INSETS inline-start inline-end;\n\n/* old names  */\n[adapt,webkit]margin-before = margin-block-start;\n[adapt,webkit]margin-after = margin-block-end;\n[adapt,webkit]margin-start = margin-inline-start;\n[adapt,webkit]margin-end = margin-inline-end;\n[adapt,webkit]padding-before = padding-block-start;\n[adapt,webkit]padding-after = padding-block-end;\n[adapt,webkit]padding-start = padding-inline-start;\n[adapt,webkit]padding-end = padding-inline-end;\n[adapt,webkit]border-before-color = border-block-start-color;\n[adapt,webkit]border-after-color = border-block-end-color;\n[adapt,webkit]border-start-color = border-inline-start-color;\n[adapt,webkit]border-end-color = border-inline-end-color;\n[adapt,webkit]border-before-style = border-block-start-style;\n[adapt,webkit]border-after-style = border-block-end-style;\n[adapt,webkit]border-start-style = border-inline-start-style;\n[adapt,webkit]border-end-style = border-inline-end-style;\n[adapt,webkit]border-before-width = border-block-start-width;\n[adapt,webkit]border-after-width = border-block-end-width;\n[adapt,webkit]border-start-width = border-inline-start-width;\n[adapt,webkit]border-end-width = border-inline-end-width;\n[adapt,webkit]before = block-start;\n[adapt,webkit]after = block-end;\n[adapt,webkit]start = inline-start;\n[adapt,webkit]end = inline-end;\n";class kh{constructor(e){this.validator=e,this.success=null,this.failure=null,this.code=0}isSpecial(){return 0!=this.code}markAsStartGroup(){this.code=-1}isStartGroup(){return-1==this.code}markAsEndGroup(){this.code=-2}isEndGroup(){return-2==this.code}markAsStartAlternate(e){this.code=2*e+1}isStartAlternate(){return this.code>0&&this.code%2!=0}markAsEndAlternate(e){this.code=2*e+2}isEndAlternate(){return this.code>0&&this.code%2==0}getAlternate(){return Math.floor((this.code-1)/2)}}class Fh{constructor(e,t){this.where=e,this.success=t,this.what=-1}}!function(e){e[e.FOLLOW=1]="FOLLOW",e[e.OPTIONAL=2]="OPTIONAL",e[e.REPEATED=3]="REPEATED",e[e.ALTERNATE=4]="ALTERNATE"}(Rh||(Rh={}));class Dh{constructor(){this.nodes=[],this.connections=[],this.match=[],this.nomatch=[],this.error=[],this.emptyHead=!0}connect(e,t){for(let n=0;n<e.length;n++)this.connections[e[n]].what=t;e.splice(0,e.length)}clone(){const e=new Dh;for(let t=0;t<this.nodes.length;t++){const n=this.nodes[t],i=new kh(n.validator);i.code=n.code,e.nodes.push(i)}for(let t=0;t<this.connections.length;t++){const n=this.connections[t],i=new Fh(n.where,n.success);i.what=n.what,e.connections.push(i)}return e.match.push(...this.match),e.nomatch.push(...this.nomatch),e.error.push(...this.error),e}addSpecialToArr(e,t,n){const i=this.nodes.length,o=new kh(Zh);n>=0?t?o.markAsStartAlternate(n):o.markAsEndAlternate(n):t?o.markAsStartGroup():o.markAsEndGroup(),this.nodes.push(o),this.connect(e,i);const s=new Fh(i,!0),r=new Fh(i,!1);e.push(this.connections.length),this.connections.push(r),e.push(this.connections.length),this.connections.push(s)}endSpecialGroup(){const e=[this.match,this.nomatch,this.error];for(let t=0;t<e.length;t++)this.addSpecialToArr(e[t],!1,-1)}startSpecialGroup(){if(this.nodes.length)throw new Error("invalid call");this.addSpecialToArr(this.match,!0,-1)}endClause(e){this.addSpecialToArr(this.match,!1,e)}startClause(e){if(this.nodes.length)throw new Error("invalid call");const t=new kh(Zh);t.markAsStartAlternate(e),this.nodes.push(t);const n=new Fh(0,!0),i=new Fh(0,!1);this.nomatch.push(this.connections.length),this.connections.push(i),this.match.push(this.connections.length),this.connections.push(n)}addPrimitive(e){const t=this.nodes.length;this.nodes.push(new kh(e));const n=new Fh(t,!0),i=new Fh(t,!1);this.connect(this.match,t),this.emptyHead?(this.nomatch.push(this.connections.length),this.emptyHead=!1):this.error.push(this.connections.length),this.connections.push(i),this.match.push(this.connections.length),this.connections.push(n)}isSimple(){return 1==this.nodes.length&&!this.nodes[0].isSpecial()}isPrimitive(){return this.isSimple()&&this.nodes[0].validator instanceof Yh}addGroup(e,t){if(0==e.nodes.length)return;const n=this.nodes.length;if(t==Rh.ALTERNATE&&1==n&&e.isPrimitive()&&this.isPrimitive())return void(this.nodes[0].validator=this.nodes[0].validator.combine(e.nodes[0].validator));for(let t=0;t<e.nodes.length;t++)this.nodes.push(e.nodes[t]);t==Rh.ALTERNATE?(this.emptyHead=!0,this.connect(this.nomatch,n)):this.connect(this.match,n);const i=this.connections.length;for(let t=0;t<e.connections.length;t++){const i=e.connections[t];i.where+=n,i.what>=0&&(i.what+=n),this.connections.push(i)}for(let t=0;t<e.match.length;t++)this.match.push(e.match[t]+i);if(t==Rh.REPEATED&&this.connect(this.match,n),t==Rh.OPTIONAL||t==Rh.REPEATED)for(let t=0;t<e.nomatch.length;t++)this.match.push(e.nomatch[t]+i);else if(this.emptyHead){for(let t=0;t<e.nomatch.length;t++)this.nomatch.push(e.nomatch[t]+i);this.emptyHead=e.emptyHead}else for(let t=0;t<e.nomatch.length;t++)this.error.push(e.nomatch[t]+i);for(let t=0;t<e.error.length;t++)this.error.push(e.error[t]+i);e.nodes=null,e.connections=null}finish(e,t){const n=this.nodes.length;this.nodes.push(e),this.nodes.push(t),this.connect(this.match,n),this.connect(this.nomatch,n+1),this.connect(this.error,n+1);for(const e of this.connections)e.success?this.nodes[e.where].success=this.nodes[e.what]:this.nodes[e.where].failure=this.nodes[e.what];for(let e=0;e<n;e++)if(null==this.nodes[e].failure||null==this.nodes[e].success)throw new Error("Invalid validator state");return this.nodes[0]}}const _h=1,Bh=2,Mh=4,Uh=8,zh=16,Vh=32,Hh=64,Gh=128,$h=256,Wh=512,Xh=1024,jh=2048;class Kh extends ft{constructor(){super()}validateForShorthand(e,t){const n=e[t].visit(this);return n?[n]:null}}class Yh extends Kh{constructor(e,t,n){super(),this.allowed=e,this.idents=t,this.units=n}visitEmpty(e){return this.allowed&_h?e:null}visitSlash(e){return this.allowed&jh?e:null}visitStr(e){return this.allowed&Bh?e:null}visitIdent(e){return this.idents[e.name.toLowerCase()]||(this.allowed&Mh?e:null)}visitNumeric(e){return 0!=e.num||this.allowed&Wh?e.num<0&&!(this.allowed&$h)?null:this.units[e.unit]?e:null:"%"==e.unit&&this.allowed&Xh?e:null}visitNum(e){return 0==e.num?this.allowed&Wh?e:null:e.num<=0&&!(this.allowed&$h)?null:this.allowed&zh?e:null}visitInt(e){if(0==e.num)return this.allowed&Wh?e:null;if(e.num<=0&&!(this.allowed&$h))return null;if(this.allowed&(Vh|zh))return e;return this.idents[`${e.num}`]||null}visitColor(e){return this.allowed&Hh?e:null}visitURL(e){return this.allowed&Gh?e:null}visitSpaceList(e){return null}visitCommaList(e){return null}visitFunc(e){return null}visitExpr(e){return 2046&this.allowed?e:null}combine(e){const t={},n={};for(const e in this.idents)t[e]=this.idents[e];for(const n in e.idents)t[n]=e.idents[n];for(const e in this.units)n[e]=this.units[e];for(const t in e.units)n[t]=e.units[t];return new Yh(this.allowed|e.allowed,t,n)}}const qh={},Zh=new Yh(0,qh,qh);class Qh extends Kh{constructor(e){super(),this.successTerminal=new kh(null),this.failureTerminal=new kh(null),this.first=e.finish(this.successTerminal,this.failureTerminal)}validateList(e,t,n){let i=t?[]:e,o=this.first,s=n,r=null,a=null;for(;o!==this.successTerminal&&o!==this.failureTerminal;){if(s>=e.length){o=o.failure;continue}const l=e[s];let h=l;if(o.isSpecial()){let e=!0;o.isStartGroup()?(r?r.push(a):r=[a],a=[]):o.isEndGroup()?a=r.length>0?r.pop():null:o.isEndAlternate()?a[o.getAlternate()]="taken":e=null==a[o.getAlternate()],o=e?o.success:o.failure}else{if(0==s&&!t&&o.validator instanceof Jh&&this instanceof Jh){if(h=new Rt(e).visit(o.validator),h){s=e.length,o=o.success;continue}}else if(0==s&&!t&&o.validator instanceof ec&&this instanceof Jh){if(h=new Lt(e).visit(o.validator),h){s=e.length,o=o.success;continue}}else h=l.visit(o.validator);if(!h){o=o.failure;continue}if(h!==l&&e===i){i=[];for(let t=0;t<s;t++)i[t]=e[t]}e!==i&&(i[s-n]=h),s++,o=o.success}}return o===this.successTerminal&&(t?i.length>0:s==e.length)?i:null}validateSingle(e){let t=null,n=this.first;for(;n!==this.successTerminal&&n!==this.failureTerminal;)e?n.isSpecial()?n=n.success:(t=e.visit(n.validator),t?(e=null,n=n.success):n=n.failure):n=n.failure;return n===this.successTerminal?t:null}visitEmpty(e){return this.validateSingle(e)}visitSlash(e){return this.validateSingle(e)}visitStr(e){return this.validateSingle(e)}visitIdent(e){return this.validateSingle(e)}visitNumeric(e){return this.validateSingle(e)}visitNum(e){return this.validateSingle(e)}visitInt(e){return this.validateSingle(e)}visitColor(e){return this.validateSingle(e)}visitURL(e){return this.validateSingle(e)}visitSpaceList(e){return null}visitCommaList(e){return null}visitFunc(e){return this.validateSingle(e)}visitExpr(e){return null}}class Jh extends Qh{constructor(e){super(e)}visitSpaceList(e){const t=this.validateList(e.values,!1,0);return t===e.values?e:t?new Rt(t):null}visitCommaList(e){let t=this.first,n=!1;for(;t;){if(t.validator instanceof ec){n=!0;break}t=t.failure}if(n){const t=this.validateList(e.values,!1,0);return t===e.values?e:t?new Lt(t):null}return null}validateForShorthand(e,t){return this.validateList(e,!0,t)}}class ec extends Qh{constructor(e){super(e)}visitSpaceList(e){return this.validateSingle(e)}visitCommaList(e){const t=this.validateList(e.values,!1,0);return t===e.values?e:t?new Lt(t):null}validateForShorthand(e,t){let n,i=this.first;for(;i!==this.failureTerminal;){if(n=i.validator.validateForShorthand(e,t),n)return n;i=i.failure}return null}}class tc extends Qh{constructor(e,t){super(t),this.name=e}validateSingle(e){return null}visitFunc(e){if(e.name.toLowerCase()!=this.name)return null;const t=this.validateList(e.values,!1,0);return t===e.values?e:t?new kt(e.name,t):null}}class nc{tryParse(e,t,n){return t}success(e,t){}}class ic extends nc{constructor(e,t){super(),this.name=t,this.validator=e.validators[this.name]}tryParse(e,t,n){if(n.values[this.name])return t;const i=this.validator.validateForShorthand(e,t);if(i){const e=i.length,o=e>1?new Rt(i):i[0];return this.success(o,n),t+e}return t}success(e,t){t.values[this.name]=e}}class oc extends ic{constructor(e,t){super(e,t[0]),this.names=t}success(e,t){for(let n=0;n<this.names.length;n++)t.values[this.names[n]]=e}}class sc extends nc{constructor(e,t){super(),this.nodes=e,this.slash=t}tryParse(e,t,n){const i=t;if(this.slash){if(e[t]!=yt)return i;if(++t==e.length)return i}let o=this.nodes[0].tryParse(e,t,n);if(o==t)return i;t=o;for(let i=1;i<this.nodes.length&&t<e.length&&(o=this.nodes[i].tryParse(e,t,n),o!=t);i++)t=o;return t}}class rc extends ft{constructor(){super(...arguments),this.syntax=null,this.propList=null,this.error=!1,this.values={},this.validatorSet=null}setOwner(e){this.validatorSet=e}syntaxNodeForProperty(e){return new ic(this.validatorSet,e)}clone(){const e=new this.constructor;return e.syntax=this.syntax,e.propList=this.propList,e.validatorSet=this.validatorSet,e}init(e,t){this.syntax=e,this.propList=t}finish(e,t){if(!this.error){for(const n of this.propList)t.simpleProperty(n,this.values[n]||this.validatorSet.defaultValues[n],e);return!0}return!1}propagateInherit(e,t){for(const n of this.propList)t.simpleProperty(n,Bt.inherit,e)}validateList(e){return this.error=!0,0}validateSingle(e){return this.validateList([e]),null}visitEmpty(e){return this.validateSingle(e)}visitStr(e){return this.validateSingle(e)}visitIdent(e){return this.validateSingle(e)}visitNumeric(e){return this.validateSingle(e)}visitNum(e){return this.validateSingle(e)}visitInt(e){return this.validateSingle(e)}visitColor(e){return this.validateSingle(e)}visitURL(e){return this.validateSingle(e)}visitSpaceList(e){return this.validateList(e.values),null}visitCommaList(e){return this.error=!0,null}visitFunc(e){return this.validateSingle(e)}visitExpr(e){return this.error=!0,null}}class ac extends rc{constructor(){super()}validateList(e){let t=0,n=0;for(;t<e.length;){const i=this.syntax[n].tryParse(e,t,this);if(i>t)t=i,n=0;else if(++n==this.syntax.length){this.error=!0;break}}return t}}class lc extends rc{constructor(){super()}validateList(e){if(e.length>this.syntax.length||0==e.length)return this.error=!0,0;for(let t=0;t<this.syntax.length;t++){let n=t;for(;n>=e.length;)n=1==n?0:n-2;if(this.syntax[t].tryParse(e,n,this)!=n+1)return this.error=!0,0}return e.length}createSyntaxNode(){return new oc(this.validatorSet,this.propList)}}const hc={SIMPLE:ac,INSETS:lc,INSETS_SLASH:class extends rc{constructor(){super()}validateList(e){let t=e.length;for(let n=0;n<e.length;n++)if(e[n]===yt){t=n;break}if(t>this.syntax.length||0==e.length)return this.error=!0,0;for(let n=0;n<this.syntax.length;n++){let i,o=n;for(;o>=t;)o=1==o?0:o-2;if(t+1<e.length)for(i=t+n+1;i>=e.length;)i-=i==t+2?1:2;else i=o;const s=[e[o],e[i]];if(2!=this.syntax[n].tryParse(s,0,this))return this.error=!0,0}return e.length}},COMMA:class extends ac{constructor(){super()}mergeIn(e,t){for(const n of this.propList){const i=t[n]||this.validatorSet.defaultValues[n];let o=e[n];o||(o=[],e[n]=o),o.push(i)}}visitCommaList(e){const t={};for(let n=0;n<e.values.length;n++)if(this.values={},e.values[n]instanceof Lt?this.error=!0:(e.values[n].visit(this),this.mergeIn(t,this.values),this.values["background-color"]&&n!=e.values.length-1&&(this.error=!0)),this.error)return null;this.values={};for(const e in t)this.values[e]="background-color"==e?t[e].pop():new Lt(t[e]);return null}},FONT:class extends ac{constructor(){super()}init(e,t){super.init(e,t),this.propList.push("font-family","line-height","font-size")}validateList(e){let t=super.validateList(e);if(t+2>e.length)return this.error=!0,t;this.error=!1;const n=this.validatorSet.validators;if(!e[t].visit(n["font-size"]))return this.error=!0,t;if(this.values["font-size"]=e[t++],e[t]===yt){if(t++,t+2>e.length)return this.error=!0,t;if(!e[t].visit(n["line-height"]))return this.error=!0,t;this.values["line-height"]=e[t++]}const i=t==e.length-1?e[t]:new Rt(e.slice(t,e.length));return i.visit(n["font-family"])?(this.values["font-family"]=i,e.length):(this.error=!0,t)}visitCommaList(e){if(e.values[0].visit(this),this.error)return null;const t=[this.values["font-family"]];for(let n=1;n<e.values.length;n++)t.push(e.values[n]);const n=new Lt(t);return n.visit(this.validatorSet.validators["font-family"])?this.values["font-family"]=n:this.error=!0,null}visitIdent(e){const t=this.validatorSet.systemFonts[e.name];if(t)for(const e in t)this.values[e]=t[e];else this.error=!0;return null}}};class cc{constructor(){this.validators={},this.prefixes={},this.defaultValues={},this.namedValidators={},this.systemFonts={},this.shorthands={},this.layoutProps={},this.backgroundProps={}}addReplacement(e,t){let n;if(t.type==On.NUMERIC)n=new Tt(t.num,t.text);else if(t.type==On.HASH)n=Gi(t.text);else{if(t.type!=On.IDENT)throw new Error("unexpected replacement");n=Ct(t.text)}if(e.isPrimitive()){const t=e.nodes[0].validator.idents;for(const e in t)t[e]=n;return e}throw new Error("unexpected replacement")}newGroup(e,t){const n=new Dh;if("||"==e){for(let e=0;e<t.length;e++){const i=new Dh;i.startClause(e),i.addGroup(t[e],Rh.FOLLOW),i.endClause(e),n.addGroup(i,0==e?Rh.FOLLOW:Rh.ALTERNATE)}const e=new Dh;return e.startSpecialGroup(),e.addGroup(n,Rh.REPEATED),e.endSpecialGroup(),e}{let i;switch(e){case" ":i=Rh.FOLLOW;break;case"|":case"||":i=Rh.ALTERNATE;break;default:throw new Error("unexpected op")}for(let e=0;e<t.length;e++)n.addGroup(t[e],0==e?Rh.FOLLOW:i);return n}}addCounts(e,t,n){const i=new Dh;for(let n=0;n<t;n++)i.addGroup(e.clone(),Rh.FOLLOW);if(n==Number.POSITIVE_INFINITY)i.addGroup(e,Rh.REPEATED);else for(let o=t;o<n;o++)i.addGroup(e.clone(),Rh.OPTIONAL);return i}primitive(e){const t=new Dh;return t.addPrimitive(e),t}newFunc(e,t){let n;switch(e){case"COMMA":n=new ec(t);break;case"SPACE":n=new Jh(t);break;default:n=new tc(e.toLowerCase(),t)}return this.primitive(n)}initBuiltInValidators(){this.namedValidators.HASHCOLOR=this.primitive(new Yh(Hh,qh,qh)),this.namedValidators.POS_INT=this.primitive(new Yh(Vh,qh,qh)),this.namedValidators.POS_NUM=this.primitive(new Yh(zh,qh,qh)),this.namedValidators.POS_PERCENTAGE=this.primitive(new Yh(Uh,qh,{"%":wt})),this.namedValidators.NEGATIVE=this.primitive(new Yh($h,qh,qh)),this.namedValidators.ZERO=this.primitive(new Yh(Wh,qh,qh)),this.namedValidators.ZERO_PERCENTAGE=this.primitive(new Yh(Xh,qh,qh)),this.namedValidators.POS_LENGTH=this.primitive(new Yh(Uh,qh,{em:wt,ex:wt,ch:wt,rem:wt,vw:wt,vh:wt,vi:wt,vb:wt,vmin:wt,vmax:wt,pvw:wt,pvh:wt,pvi:wt,pvb:wt,pvmin:wt,pvmax:wt,cm:wt,mm:wt,in:wt,px:wt,pt:wt,pc:wt,q:wt})),this.namedValidators.POS_ANGLE=this.primitive(new Yh(Uh,qh,{deg:wt,grad:wt,rad:wt,turn:wt})),this.namedValidators.POS_TIME=this.primitive(new Yh(Uh,qh,{s:wt,ms:wt})),this.namedValidators.FREQUENCY=this.primitive(new Yh(Uh,qh,{Hz:wt,kHz:wt})),this.namedValidators.RESOLUTION=this.primitive(new Yh(Uh,qh,{dpi:wt,dpcm:wt,dppx:wt})),this.namedValidators.URI=this.primitive(new Yh(Gh,qh,qh)),this.namedValidators.IDENT=this.primitive(new Yh(Mh,qh,qh)),this.namedValidators.STRING=this.primitive(new Yh(Bh,qh,qh)),this.namedValidators.SLASH=this.primitive(new Yh(jh,qh,qh));const e={"font-family":Ct("sans-serif")};this.systemFonts.caption=e,this.systemFonts.icon=e,this.systemFonts.menu=e,this.systemFonts["message-box"]=e,this.systemFonts["small-caption"]=e,this.systemFonts["status-bar"]=e}isBuiltIn(e){return!!e.match(/^[A-Z_0-9]+$/)}readNameAndPrefixes(e,t){let n=e.token();if(n.type==On.EOF)return null;const i={"":!0};if(n.type==On.O_BRK){do{if(e.consume(),n=e.token(),n.type!=On.IDENT)throw new Error("Prefix name expected");i[n.text]=!0,e.consume(),n=e.token()}while(n.type==On.COMMA);if(n.type!=On.C_BRK)throw new Error("']' expected");e.consume(),n=e.token()}if(n.type!=On.IDENT)throw new Error("Property name expected");if(2==t?"SHORTHANDS"==n.text:"DEFAULTS"==n.text)return e.consume(),null;const o=n.text;if(e.consume(),2!=t){if(e.token().type!=On.EQ)throw new Error("'=' expected");this.isBuiltIn(o)||(this.prefixes[o]=i)}else if(e.token().type!=On.COLON)throw new Error("':' expected");return o}parseValidators(e){for(;;){const t=this.readNameAndPrefixes(e,1);if(!t)return;let n=[];const i=[];let o,s="",r=!0;const a=this,l=()=>{if(0==n.length)throw new Error("No values");return 1==n.length?n[0]:a.newGroup(s,n)},h=e=>{if(r)throw new Error(`'${e}': unexpected`);if(s&&s!=e)throw new Error(`mixed operators: '${e}' and '${s}'`);s=e,r=!0};let c=null;for(;!c;){e.consume();let t=e.token();switch(t.type){case On.IDENT:if(r||h(" "),this.isBuiltIn(t.text)){const e=this.namedValidators[t.text];if(!e)throw new Error(`'${t.text}' unexpected`);n.push(e.clone())}else{const e={};e[t.text.toLowerCase()]=Ct(t.text),n.push(this.primitive(new Yh(0,e,qh)))}r=!1;break;case On.INT:{const e={};e[`${t.num}`]=new It(t.num),n.push(this.primitive(new Yh(0,e,qh))),r=!1;break}case On.BAR:h("|");break;case On.BAR_BAR:h("||");break;case On.O_BRK:r||h(" "),i.push({vals:n,op:s,b:"["}),s="",n=[],r=!0;break;case On.FUNC:r||h(" "),i.push({vals:n,op:s,b:"(",fn:t.text}),s="",n=[],r=!0;break;case On.C_BRK:{o=l();const e=i.pop();if("["!=e.b)throw new Error("']' unexpected");n=e.vals,n.push(o),s=e.op,r=!1;break}case On.C_PAR:{o=l();const e=i.pop();if("("!=e.b)throw new Error("')' unexpected");n=e.vals,n.push(this.newFunc(e.fn,o)),s=e.op,r=!1;break}case On.COLON:if(r)throw new Error("':' unexpected");e.consume(),n.push(this.addReplacement(n.pop(),e.token()));break;case On.QMARK:if(r)throw new Error("'?' unexpected");n.push(this.addCounts(n.pop(),0,1));break;case On.STAR:if(r)throw new Error("'*' unexpected");n.push(this.addCounts(n.pop(),0,Number.POSITIVE_INFINITY));break;case On.PLUS:if(r)throw new Error("'+' unexpected");n.push(this.addCounts(n.pop(),1,Number.POSITIVE_INFINITY));break;case On.O_BRC:{if(e.consume(),t=e.token(),t.type!=On.INT)throw new Error("<int> expected");const i=t.num;let o=i;if(e.consume(),t=e.token(),t.type==On.COMMA){if(e.consume(),t=e.token(),t.type!=On.INT)throw new Error("<int> expected");o=t.num,e.consume(),t=e.token()}if(t.type!=On.C_BRC)throw new Error("'}' expected");n.push(this.addCounts(n.pop(),i,o));break}case On.SEMICOL:if(c=l(),i.length>0)throw new Error(`unclosed '${i.pop().b}'`);break;default:throw new Error("unexpected token")}}e.consume(),this.isBuiltIn(t)?this.namedValidators[t]=c:c.isSimple()?this.validators[t]=c.nodes[0].validator:this.validators[t]=new Jh(c)}}parseDefaults(e){for(;;){const t=this.readNameAndPrefixes(e,2);if(!t)return;const n=[];for(;;){e.consume();const t=e.token();if(t.type==On.SEMICOL){e.consume();break}switch(t.type){case On.IDENT:n.push(Ct(t.text));break;case On.NUM:n.push(new xt(t.num));break;case On.INT:n.push(new It(t.num));break;case On.NUMERIC:n.push(new Tt(t.num,t.text));break;default:throw new Error("unexpected token")}}this.defaultValues[t]=n.length>1?new Rt(n):n[0]}}parseShorthands(e){for(;;){const t=this.readNameAndPrefixes(e,3);if(!t)return;let n,i=e.nthToken(1);i.type==On.IDENT&&hc[i.text]?(n=new hc[i.text],e.consume()):n=new ac,n.setOwner(this);let o=!1,s=[],r=!1;const a=[],l=[];for(;!o;)switch(e.consume(),i=e.token(),i.type){case On.IDENT:if(this.validators[i.text])s.push(n.syntaxNodeForProperty(i.text)),l.push(i.text);else{if(!(this.shorthands[i.text]instanceof lc))throw new Error(`'${i.text}' is neither a simple property nor an inset shorthand`);{const e=this.shorthands[i.text];s.push(e.createSyntaxNode()),l.push(...e.propList)}}break;case On.SLASH:if(s.length>0||r)throw new Error("unexpected slash");r=!0;break;case On.O_BRK:a.push({slash:r,syntax:s}),s=[],r=!1;break;case On.C_BRK:{const e=new sc(s,r),t=a.pop();s=t.syntax,r=t.slash,s.push(e);break}case On.SEMICOL:o=!0,e.consume();break;default:throw new Error("unexpected token")}n.init(s,l),this.shorthands[t]=n}}parse(e){const t=new hi(e,null);this.parseValidators(t),this.parseDefaults(t),this.parseShorthands(t),this.backgroundProps=this.makePropSet(["background"]),this.layoutProps=this.makePropSet(["margin","border","padding","columns","column-gap","column-rule","column-fill"])}makePropSet(e){const t={};for(const n of e){const e=this.shorthands[n],i=e?e.propList:[n];for(const e of i){const n=this.defaultValues[e];n?t[e]=n:h.warn("Unknown property in makePropSet:",e)}}return t}validatePropertyAndHandleShorthand(e,t,n,i){let o="";const s=e,r=(e=e.toLowerCase()).match(/^-([a-z]+)-([-a-z0-9]+)$/);r&&(o=r[1],e=r[2]);const a=this.prefixes[e];if(!a||!a[o])return void i.unknownProperty(s,t);const l=this.validators[e];if(l){const o=t===Bt.inherit||t.isExpr()?t:t.visit(l);o?i.simpleProperty(e,o,n):i.invalidPropertyValue(s,t)}else{const o=this.shorthands[e].clone();t===Bt.inherit?o.propagateInherit(n,i):(t.visit(o),o.finish(n,i)||i.invalidPropertyValue(s,t))}}}function uc(){const e=new cc;return e.initBuiltInValidators(),e.parse(Lh),e}const dc={"font-style":Bt.normal,"font-variant":Bt.normal,"font-weight":Bt.normal},pc=`OTTO${(new Date).valueOf()}`;let fc=1;function gc(e,t){const n={};for(const i in e)n[i]=$o(e,i).evaluate(t,i);return function(e){for(const t in dc)e[t]||(e[t]=dc[t])}(n),n}class mc{constructor(e){this.properties=e,this.blobURLs=[],this.blobs=[],this.fontTraitKey=function(e){const t=new H;for(const n in dc)t.append(" "),t.append(e[n].toString());return t.toString()}(this.properties),this.src=this.properties.src?this.properties.src.toString():null;const t=this.properties["font-family"];this.family=t?t.stringValue():null}traitsEqual(e){return this.fontTraitKey==e.fontTraitKey}makeAtRule(e,t){const n=new H;n.append("@font-face {\n  font-family: "),n.append(this.family),n.append(";\n  ");for(const e in dc)n.append(e),n.append(": "),this.properties[e].appendTo(n,!0),n.append(";\n  ");if(t){n.append('src: url("');const e=function(e){return(window.URL||window.webkitURL).createObjectURL(e)}(t);n.append(e),this.blobURLs.push(e),this.blobs.push(t),n.append('")')}else n.append("src: "),n.append(e);return n.append(";\n}\n"),n.toString()}}class bc{constructor(e){this.deobfuscator=e,this.familyMap={}}registerFamily(e,t){const n=e.family,i=this.familyMap[n],o=t.family;if(i){if(i!=o)throw new Error(`E_FONT_FAMILY_INCONSISTENT ${e.family}`)}else this.familyMap[n]=o}filterFontFamily(e){if(e instanceof Lt){const t=e.values,n=[];for(const e of t){const t=this.familyMap[e.stringValue()];t&&n.push(Ct(t)),n.push(e)}return new Lt(n)}{const t=this.familyMap[e.stringValue()];return t?new Lt([Ct(t),e]):e}}}class wc{constructor(e,t,n){this.head=e,this.body=t,this.srcURLMap={},this.familyCounter=0,this.familyPrefix=n||"Fnt_"}getViewFontFamily(e,t){const n=e.family;let i=t.familyMap[n];return i||(i=this.familyPrefix+ ++this.familyCounter,t.familyMap[n]=i,i)}initFont(e,t,n){const i=pi("initFont"),o=this,s=e.src,r={};for(const t in dc)r[t]=e.properties[t];const a=o.getViewFontFamily(e,n);r["font-family"]=Ct(a);const l=new mc(r),c=o.body.ownerDocument.createElement("span");c.textContent="M";const u=(new Date).valueOf()+1e3,d=o.head.ownerDocument.createElement("style"),p=pc+fc++;d.textContent=l.makeAtRule("",Li([p])),o.head.appendChild(d),o.body.appendChild(c),c.style.visibility="hidden",c.style.fontFamily=a;for(const e in dc)U(c,e,r[e].toString());const f=c.getBoundingClientRect(),g=f.right-f.left,m=f.bottom-f.top;d.textContent=l.makeAtRule(s,t),h.info("Starting to load font:",s);let b=!1;return i.loop(()=>{const e=c.getBoundingClientRect(),t=e.right-e.left,n=e.bottom-e.top;return g!=t||m!=n?(b=!0,fi(!1)):(new Date).valueOf()>u?fi(!1):i.sleep(10)}).then(()=>{b?h.info("Loaded font:",s):h.warn("Failed to load font:",s),o.body.removeChild(c),i.finish(l)}),i.result()}loadFont(e,t){const n=e.src;let i=this.srcURLMap[n];const o=this;return i?i.piggyback(i=>{const o=i;o.traitsEqual(e)?(t.registerFamily(e,o),h.warn("Found already-loaded font:",n)):h.warn("E_FONT_FACE_INCOMPATIBLE",e.src)}):(i=new xi(()=>{const i=pi("loadFont"),s=t.deobfuscator?t.deobfuscator(n):null;return s?Ri(n,Ai.BLOB).then(n=>{n.responseBlob?s(n.responseBlob).then(n=>{o.initFont(e,n,t).thenFinish(i)}):i.finish(null)}):o.initFont(e,null,t).thenFinish(i),i.result()},`loadFont ${n}`),this.srcURLMap[n]=i,i.start()),i}findOrLoadFonts(e,t){const n=[];for(const i of e)i.src&&i.family?n.push(this.loadFont(i,t)):h.warn("E_FONT_FACE_INVALID");return Ii(n)}}let Ec=1;class yc{constructor(e,t,n,i,o){this.name=t,this.pseudoName=n,this.classes=i,this.parent=o,this.specified={},this.children=[],this.pageMaster=null,this.index=0,this._scope=e,this.key=`p${Ec++}`,o&&(this.index=o.children.length,o.children.push(this))}get scope(){return this._scope}createInstance(e){throw new Error("E_UNEXPECTED_CALL")}clone(e){throw new Error("E_UNEXPECTED_CALL")}copySpecified(e){const t=this.specified,n=e.specified;for(const e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e])}cloneChildren(e){for(let t=0;t<this.children.length;t++)this.children[t].clone({parent:e})}}class Sc extends yc{constructor(e){super(e,null,null,[],null),this.specified.width=new _o(Ut,0),this.specified.height=new _o(zt,0)}}class Nc extends Te{constructor(e,t){super(e,(function(e,t){const i=e.match(/^([^.]+)\.([^.]+)$/);if(i){const e=n.pageMaster.keyMap[i[1]];if(e){const n=this.lookupInstance(e);if(n)return t?n.resolveFunc(i[2]):n.resolveName(i[2])}}return null})),this.pageMaster=t;const n=this}}class vc extends yc{constructor(e,t,n,i,o,s,r){super(e,t,n,i,o),this.condition=s,this.specificity=r,this.keyMap={},e instanceof Nc||(this._scope=new Nc(e,this)),this.pageMaster=this,this.specified.width=new _o(Ut,0),this.specified.height=new _o(zt,0),this.specified["wrap-flow"]=new _o(Bt.auto,0),this.specified.position=new _o(Bt.relative,0),this.specified.overflow=new _o(Bt.visible,0)}createInstance(e){return new Uc(e,this)}clone(e){const t=new vc(this.scope,this.name,e.pseudoName||this.pseudoName,this.classes,this.parent,this.condition,this.specificity);return this.copySpecified(t),this.cloneChildren(t),t}resetScope(){this.scope.pageMaster=this}}class Cc extends yc{constructor(e,t,n,i,o){super(e,t,n,i,o),this.pageMaster=o.pageMaster,t&&(this.pageMaster.keyMap[t]=this.key),this.specified["wrap-flow"]=new _o(Bt.auto,0)}createInstance(e){return new zc(e,this)}clone(e){const t=new Cc(e.parent.scope,this.name,this.pseudoName,this.classes,e.parent);return this.copySpecified(t),this.cloneChildren(t),t}}class Tc extends yc{constructor(e,t,n,i,o){super(e,t,n,i,o),this.pageMaster=o.pageMaster,t&&(this.pageMaster.keyMap[t]=this.key)}createInstance(e){return new Vc(e,this)}clone(e){const t=new Tc(e.parent.scope,this.name,this.pseudoName,this.classes,e.parent);return this.copySpecified(t),this.cloneChildren(t),t}}function xc(e,t,n){return t&&t!==Bt.auto?t.toExpr(e,n):null}function Ic(e,t,n){return t&&t!==Bt.auto?t.toExpr(e,n):e.zero}function Pc(e,t,n){return t?t===Bt.auto?null:t.toExpr(e,n):e.zero}function Ac(e,t,n,i){return t&&n!==Bt.none?t.toExpr(e,i):e.zero}function Oc(e,t,n){return t?t===Bt._true?e._true:t===Bt._false?e._false:t.toExpr(e,e.zero):n}class Rc{constructor(e,t){this.parentInstance=e,this.pageBox=t,this.cascaded={},this.style={},this.autoWidth=null,this.autoHeight=null,this.children=[],this.isAutoWidth=!1,this.isAutoHeight=!1,this.isTopDependentOnAutoHeight=!1,this.isRightDependentOnAutoWidth=!1,this.calculatedWidth=0,this.calculatedHeight=0,this.pageMasterInstance=null,this.namedValues={},this.namedFuncs={},this.vertical=!1,this.rtl=!1,this.suppressEmptyBoxGeneration=!1,e&&e.children.push(this)}reset(){this.calculatedWidth=0,this.calculatedHeight=0}addNamedValues(e,t){const n=this.resolveName(e),i=this.resolveName(t);if(!n||!i)throw new Error("E_INTERNAL");return ct(this.pageBox.scope,n,i)}resolveName(e){let t=this.namedValues[e];if(t)return t;const n=this.style[e];switch(n&&(t=n.toExpr(this.pageBox.scope,this.pageBox.scope.zero)),e){case"margin-left-edge":t=this.resolveName("left");break;case"margin-top-edge":t=this.resolveName("top");break;case"margin-right-edge":t=this.addNamedValues("border-right-edge","margin-right");break;case"margin-bottom-edge":t=this.addNamedValues("border-bottom-edge","margin-bottom");break;case"border-left-edge":t=this.addNamedValues("margin-left-edge","margin-left");break;case"border-top-edge":t=this.addNamedValues("margin-top-edge","margin-top");break;case"border-right-edge":t=this.addNamedValues("padding-right-edge","border-right-width");break;case"border-bottom-edge":t=this.addNamedValues("padding-bottom-edge","border-bottom-width");break;case"padding-left-edge":t=this.addNamedValues("border-left-edge","border-left-width");break;case"padding-top-edge":t=this.addNamedValues("border-top-edge","border-top-width");break;case"padding-right-edge":t=this.addNamedValues("right-edge","padding-right");break;case"padding-bottom-edge":t=this.addNamedValues("bottom-edge","padding-bottom");break;case"left-edge":t=this.addNamedValues("padding-left-edge","padding-left");break;case"top-edge":t=this.addNamedValues("padding-top-edge","padding-top");break;case"right-edge":t=this.addNamedValues("left-edge","width");break;case"bottom-edge":t=this.addNamedValues("top-edge","height")}if(!t){let n;if("extent"==e)n=this.vertical?"width":"height";else if("measure"==e)n=this.vertical?"height":"width";else{const t=this.vertical?Lo:ko;n=e;for(const e in t)n=n.replace(e,t[e])}n!=e&&(t=this.resolveName(n))}return t&&(this.namedValues[e]=t),t}resolveFunc(e){let t=this.namedFuncs[e];if(t)return t;switch(e){case"columns":{const e=this.pageBox.scope,n=new lt(e,0),i=this.resolveName("column-count"),o=this.resolveName("column-width"),s=this.resolveName("column-gap");t=ut(e,dt(e,new ot(e,"min",[n,i]),ct(e,o,s)),s);break}}return t&&(this.namedFuncs[e]=t),t}initEnabled(){const e=this.pageBox.scope,t=this.style;let n=Oc(e,t.enabled,e._true);const i=xc(e,t.page,e.zero);if(i){const t=new tt(e,"page-number");n=ht(e,n,new je(e,i,t))}const o=xc(e,t["min-page-width"],e.zero);o&&(n=ht(e,n,new Xe(e,new tt(e,"page-width"),o)));const s=xc(e,t["min-page-height"],e.zero);s&&(n=ht(e,n,new Xe(e,new tt(e,"page-height"),s))),n=this.boxSpecificEnabled(n),t.enabled=new Ft(n)}boxSpecificEnabled(e){return e}initHorizontal(){const e=this.pageBox.scope,t=this.style,n=this.parentInstance?this.parentInstance.style.width.toExpr(e,null):null;let i=xc(e,t.left,n),o=xc(e,t["margin-left"],n);const s=Ac(e,t["border-left-width"],t["border-left-style"],n),r=Ic(e,t["padding-left"],n);let a=xc(e,t.width,n),l=xc(e,t["max-width"],n);const h=Ic(e,t["padding-right"],n),c=Ac(e,t["border-right-width"],t["border-right-style"],n);let u=xc(e,t["margin-right"],n),d=xc(e,t.right,n);const p=ct(e,s,r),f=ct(e,s,h);if(i&&d&&a){let t=ut(e,n,ct(e,a,ct(e,ct(e,i,p),f)));o?u?d=ut(e,t,u):u=ut(e,t,ct(e,d,o)):(t=ut(e,t,d),u?o=ut(e,t,u):(o=dt(e,t,new rt(e,.5)),u=o))}else{o||(o=e.zero),u||(u=e.zero),i||d||a||(i=e.zero),i||a?i||d?a||d||(a=this.autoWidth,this.isAutoWidth=!0):i=e.zero:(a=this.autoWidth,this.isAutoWidth=!0);const s=ut(e,n,ct(e,ct(e,o,p),ct(e,u,f)));this.isAutoWidth&&(l||(l=ut(e,s,i||d)),this.vertical||!xc(e,t["column-width"],null)&&!xc(e,t["column-count"],null)||(a=l,this.isAutoWidth=!1)),i?a?d||(d=ut(e,s,ct(e,i,a))):a=ut(e,s,ct(e,i,d)):i=ut(e,s,ct(e,d,a))}const g=Ic(e,t["snap-width"]||(this.parentInstance?this.parentInstance.style["snap-width"]:null),n);t.left=new Ft(i),t["margin-left"]=new Ft(o),t["border-left-width"]=new Ft(s),t["padding-left"]=new Ft(r),t.width=new Ft(a),t["max-width"]=new Ft(l||a),t["padding-right"]=new Ft(h),t["border-right-width"]=new Ft(c),t["margin-right"]=new Ft(u),t.right=new Ft(d),t["snap-width"]=new Ft(g)}initVertical(){const e=this.pageBox.scope,t=this.style,n=this.parentInstance?this.parentInstance.style.width.toExpr(e,null):null,i=this.parentInstance?this.parentInstance.style.height.toExpr(e,null):null;let o=xc(e,t.top,i),s=xc(e,t["margin-top"],n);const r=Ac(e,t["border-top-width"],t["border-top-style"],n),a=Ic(e,t["padding-top"],n);let l=xc(e,t.height,i),h=xc(e,t["max-height"],i);const c=Ic(e,t["padding-bottom"],n),u=Ac(e,t["border-bottom-width"],t["border-bottom-style"],n);let d=xc(e,t["margin-bottom"],n),p=xc(e,t.bottom,i);const f=ct(e,r,a),g=ct(e,u,c);if(o&&p&&l){let t=ut(e,i,ct(e,l,ct(e,ct(e,o,f),g)));s?d?p=ut(e,t,s):d=ut(e,t,ct(e,p,s)):(t=ut(e,t,p),d?s=ut(e,t,d):(s=dt(e,t,new rt(e,.5)),d=s))}else{s||(s=e.zero),d||(d=e.zero),o||p||l||(o=e.zero),o||l?o||p?l||p||(l=this.autoHeight,this.isAutoHeight=!0):o=e.zero:(l=this.autoHeight,this.isAutoHeight=!0);const n=ut(e,i,ct(e,ct(e,s,f),ct(e,d,g)));this.isAutoHeight&&(h||(h=ut(e,n,o||p)),this.vertical&&(xc(e,t["column-width"],null)||xc(e,t["column-count"],null))&&(l=h,this.isAutoHeight=!1)),o?l?p||(p=ut(e,n,ct(e,o,l))):l=ut(e,n,ct(e,p,o)):o=ut(e,n,ct(e,p,l))}const m=Ic(e,t["snap-height"]||(this.parentInstance?this.parentInstance.style["snap-height"]:null),n);t.top=new Ft(o),t["margin-top"]=new Ft(s),t["border-top-width"]=new Ft(r),t["padding-top"]=new Ft(a),t.height=new Ft(l),t["max-height"]=new Ft(h||l),t["padding-bottom"]=new Ft(c),t["border-bottom-width"]=new Ft(u),t["margin-bottom"]=new Ft(d),t.bottom=new Ft(p),t["snap-height"]=new Ft(m)}initColumns(){const e=this.pageBox.scope,t=this.style,n=xc(e,t[this.vertical?"height":"width"],null);let i=xc(e,t["column-width"],n),o=xc(e,t["column-count"],null),s=function(e,t,n){return t&&t!==Bt.normal?t.toExpr(e,n):null}(e,t["column-gap"],null);s||(s=new et(e,1,"em")),i&&!o&&(o=new ot(e,"floor",[pt(e,ct(e,n,s),ct(e,i,s))]),o=new ot(e,"max",[e.one,o])),o||(o=e.one),i=ut(e,pt(e,ct(e,n,s),o),s),t["column-width"]=new Ft(i),t["column-count"]=new Ft(o),t["column-gap"]=new Ft(s)}depends(e,t,n){return this.style[e].toExpr(this.pageBox.scope,null).depend(t,n)}init(e){e.registerInstance(this.pageBox.key,this);const t=this.pageBox.scope,n=this.style,i=this,o=this.parentInstance?this.parentInstance.getActiveRegions(e):null,s=cr(this.cascaded,e,o,!1);this.vertical=lr(s,e,!!this.parentInstance&&this.parentInstance.vertical),this.rtl=hr(s,e,!!this.parentInstance&&this.parentInstance.rtl),pr(s,n,this.vertical,this.rtl,(e,t)=>t.value),this.autoWidth=new it(t,()=>i.calculatedWidth,"autoWidth"),this.autoHeight=new it(t,()=>i.calculatedHeight,"autoHeight"),this.initHorizontal(),this.initVertical(),this.initColumns(),this.initEnabled()}getProp(e,t){let n=this.style[t];return n&&(n=Eo(e,n,t)),n}getPropAsNumber(e,t){let n=this.style[t];return n&&(n=Eo(e,n,t)),Dt(n,e)}getSpecial(e,t){const n=Yo(this.cascaded,t);if(n){const t=[];for(let i=0;i<n.length;i++){const o=n[i].evaluate(e,"");o&&o!==wt&&t.push(o)}if(t.length)return t}return null}getActiveRegions(e){const t=this.getSpecial(e,"region-id");if(t){const e=[];for(let n=0;n<t.length;n++)e[n]=t[n].toString();return e}return null}propagateProperty(e,t,n,i){this.propagatePropertyToElement(e,t.element,n,i)}propagatePropertyToElement(e,t,n,i){let o=this.getProp(e,n);o&&(o.isNumeric()&&Pe(o.unit)&&(o=_t(o,e)),"font-family"===n&&(o=i.filterFontFamily(o)),U(t,n,o.toString()))}propagateDelayedProperty(e,t,n,i){const o=this.getProp(e,n);o&&i.push(new Xr(t.element,n,o))}assignLeftPosition(e,t){const n=this.getPropAsNumber(e,"left"),i=this.getPropAsNumber(e,"margin-left"),o=this.getPropAsNumber(e,"padding-left"),s=this.getPropAsNumber(e,"border-left-width"),r=this.getPropAsNumber(e,"width");t.setHorizontalPosition(n,r),U(t.element,"margin-left",`${i}px`),U(t.element,"padding-left",`${o}px`),U(t.element,"border-left-width",`${s}px`),t.marginLeft=i,t.borderLeft=s,t.paddingLeft=o}assignRightPosition(e,t){const n=this.getPropAsNumber(e,"right"),i=this.getPropAsNumber(e,"snap-height"),o=this.getPropAsNumber(e,"margin-right");let s=this.getPropAsNumber(e,"padding-right");const r=this.getPropAsNumber(e,"border-right-width");if(U(t.element,"margin-right",`${o}px`),U(t.element,"padding-right",`${s}px`),U(t.element,"border-right-width",`${r}px`),t.marginRight=o,t.borderRight=r,this.vertical&&i>0){const e=n+t.getInsetRight(),o=e-Math.floor(e/i)*i;o>0&&(t.snapOffsetX=i-o,s+=t.snapOffsetX)}t.paddingRight=s,t.snapWidth=i}assignTopPosition(e,t){const n=this.getPropAsNumber(e,"snap-height"),i=this.getPropAsNumber(e,"top"),o=this.getPropAsNumber(e,"margin-top");let s=this.getPropAsNumber(e,"padding-top");const r=this.getPropAsNumber(e,"border-top-width");if(t.top=i,t.marginTop=o,t.borderTop=r,t.snapHeight=n,!this.vertical&&n>0){const e=i+t.getInsetTop(),o=e-Math.floor(e/n)*n;o>0&&(t.snapOffsetY=n-o,s+=t.snapOffsetY)}t.paddingTop=s,U(t.element,"top",`${i}px`),U(t.element,"margin-top",`${o}px`),U(t.element,"padding-top",`${s}px`),U(t.element,"border-top-width",`${r}px`)}assignBottomPosition(e,t){const n=this.getPropAsNumber(e,"margin-bottom"),i=this.getPropAsNumber(e,"padding-bottom"),o=this.getPropAsNumber(e,"border-bottom-width"),s=this.getPropAsNumber(e,"height")-t.snapOffsetY;U(t.element,"height",`${s}px`),U(t.element,"margin-bottom",`${n}px`),U(t.element,"padding-bottom",`${i}px`),U(t.element,"border-bottom-width",`${o}px`),t.height=s-t.snapOffsetY,t.marginBottom=n,t.borderBottom=o,t.paddingBottom=i}assignBeforePosition(e,t){this.vertical?this.assignRightPosition(e,t):this.assignTopPosition(e,t)}assignAfterPosition(e,t){this.vertical?this.assignLeftPosition(e,t):this.assignBottomPosition(e,t)}assignStartEndPosition(e,t){this.vertical?(this.assignTopPosition(e,t),this.assignBottomPosition(e,t)):(this.assignRightPosition(e,t),this.assignLeftPosition(e,t))}sizeWithMaxHeight(e,t){U(t.element,"border-top-width","0px");let n=this.getPropAsNumber(e,"max-height");this.isTopDependentOnAutoHeight?t.setVerticalPosition(0,n):(this.assignTopPosition(e,t),n-=t.snapOffsetY,t.height=n,U(t.element,"height",`${n}px`))}sizeWithMaxWidth(e,t){U(t.element,"border-left-width","0px");let n=this.getPropAsNumber(e,"max-width");if(this.isRightDependentOnAutoWidth)t.setHorizontalPosition(0,n);else{this.assignRightPosition(e,t),n-=t.snapOffsetX,t.width=n;const i=this.getPropAsNumber(e,"right");U(t.element,"right",`${i}px`),U(t.element,"width",`${n}px`)}}prepareContainer(e,t,n,i,o){this.parentInstance&&this.vertical==this.parentInstance.vertical||U(t.element,"writing-mode",this.vertical?"vertical-rl":"horizontal-tb"),(this.vertical?this.isAutoWidth:this.isAutoHeight)?this.vertical?this.sizeWithMaxWidth(e,t):this.sizeWithMaxHeight(e,t):(this.assignBeforePosition(e,t),this.assignAfterPosition(e,t)),(this.vertical?this.isAutoHeight:this.isAutoWidth)?this.vertical?this.sizeWithMaxHeight(e,t):this.sizeWithMaxWidth(e,t):this.assignStartEndPosition(e,t);for(let n=0;n<Lc.length;n++)this.propagateProperty(e,t,Lc[n],i)}transferContentProps(e,t,n,i){for(let n=0;n<Fc.length;n++)this.propagateProperty(e,t,Fc[n],i)}transferSinglUriContentProps(e,t,n){for(let i=0;i<Dc.length;i++)this.propagatePropertyToElement(e,t,Dc[i],n)}finishContainer(e,t,n,i,o,s,r){this.vertical?this.calculatedWidth=t.computedBlockSize+t.snapOffsetX:this.calculatedHeight=t.computedBlockSize+t.snapOffsetY;const a=(this.vertical||!i)&&this.isAutoHeight,l=(!this.vertical||!i)&&this.isAutoWidth;let h=null;if((l||a)&&(l&&U(t.element,"width","auto"),a&&U(t.element,"height","auto"),h=s.getElementClientRect(i?i.element:t.element),l&&(this.calculatedWidth=Math.ceil(h.right-h.left-t.paddingLeft-t.borderLeft-t.paddingRight-t.borderRight),this.vertical&&(this.calculatedWidth+=t.snapOffsetX)),a&&(this.calculatedHeight=h.bottom-h.top-t.paddingTop-t.borderTop-t.paddingBottom-t.borderBottom,this.vertical||(this.calculatedHeight+=t.snapOffsetY))),(this.vertical?this.isAutoHeight:this.isAutoWidth)&&this.assignStartEndPosition(e,t),(this.vertical?this.isAutoWidth:this.isAutoHeight)&&((this.vertical?this.isRightDependentOnAutoWidth:this.isTopDependentOnAutoHeight)&&this.assignBeforePosition(e,t),this.assignAfterPosition(e,t)),o>1){const n=this.getPropAsNumber(e,"column-rule-width"),i=this.getProp(e,"column-rule-style"),s=this.getProp(e,"column-rule-color");if(n>0&&i&&i!=Bt.none&&s!=Bt.transparent){const r=this.getPropAsNumber(e,"column-gap"),a=this.vertical?t.height:t.width,l=this.vertical?"border-top":"border-left";for(let e=1;e<o;e++){const h=(a+r)*e/o-r/2+t.paddingLeft-n/2,c=t.height+t.paddingTop+t.paddingBottom,u=t.element.ownerDocument.createElement("div");U(u,"position","absolute"),U(u,this.vertical?"left":"top","0px"),U(u,this.vertical?"top":"left",`${h}px`),U(u,this.vertical?"height":"width","0px"),U(u,this.vertical?"width":"height",`${c}px`),U(u,l,`${n}px ${i.toString()}${s?` ${s.toString()}`:""}`),t.element.insertBefore(u,t.element.firstChild)}}}for(let n=0;n<kc.length;n++)this.propagateProperty(e,t,kc[n],r);for(let i=0;i<_c.length;i++)this.propagateDelayedProperty(e,t,_c[i],n.delayedItems)}applyCascadeAndInit(e,t){const n=this.cascaded,i=this.pageBox.specified;for(const e in i)Ho(e)&&Wo(n,e,$o(i,e));if(this.pageBox.pseudoName==Bc)for(const e in t)(e.match(/^background-/)||"writing-mode"==e)&&(n[e]=t[e]);if("layout-host"==this.pageBox.pseudoName)for(const e in t)e.match(/^background-/)||"writing-mode"==e||(n[e]=t[e]);e.pushRule(this.pageBox.classes,null,n),n.content&&(n.content=n.content.filterValue(new Us(e,null,e.counterResolver))),this.init(e.context);for(const n of this.pageBox.children)n.createInstance(this).applyCascadeAndInit(e,t);e.popRule()}resolveAutoSizing(e){this.isAutoWidth&&(this.isRightDependentOnAutoWidth=this.depends("right",this.autoWidth,e)||this.depends("margin-right",this.autoWidth,e)||this.depends("border-right-width",this.autoWidth,e)||this.depends("padding-right",this.autoWidth,e)),this.isAutoHeight&&(this.isTopDependentOnAutoHeight=this.depends("top",this.autoHeight,e)||this.depends("margin-top",this.autoHeight,e)||this.depends("border-top-width",this.autoHeight,e)||this.depends("padding-top",this.autoHeight,e));for(const t of this.children)t.resolveAutoSizing(e)}}const Lc=["border-left-style","border-right-style","border-top-style","border-bottom-style","border-left-color","border-right-color","border-top-color","border-bottom-color","outline-style","outline-color","outline-width","overflow","visibility"],kc=["border-top-left-radius","border-top-right-radius","border-bottom-right-radius","border-bottom-left-radius","border-image-source","border-image-slice","border-image-width","border-image-outset","border-image-repeat","background-attachment","background-color","background-image","background-repeat","background-position","background-clip","background-origin","background-size","opacity","z-index","background-blend-mode","isolation","mix-blend-mode","filter"],Fc=["color","font-family","font-size","font-style","font-weight","font-variant","line-height","letter-spacing","text-align","text-decoration","text-indent","text-transform","white-space","word-spacing","font-feature-settings","font-kerning","font-size-adjust","font-variant-east-asian","font-stretch","text-decoration-color","text-decoration-line","text-decoration-skip","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-shadow","text-underline-position"],Dc=["width","height","image-resolution","object-fit","object-position"],_c=["transform","transform-origin"],Bc="background-host";class Mc extends Rc{constructor(e){super(null,e)}applyCascadeAndInit(e,t){super.applyCascadeAndInit(e,t),this.children.sort((e,t)=>t.pageBox.specificity-e.pageBox.specificity||e.pageBox.index-t.pageBox.index)}}class Uc extends Rc{constructor(e,t){super(e,t),this.pageMasterInstance=this}boxSpecificEnabled(e){const t=this.pageBox.pageMaster;return t.condition&&(e=ht(t.scope,e,t.condition)),e}adjustPageLayout(e,t,n){}}class zc extends Rc{constructor(e,t){super(e,t),this.pageMasterInstance=e.pageMasterInstance}}class Vc extends Rc{constructor(e,t){super(e,t),this.pageMasterInstance=e.pageMasterInstance}processPartitionList(e,t,n){let i=null;if(t instanceof vt&&(i=[t]),t instanceof Lt&&(i=t.values),i){const t=this.pageBox.scope;for(let o=0;o<i.length;o++)if(i[o]instanceof vt){const s=ve(i[o].name,"enabled");let r=new tt(t,s);n&&(r=new Be(t,r)),e=ht(t,e,r)}}return e}boxSpecificEnabled(e){const t=this.pageBox.scope,n=this.style,i=Oc(t,n.required,t._false)!==t._false;if(i||this.isAutoHeight){const i=function(e,t,n){return t?t.toExpr(e,e.zero):new rt(e,n)}(t,n["flow-from"],"body");e=ht(t,e,new ot(t,"has-content",[i]))}if(e=this.processPartitionList(e,n["required-partitions"],!1),e=this.processPartitionList(e,n["conflicting-partitions"],!0),i){const n=this.pageMasterInstance.style.enabled;let i=n?n.toExpr(t,null):t._true;i=ht(t,i,e),this.pageMasterInstance.style.enabled=new Ft(i)}return e}prepareContainer(e,t,n,i,o){U(t.element,"overflow","hidden"),super.prepareContainer(e,t,n,i,o)}}class Hc extends ji{constructor(e,t,n,i){super(e,t,!1),this.target=n,this.validatorSet=i}property(e,t,n){this.validatorSet.validatePropertyAndHandleShorthand(e,t,n,this)}unknownProperty(e,t){this.report(`E_INVALID_PROPERTY ${e}: ${t.toString()}`)}invalidPropertyValue(e,t){this.report(`E_INVALID_PROPERTY_VALUE ${e}: ${t.toString()}`)}simpleProperty(e,t,n){this.target.specified[e]=new _o(t,n?Mi:Ui)}}class Gc extends Hc{constructor(e,t,n,i){super(e,t,n,i)}}class $c extends Hc{constructor(e,t,n,i){super(e,t,n,i),n.specified.width=new _o(Mt,0),n.specified.height=new _o(Mt,0)}startPartitionRule(e,t,n){const i=new Tc(this.scope,e,t,n,this.target),o=new Gc(this.scope,this.owner,i,this.validatorSet);this.owner.pushHandler(o)}startPartitionGroupRule(e,t,n){const i=new Cc(this.scope,e,t,n,this.target),o=new $c(this.scope,this.owner,i,this.validatorSet);this.owner.pushHandler(o)}}class Wc extends Hc{constructor(e,t,n,i){super(e,t,n,i)}startPartitionRule(e,t,n){const i=new Tc(this.scope,e,t,n,this.target),o=new Gc(this.scope,this.owner,i,this.validatorSet);this.owner.pushHandler(o)}startPartitionGroupRule(e,t,n){const i=new Cc(this.scope,e,t,n,this.target),o=new $c(this.scope,this.owner,i,this.validatorSet);this.owner.pushHandler(o)}}function Xc(e){let n=e["writing-mode"];n=n&&n.value;let i=e.direction;return i=i&&i.value,n===Bt.vertical_lr||n!==Bt.vertical_rl&&i!==Bt.rtl?t.PageProgression.LTR:t.PageProgression.RTL}const jc={a5:{width:new Tt(148,"mm"),height:new Tt(210,"mm")},a4:{width:new Tt(210,"mm"),height:new Tt(297,"mm")},a3:{width:new Tt(297,"mm"),height:new Tt(420,"mm")},b5:{width:new Tt(176,"mm"),height:new Tt(250,"mm")},b4:{width:new Tt(250,"mm"),height:new Tt(353,"mm")},"jis-b5":{width:new Tt(182,"mm"),height:new Tt(257,"mm")},"jis-b4":{width:new Tt(257,"mm"),height:new Tt(364,"mm")},letter:{width:new Tt(8.5,"in"),height:new Tt(11,"in")},legal:{width:new Tt(8.5,"in"),height:new Tt(14,"in")},ledger:{width:new Tt(11,"in"),height:new Tt(17,"in")}},Kc=new Tt(.24,"pt"),Yc=new Tt(3,"mm"),qc=new Tt(10,"mm"),Zc=new Tt(13,"mm");function Qc(e){const t={width:Ut,height:zt,bleed:Vt,bleedOffset:Vt},n=e.size;if(n&&n.value!==Bt.auto){const e=n.value;let i,o;if(e.isSpaceList()?(i=e.values[0],o=e.values[1]):(i=e,o=null),i.isNumeric())t.width=i,t.height=o||i;else{const e=i.name&&jc[i.name.toLowerCase()];e&&(o&&o===Bt.landscape?(t.width=e.height,t.height=e.width):(t.width=e.width,t.height=e.height))}}const i=e.marks;i&&i.value!==Bt.none&&(t.bleedOffset=Zc);const o=e.bleed;if(o&&o.value!==Bt.auto)o.value&&o.value.isNumeric()&&(t.bleed=o.value);else if(i){let e=!1;e=i.value.isSpaceList()?i.value.values.some(e=>e===Bt.crop):i.value===Bt.crop,e&&(t.bleed=new Tt(6,"pt"))}return t}function Jc(e,t){const n={},i=e.bleed.num*t.queryUnitSize(e.bleed.unit,!1),o=e.bleedOffset.num*t.queryUnitSize(e.bleedOffset.unit,!1),s=i+o,r=e.width;r===Ut?t.pref.defaultPaperSize?n.pageWidth=t.pref.defaultPaperSize.width*t.queryUnitSize("px",!1):n.pageWidth=(t.pref.spreadView?Math.floor(t.viewportWidth/2)-t.pref.pageBorder:t.viewportWidth)-2*s:n.pageWidth=r.num*t.queryUnitSize(r.unit,!1);const a=e.height;return a===zt?t.pref.defaultPaperSize?n.pageHeight=t.pref.defaultPaperSize.height*t.queryUnitSize("px",!1):n.pageHeight=t.viewportHeight-2*s:n.pageHeight=a.num*t.queryUnitSize(a.unit,!1),n.bleed=i,n.bleedOffset=o,n.cropOffset=s,n}function eu(e,t,n){const i=e.createElementNS(L.SVG,"svg");return i.setAttribute("width",t),i.setAttribute("height",n),i.style.position="absolute",i}function tu(e,t,n){n=n||"polyline";const i=e.createElementNS(L.SVG,n);return i.setAttribute("stroke","black"),i.setAttribute("stroke-width",t),i.setAttribute("fill","none"),i}var nu,iu;function ou(e,t,n,i){let o=!1,s=!1;const r=e.marks;if(r){const e=r.value;e.isSpaceList()?e.values.forEach(e=>{e===Bt.crop?o=!0:e===Bt.cross&&(s=!0)}):e===Bt.crop?o=!0:e===Bt.cross&&(s=!0)}if(!o&&!s)return;const a=n.container,l=a.ownerDocument,h=t.bleed,c=Dt(Kc,i),u=Dt(Yc,i),d=Dt(qc,i);if(h){const t=e["background-color"];t&&t.value&&(n.bleedBox.style.backgroundColor=t.value.stringValue())}o&&Object.keys(nu).forEach(e=>{const t=nu[e],n=function(e,t,n,i,o,s){let r=i;r<=o+2*Ie.mm&&(r=o+i/2);const a=Math.max(i,r),l=o+a+n/2,h=eu(e,l,l);let c=[[0,o+i],[i,o+i],[i,o+i-r]],u=c.map(e=>[e[1],e[0]]);t!==nu.TOP_RIGHT&&t!==nu.BOTTOM_RIGHT||(c=c.map(e=>[o+a-e[0],e[1]]),u=u.map(e=>[o+a-e[0],e[1]])),t!==nu.BOTTOM_LEFT&&t!==nu.BOTTOM_RIGHT||(c=c.map(e=>[e[0],o+a-e[1]]),u=u.map(e=>[e[0],o+a-e[1]]));const d=tu(e,n);d.setAttribute("points",c.map(e=>e.join(",")).join(" ")),h.appendChild(d);const p=tu(e,n);return p.setAttribute("points",u.map(e=>e.join(",")).join(" ")),h.appendChild(p),t.split(" ").forEach(e=>{h.style[e]=`${s}px`}),h}(l,t,c,d,h,u);a.appendChild(n)}),s&&Object.keys(iu).forEach(e=>{const t=iu[e],n=function(e,t,n,i,o){const s=2*i;let r,a;t===iu.TOP||t===iu.BOTTOM?(r=s,a=i):(r=i,a=s);const l=eu(e,r,a),h=tu(e,n);h.setAttribute("points",`0,${a/2} ${r},${a/2}`),l.appendChild(h);const c=tu(e,n);c.setAttribute("points",`${r/2},0 ${r/2},${a}`),l.appendChild(c);const u=tu(e,n,"circle");let d;switch(u.setAttribute("cx",r/2),u.setAttribute("cy",a/2),u.setAttribute("r",i/4),l.appendChild(u),t){case iu.TOP:d=iu.BOTTOM;break;case iu.BOTTOM:d=iu.TOP;break;case iu.LEFT:d=iu.RIGHT;break;case iu.RIGHT:d=iu.LEFT}return Object.keys(iu).forEach(e=>{const n=iu[e];n===t?l.style[n]=`${o}px`:n!==d&&(l.style[n]="0",l.style[`margin-${n}`]="auto")}),l}(l,t,c,d,u);a.appendChild(n)})}!function(e){e.TOP_LEFT="top left",e.TOP_RIGHT="top right",e.BOTTOM_LEFT="bottom left",e.BOTTOM_RIGHT="bottom right"}(nu||(nu={})),function(e){e.TOP="top",e.BOTTOM="bottom",e.LEFT="left",e.RIGHT="right"}(iu||(iu={}));const su=(()=>{const e={width:!0,height:!0,"block-size":!0,"inline-size":!0,margin:!0,padding:!0,border:!0,outline:!0,"outline-width":!0,"outline-style":!0,"outline-color":!0};return["left","right","top","bottom","before","after","start","end","block-start","block-end","inline-start","inline-end"].forEach(t=>{e[`margin-${t}`]=!0,e[`padding-${t}`]=!0,e[`border-${t}-width`]=!0,e[`border-${t}-style`]=!0,e[`border-${t}-color`]=!0}),e})();var ru;!function(e){e.START="start",e.CENTER="center",e.END="end"}(ru||(ru={}));const au={"top-left-corner":{order:1,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!0,isInRightColumn:!0,positionAlongVariableDimension:null},"top-left":{order:2,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:ru.START},"top-center":{order:3,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:ru.CENTER},"top-right":{order:4,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:ru.END},"top-right-corner":{order:5,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:null},"right-top":{order:6,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:ru.START},"right-middle":{order:7,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:ru.CENTER},"right-bottom":{order:8,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:ru.END},"bottom-right-corner":{order:9,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:null},"bottom-right":{order:10,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:ru.END},"bottom-center":{order:11,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:ru.CENTER},"bottom-left":{order:12,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:ru.START},"bottom-left-corner":{order:13,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!0,isInRightColumn:!1,positionAlongVariableDimension:null},"left-bottom":{order:14,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!0,isInRightColumn:!1,positionAlongVariableDimension:ru.END},"left-middle":{order:15,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!0,isInRightColumn:!1,positionAlongVariableDimension:ru.CENTER},"left-top":{order:16,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!0,isInRightColumn:!1,positionAlongVariableDimension:ru.START}},lu=(()=>{const e=au;return Object.keys(e).sort((t,n)=>e[t].order-e[n].order)})(),hu="vivliostyle-page-rule-master",cu="_marginBoxes";class uu extends vc{constructor(e,t,n){super(e,null,hu,[],t,null,0),this.pageMarginBoxes={};const i=Qc(n),o=new du(this.scope,this,n,i);this.bodyPartitionKey=o.key,this.createPageMarginBoxes(n),this.applySpecified(n,i)}createPageMarginBoxes(e){const t=e[cu];if(t){const n=this;lu.forEach(i=>{t[i]&&(n.pageMarginBoxes[i]=new pu(n.scope,n,i,e))})}}applySpecified(e,t){this.specified.position=new _o(Bt.relative,0),this.specified.width=new _o(t.width,0),this.specified.height=new _o(t.height,0);for(const t in e)su[t]||"background-clip"===t||(this.specified[t]=e[t])}createInstance(e){return new fu(e,this)}}class du extends Tc{constructor(e,t,n,i){super(e,null,null,[],t),this.pageSize=i,this.specified["z-index"]=new _o(new It(0),0),this.applySpecified(n)}applySpecified(e){this.specified["flow-from"]=new _o(Ct("body"),0),this.specified.position=new _o(Bt.absolute,0),this.specified.overflow=new _o(Bt.visible,0);for(const t in su)su.hasOwnProperty(t)&&(this.specified[t]=e[t])}createInstance(e){return new wu(e,this)}}class pu extends Tc{constructor(e,t,n,i){super(e,null,null,[],t),this.marginBoxName=n,this.applySpecified(i)}applySpecified(e){const t=e[cu][this.marginBoxName];for(const n in e){const i=e[n],o=t[n];(To[n]||o&&o.value===Bt.inherit)&&(this.specified[n]=i)}for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)){const n=t[e];n&&n.value!==Bt.inherit&&(this.specified[e]=n)}}createInstance(e){return new Eu(e,this)}}class fu extends Uc{constructor(e,t){super(e,t),this.pageAreaDimension=null,this.pageMarginBoxInstances={}}applyCascadeAndInit(e,t){const n=this.cascaded;for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))switch(e){case"writing-mode":case"direction":n[e]=t[e]}super.applyCascadeAndInit(e,t)}initHorizontal(){const e=this.style;e.left=Vt,e["margin-left"]=Vt,e["border-left-width"]=Vt,e["padding-left"]=Vt,e["padding-right"]=Vt,e["border-right-width"]=Vt,e["margin-right"]=Vt,e.right=Vt}initVertical(){const e=this.style;e.top=Vt,e["margin-top"]=Vt,e["border-top-width"]=Vt,e["padding-top"]=Vt,e["padding-bottom"]=Vt,e["border-bottom-width"]=Vt,e["margin-bottom"]=Vt,e.bottom=Vt}setPageAreaDimension(e){this.pageAreaDimension=e;const t=this.style;t.width=new Ft(e.borderBoxWidth),t.height=new Ft(e.borderBoxHeight),t["padding-left"]=new Ft(e.marginLeft),t["padding-right"]=new Ft(e.marginRight),t["padding-top"]=new Ft(e.marginTop),t["padding-bottom"]=new Ft(e.marginBottom)}adjustPageLayout(e,t,n){const i=t.marginBoxes,o={start:this.pageAreaDimension.marginLeft,end:this.pageAreaDimension.marginRight,extent:this.pageAreaDimension.borderBoxWidth},s={start:this.pageAreaDimension.marginTop,end:this.pageAreaDimension.marginBottom,extent:this.pageAreaDimension.borderBoxHeight};this.sizeMarginBoxesAlongVariableDimension(i.top,!0,o,e,n),this.sizeMarginBoxesAlongVariableDimension(i.bottom,!0,o,e,n),this.sizeMarginBoxesAlongVariableDimension(i.left,!1,s,e,n),this.sizeMarginBoxesAlongVariableDimension(i.right,!1,s,e,n)}sizeMarginBoxesAlongVariableDimension(e,t,n,i,o){const s=ru.START,r=ru.CENTER,a=ru.END,l=this.pageBox.scope,h={},c={},u={};for(const n in e){const i=au[n];if(i){const s=e[n],r=this.pageMarginBoxInstances[n],a=new gu(s,r.style,t,l,o);h[i.positionAlongVariableDimension]=s,c[i.positionAlongVariableDimension]=r,u[i.positionAlongVariableDimension]=a}}const d={start:n.start.evaluate(i),end:n.end.evaluate(i),extent:n.extent.evaluate(i)};let p=this.getSizesOfMarginBoxesAlongVariableDimension(u,d.extent),f=!1;const g={};Object.keys(h).forEach(e=>{const s=e,r=xc(l,c[s].style[t?"max-width":"max-height"],n.extent);if(r){const e=r.evaluate(i);if(p[s]>e){const n=u[s]=new bu(h[s],c[s].style,t,l,o,e);g[s]=n.getOuterSize(),f=!0}}}),f&&(p=this.getSizesOfMarginBoxesAlongVariableDimension(u,d.extent),f=!1,[s,r,a].forEach(e=>{p[e]=g[e]||p[e]}));const m={};Object.keys(h).forEach(e=>{const s=e,r=xc(l,c[s].style[t?"min-width":"min-height"],n.extent);if(r){const e=r.evaluate(i);if(p[s]<e){const n=u[s]=new bu(h[s],c[s].style,t,l,o,e);m[s]=n.getOuterSize(),f=!0}}}),f&&(p=this.getSizesOfMarginBoxesAlongVariableDimension(u,d.extent),[s,r,a].forEach(e=>{p[e]=m[e]||p[e]}));const b=d.start+d.extent,w=d.start+(d.start+d.extent);[s,r,a].forEach(e=>{const n=p[e];if(n){const i=h[e];let o=0;switch(e){case s:o=t?i.left:i.top;break;case r:o=(w-n)/2;break;case a:o=b-n}t?i.setHorizontalPosition(o,n-i.getInsetLeft()-i.getInsetRight()):i.setVerticalPosition(o,n-i.getInsetTop()-i.getInsetBottom())}})}getSizesOfMarginBoxesAlongVariableDimension(e,t){const n=e[ru.START],i=e[ru.CENTER],o=e[ru.END],s={};if(i){const e=[n,o].filter(e=>e),r=e.length?new mu(e):null,a=this.distributeAutoMarginBoxSizes(i,r,t);a.xSize&&(s[ru.CENTER]=a.xSize);const l=(t-(a.xSize||i.getOuterSize()))/2;n&&n.hasAutoSize()&&(s[ru.START]=l),o&&o.hasAutoSize()&&(s[ru.END]=l)}else{const e=this.distributeAutoMarginBoxSizes(n,o,t);e.xSize&&(s[ru.START]=e.xSize),e.ySize&&(s[ru.END]=e.ySize)}return s}distributeAutoMarginBoxSizes(e,t,n){const i={xSize:null,ySize:null};if(e&&t)if(e.hasAutoSize()&&t.hasAutoSize()){const o=e.getOuterMaxContentSize(),s=t.getOuterMaxContentSize();if(o>0&&s>0){const r=o+s;if(r<n)i.xSize=n*o/r;else{const s=e.getOuterMinContentSize(),a=s+t.getOuterMinContentSize();a<n?i.xSize=s+(n-a)*(o-s)/(r-a):a>0&&(i.xSize=n*s/a)}i.xSize>0&&(i.ySize=n-i.xSize)}else o>0?i.xSize=n:s>0&&(i.ySize=n)}else e.hasAutoSize()?i.xSize=Math.max(n-t.getOuterSize(),0):t.hasAutoSize()&&(i.ySize=Math.max(n-e.getOuterSize(),0));else e?e.hasAutoSize()&&(i.xSize=n):t&&t.hasAutoSize()&&(i.ySize=n);return i}prepareContainer(e,t,n,i,o){super.prepareContainer(e,t,n,i,o),t.element.setAttribute("data-vivliostyle-page-box",!0)}}class gu{constructor(e,t,n,i,o){this.container=e,this.isHorizontal=n,this.clientLayout=o,this.size=null,this.hasAutoSize_=!xc(i,t[n?"width":"height"],new et(i,0,"px"))}hasAutoSize(){return this.hasAutoSize_}getSize(){if(!this.size){const e=this.isHorizontal?[Er.MAX_CONTENT_WIDTH,Er.MIN_CONTENT_WIDTH]:[Er.MAX_CONTENT_HEIGHT,Er.MIN_CONTENT_HEIGHT];this.size=yr(this.clientLayout,this.container.element,e)}return this.size}getOuterMaxContentSize(){const e=this.getSize();return this.isHorizontal?this.container.getInsetLeft()+e[Er.MAX_CONTENT_WIDTH]+this.container.getInsetRight():this.container.getInsetTop()+e[Er.MAX_CONTENT_HEIGHT]+this.container.getInsetBottom()}getOuterMinContentSize(){const e=this.getSize();return this.isHorizontal?this.container.getInsetLeft()+e[Er.MIN_CONTENT_WIDTH]+this.container.getInsetRight():this.container.getInsetTop()+e[Er.MIN_CONTENT_HEIGHT]+this.container.getInsetBottom()}getOuterSize(){return this.isHorizontal?this.container.getInsetLeft()+this.container.width+this.container.getInsetRight():this.container.getInsetTop()+this.container.height+this.container.getInsetBottom()}}class mu{constructor(e){this.params=e}hasAutoSize(){return this.params.some(e=>e.hasAutoSize())}getOuterMaxContentSize(){const e=this.params.map(e=>e.getOuterMaxContentSize());return Math.max.apply(null,e)*e.length}getOuterMinContentSize(){const e=this.params.map(e=>e.getOuterMinContentSize());return Math.max.apply(null,e)*e.length}getOuterSize(){const e=this.params.map(e=>e.getOuterSize());return Math.max.apply(null,e)*e.length}}class bu extends gu{constructor(e,t,n,i,o,s){super(e,t,n,i,o),this.fixedSize=s}hasAutoSize(){return!1}getOuterMaxContentSize(){return this.getOuterSize()}getOuterMinContentSize(){return this.getOuterSize()}getOuterSize(){return this.isHorizontal?this.container.getInsetLeft()+this.fixedSize+this.container.getInsetRight():this.container.getInsetTop()+this.fixedSize+this.container.getInsetBottom()}}class wu extends Vc{constructor(e,t){super(e,t),this.borderBoxWidth=null,this.borderBoxHeight=null,this.marginTop=null,this.marginRight=null,this.marginBottom=null,this.marginLeft=null}applyCascadeAndInit(e,t){const n=this.cascaded;for(const e in t)Object.prototype.hasOwnProperty.call(t,e)&&(e.match(/^column.*$/)||e.match(/^background-/))&&(n[e]=t[e]);super.applyCascadeAndInit(e,t),this.parentInstance.setPageAreaDimension({borderBoxWidth:this.borderBoxWidth,borderBoxHeight:this.borderBoxHeight,marginTop:this.marginTop,marginRight:this.marginRight,marginBottom:this.marginBottom,marginLeft:this.marginLeft})}initHorizontal(){const e=this.resolvePageBoxDimensions({start:"left",end:"right",extent:"width"});this.borderBoxWidth=e.borderBoxExtent,this.marginLeft=e.marginStart,this.marginRight=e.marginEnd}initVertical(){const e=this.resolvePageBoxDimensions({start:"top",end:"bottom",extent:"height"});this.borderBoxHeight=e.borderBoxExtent,this.marginTop=e.marginStart,this.marginBottom=e.marginEnd}resolvePageBoxDimensions(e){const t=this.style,n=this.pageBox.pageSize,i=this.pageBox.scope,o=e.start,s=e.end,r=e.extent,a=n[r].toExpr(i,null);let l=xc(i,t[r],a),h=xc(i,t[`margin-${o}`],a),c=xc(i,t[`margin-${s}`],a);const u=Ic(i,t[`padding-${o}`],a),d=Ic(i,t[`padding-${s}`],a),p=Ac(i,t[`border-${o}-width`],t[`border-${o}-style`],a),f=Ac(i,t[`border-${s}-width`],t[`border-${s}-style`],a);let g=ut(i,a,ct(i,ct(i,p,u),ct(i,f,d)));return l?(g=ut(i,g,l),h||c?h?c=ut(i,g,h):h=ut(i,g,c):(h=dt(i,g,new rt(i,.5)),c=h)):(h||(h=i.zero),c||(c=i.zero),l=ut(i,g,ct(i,h,c))),t[o]=new Ft(h),t[s]=new Ft(c),t[`margin-${o}`]=Vt,t[`margin-${s}`]=Vt,t[`padding-${o}`]=new Ft(u),t[`padding-${s}`]=new Ft(d),t[`border-${o}-width`]=new Ft(p),t[`border-${s}-width`]=new Ft(f),t[r]=new Ft(l),t[`max-${r}`]=new Ft(l),{borderBoxExtent:ut(i,a,ct(i,h,c)),marginStart:h,marginEnd:c}}prepareContainer(e,t,n,i,o){super.prepareContainer(e,t,n,i,o),n.pageAreaElement=t.element,e.pageAreaWidth=parseFloat(n.pageAreaElement.style.width),e.pageAreaHeight=parseFloat(n.pageAreaElement.style.height)}}class Eu extends Vc{constructor(e,t){super(e,t),this.suppressEmptyBoxGeneration=!0;const n=t.marginBoxName;this.boxInfo=au[n],e.pageMarginBoxInstances[n]=this}prepareContainer(e,t,n,i,o){this.applyVerticalAlign(e,t.element),super.prepareContainer(e,t,n,i,o)}applyVerticalAlign(e,t){U(t,"display","flex");const n=this.getProp(e,"vertical-align");let i=null;n===Ct("middle")?i="center":n===Ct("top")?i="flex-start":n===Ct("bottom")&&(i="flex-end"),i&&(U(t,"flex-flow",this.vertical?"row":"column"),U(t,"justify-content",i))}positionAlongVariableDimension(e,t){const n=this.style,i=this.pageBox.scope,o=e.start,s=e.end,r=e.extent,a="left"===o,l=a?t.borderBoxWidth:t.borderBoxHeight,h=xc(i,n[r],l),c=a?t.marginLeft:t.marginTop;if(this.boxInfo.positionAlongVariableDimension===ru.START)n[o]=new Ft(c);else if(h){const e=Ic(i,n[`margin-${o}`],l),t=Ic(i,n[`margin-${s}`],l),r=Ic(i,n[`padding-${o}`],l),a=Ic(i,n[`padding-${s}`],l),u=Ac(i,n[`border-${o}-width`],n[`border-${o}-style`],l),d=Ac(i,n[`border-${s}-width`],n[`border-${s}-style`],l),p=ct(i,h,ct(i,ct(i,r,a),ct(i,ct(i,u,d),ct(i,e,t))));switch(this.boxInfo.positionAlongVariableDimension){case ru.CENTER:n[o]=new Ft(ct(i,c,pt(i,ut(i,l,p),new rt(i,2))));break;case ru.END:n[o]=new Ft(ut(i,ct(i,c,l),p))}}}positionAndSizeAlongFixedDimension(e,t){const n=this.style,i=this.pageBox.scope,o=e.inside,s=e.outside,r=e.extent,a=t[`margin${s.charAt(0).toUpperCase()}${s.substring(1)}`],l=Pc(i,n[`margin-${o}`],a),h=Pc(i,n[`margin-${s}`],a),c=Ic(i,n[`padding-${o}`],a),u=Ic(i,n[`padding-${s}`],a),d=Ac(i,n[`border-${o}-width`],n[`border-${o}-style`],a),p=Ac(i,n[`border-${s}-width`],n[`border-${s}-style`],a),f=xc(i,n[r],a);let g=null;function m(e){if(g)return g;g={extent:f?f.evaluate(e):null,marginInside:l?l.evaluate(e):null,marginOutside:h?h.evaluate(e):null};const t=a.evaluate(e);let n=0;return[d,c,u,p].forEach(t=>{t&&(n+=t.evaluate(e))}),(null===g.marginInside||null===g.marginOutside)&&n+g.extent+g.marginInside+g.marginOutside>t&&(null===g.marginInside&&(g.marginInside=0),null===g.marginOutside&&(g.marginOutside=0)),null!==g.extent&&null!==g.marginInside&&null!==g.marginOutside&&(g.marginOutside=null),null===g.extent&&null!==g.marginInside&&null!==g.marginOutside?g.extent=t-n-g.marginInside-g.marginOutside:null!==g.extent&&null===g.marginInside&&null!==g.marginOutside?g.marginInside=t-n-g.extent-g.marginOutside:null!==g.extent&&null!==g.marginInside&&null===g.marginOutside?g.marginOutside=t-n-g.extent-g.marginInside:null===g.extent?(g.marginInside=g.marginOutside=0,g.extent=t-n):g.marginInside=g.marginOutside=(t-n-g.extent)/2,g}n[r]=new Ft(new it(i,(function(){const e=m(this).extent;return null===e?0:e}),r)),n[`margin-${o}`]=new Ft(new it(i,(function(){const e=m(this).marginInside;return null===e?0:e}),`margin-${o}`)),n[`margin-${s}`]=new Ft(new it(i,(function(){const e=m(this).marginOutside;return null===e?0:e}),`margin-${s}`)),"left"===o?n.left=new Ft(ct(i,t.marginLeft,t.borderBoxWidth)):"top"===o&&(n.top=new Ft(ct(i,t.marginTop,t.borderBoxHeight)))}initHorizontal(){const e=this.parentInstance.pageAreaDimension;this.boxInfo.isInLeftColumn?this.positionAndSizeAlongFixedDimension({inside:"right",outside:"left",extent:"width"},e):this.boxInfo.isInRightColumn?this.positionAndSizeAlongFixedDimension({inside:"left",outside:"right",extent:"width"},e):this.positionAlongVariableDimension({start:"left",end:"right",extent:"width"},e)}initVertical(){const e=this.parentInstance.pageAreaDimension;this.boxInfo.isInTopRow?this.positionAndSizeAlongFixedDimension({inside:"bottom",outside:"top",extent:"height"},e):this.boxInfo.isInBottomRow?this.positionAndSizeAlongFixedDimension({inside:"top",outside:"bottom",extent:"height"},e):this.positionAlongVariableDimension({start:"top",end:"bottom",extent:"height"},e)}finishContainer(e,t,n,i,o,s,r){super.finishContainer(e,t,n,i,o,s,r);const a=n.marginBoxes,l=this.pageBox.marginBoxName,h=this.boxInfo;h.isInLeftColumn||h.isInRightColumn?h.isInTopRow||h.isInBottomRow||(h.isInLeftColumn?a.left[l]=t:h.isInRightColumn&&(a.right[l]=t)):h.isInTopRow?a.top[l]=t:h.isInBottomRow&&(a.bottom[l]=t)}}class yu{constructor(e,t,n,i,o){this.cascadeInstance=e,this.pageScope=t,this.rootPageBoxInstance=n,this.context=i,this.docElementStyle=o,this.pageMasterCache={},this.definePageProgression()}definePageProgression(){const e=this.pageScope,n=new tt(e,"page-number"),i=new je(e,new Je(e,n,new rt(e,2)),e.zero);e.defineName("recto-page",new Be(e,i)),e.defineName("verso-page",i),(this.context.pageProgression||Xc(this.docElementStyle))===t.PageProgression.LTR?(e.defineName("left-page",i),e.defineName("right-page",new Be(e,i))):(e.defineName("left-page",new Be(e,i)),e.defineName("right-page",i))}getCascadedPageStyle(){const e={};return this.cascadeInstance.pushRule([],"",e),this.cascadeInstance.popRule(),e}getPageRulePageMaster(e,t){const n=e.pageBox;if(0===Object.keys(t).length)return n.resetScope(),e;const i=this.makeCacheKey(t,n);let o=this.pageMasterCache[i];return o||(o=n.pseudoName===Bc?this.generatePageRuleMaster(t):this.generateCascadedPageMaster(t,n),this.pageMasterCache[i]=o),o.pageBox.resetScope(),o}makeCacheKey(e,t){const n=this.makeCascadeValueObjectKey(e);return`${t.key}^${n}`}makeCascadeValueObjectKey(e){const t=[];for(const n in e)if(Object.prototype.hasOwnProperty.call(e,n)){const i=e[n];let o;o=i instanceof _o?`${i.value}`:this.makeCascadeValueObjectKey(i),t.push(n+o+(i.priority||""))}return t.sort().join("^")}generatePageRuleMaster(e){const t=new uu(this.pageScope,this.rootPageBoxInstance.pageBox,e).createInstance(this.rootPageBoxInstance);return t.applyCascadeAndInit(this.cascadeInstance,this.docElementStyle),t.resolveAutoSizing(this.context),t}generateCascadedPageMaster(e,t){const n=t.clone({pseudoName:hu}),i=n.specified,o=e.size;if(o){const t=Qc(e),n=o.priority;i.width=Mo(this.context,i.width,new _o(t.width,n)),i.height=Mo(this.context,i.height,new _o(t.height,n))}["counter-reset","counter-increment"].forEach(t=>{i[t]&&(e[t]=i[t])});const s=n.createInstance(this.rootPageBoxInstance);return s.applyCascadeAndInit(this.cascadeInstance,this.docElementStyle),s.resolveAutoSizing(this.context),s}}class Su extends ss{constructor(e){super(),this.pageType=e}apply(e){e.currentPageType===this.pageType&&this.chained.apply(e)}getPriority(){return 3}makePrimary(e){return this.chained&&e.insertInTable(e.pagetypes,this.pageType,this.chained),!0}}class Nu extends ss{constructor(e){super(),this.scope=e}apply(e){1===new tt(this.scope,"page-number").evaluate(e.context)&&this.chained.apply(e)}getPriority(){return 2}}class vu extends ss{constructor(e){super(),this.scope=e}apply(e){new tt(this.scope,"left-page").evaluate(e.context)&&this.chained.apply(e)}getPriority(){return 1}}class Cu extends ss{constructor(e){super(),this.scope=e}apply(e){new tt(this.scope,"right-page").evaluate(e.context)&&this.chained.apply(e)}getPriority(){return 1}}class Tu extends ss{constructor(e){super(),this.scope=e}apply(e){new tt(this.scope,"recto-page").evaluate(e.context)&&this.chained.apply(e)}getPriority(){return 1}}class xu extends ss{constructor(e){super(),this.scope=e}apply(e){new tt(this.scope,"verso-page").evaluate(e.context)&&this.chained.apply(e)}getPriority(){return 1}}class Iu extends os{constructor(e,t){super(e,t,null,null,null)}apply(e){!function(e,t,n,i,o){Zo(e,t,n,i,null,null,null);const s=n[cu];if(s){const n=jo(t,cu);for(const t in s)if(s.hasOwnProperty(t)){let o=n[t];o||(o={},n[t]=o),Zo(e,o,s[t],i,null,null,null)}}}(e.context,e.currentStyle,this.style,this.specificity)}}class Pu extends Qs{constructor(e,t,n,i,o){super(e,t,null,n,null,i,!1),this.pageProps=o,this.currentPageSelectors=[],this.currentNamedPageSelector="",this.currentPseudoPageClassSelectors=[]}startPageRule(){this.startSelectorRule()}tagSelector(e,t){this.currentNamedPageSelector=t,t&&(this.chain.push(new Su(t)),this.specificity+=65536)}pseudoclassSelector(e,t){switch(t&&this.reportAndSkip(`E_INVALID_PAGE_SELECTOR :${e}(${t.join("")})`),this.currentPseudoPageClassSelectors.push(`:${e}`),e.toLowerCase()){case"first":this.chain.push(new Nu(this.scope)),this.specificity+=256;break;case"left":this.chain.push(new vu(this.scope)),this.specificity+=1;break;case"right":this.chain.push(new Cu(this.scope)),this.specificity+=1;break;case"recto":this.chain.push(new Tu(this.scope)),this.specificity+=1;break;case"verso":this.chain.push(new xu(this.scope)),this.specificity+=1;break;default:this.reportAndSkip(`E_INVALID_PAGE_SELECTOR :${e}`)}}finishSelector(){let e;e=this.currentNamedPageSelector||this.currentPseudoPageClassSelectors.length?[this.currentNamedPageSelector].concat(this.currentPseudoPageClassSelectors.sort()):null,this.currentPageSelectors.push({selectors:e,specificity:this.specificity}),this.currentNamedPageSelector="",this.currentPseudoPageClassSelectors=[]}nextSelector(){this.finishSelector(),super.nextSelector()}startRuleBody(){this.finishSelector(),super.startRuleBody()}simpleProperty(e,t,n){if(("bleed"===e||"marks"===e)&&!this.currentPageSelectors.some(e=>null===e.selectors))return;super.simpleProperty(e,t,n);const i=$o(this.elementStyle,e),o=this.pageProps;if("bleed"===e||"marks"===e)o[""]||(o[""]={}),Object.keys(o).forEach(t=>{Wo(o[t],e,i)});else if("size"===e){const t=o[""];this.currentPageSelectors.forEach(n=>{let s=new _o(i.value,i.priority+n.specificity);const r=n.selectors?n.selectors.join(""):"";let a=o[r];if(a){const t=$o(a,e);s=t?Mo(null,s,t):s,Wo(a,e,s)}else a=o[r]={},Wo(a,e,s),t&&["bleed","marks"].forEach(e=>{t[e]&&Wo(a,e,t[e])},this)})}}insertNonPrimary(e){this.cascade.insertInTable(this.cascade.pagetypes,"*",e)}makeApplyRuleAction(e){return new Iu(this.elementStyle,e)}startPageMarginBoxRule(e){const t=jo(this.elementStyle,cu);let n=t[e];n||(n={},t[e]=n);const i=new Au(this.scope,this.owner,this.validatorSet,n);this.owner.pushHandler(i)}}class Au extends ji{constructor(e,t,n,i){super(e,t,!1),this.validatorSet=n,this.boxStyle=i}property(e,t,n){this.validatorSet.validatePropertyAndHandleShorthand(e,t,n,this)}invalidPropertyValue(e,t){this.report(`E_INVALID_PROPERTY_VALUE ${e}: ${t.toString()}`)}unknownProperty(e,t){this.report(`E_INVALID_PROPERTY ${e}: ${t.toString()}`)}simpleProperty(e,t,n){const i=n?this.getImportantSpecificity():this.getBaseSpecificity(),o=new _o(t,i);Wo(this.boxStyle,e,o)}}const Ou=(e,t,n)=>e.replace(/[uU][rR][lL]\(\s*"((\\([^0-9a-fA-F]+|[0-9a-fA-F]+\s*)|[^"\r\n])+)"/gm,(e,i)=>`url("${n.transformURL(i,t)}"`).replace(/[uU][rR][lL]\(\s*'((\\([^0-9a-fA-F]+|[0-9a-fA-F]+\s*)|[^'\r\n])+)'/gm,(e,i)=>`url('${n.transformURL(i,t)}'`).replace(/[uU][rR][lL]\(\s*((\\([^0-9a-fA-F]+|[0-9a-fA-F]+\s*)|[^"'\r\n\)\s])+)/gm,(e,i)=>`url(${n.transformURL(i,t)}`),Ru={},Lu={"text-indent":"0px","margin-top":"0px","padding-top":"0px","border-top-width":"0px","border-top-style":"none","border-top-color":"transparent","border-top-left-radius":"0px","border-top-right-radius":"0px"},ku={"text-indent":"0px","margin-right":"0px","padding-right":"0px","border-right-width":"0px","border-right-style":"none","border-right-color":"transparent","border-top-right-radius":"0px","border-bottom-right-radius":"0px"},Fu={"margin-top":"0px"},Du={"margin-right":"0px"};class _u extends te{constructor(e,t,n,i,o,s,r,a,l,h,c,u,d){super(),this.flowName=e,this.context=t,this.viewport=n,this.styler=i,this.regionIds=o,this.xmldoc=s,this.docFaces=r,this.footnoteStyle=a,this.stylerProducer=l,this.page=h,this.customRenderer=c,this.fallbackMap=u,this.documentURLTransformer=d,this.nodeContext=null,this.viewRoot=null,this.isFootnote=!1,this.sourceNode=null,this.offsetInNode=0,this.viewNode=null,this.document=n.document,this.exprContentListener=i.counterListener.getExprContentListener()}clone(){return new _u(this.flowName,this.context,this.viewport,this.styler,this.regionIds,this.xmldoc,this.docFaces,this.footnoteStyle,this.stylerProducer,this.page,this.customRenderer,this.fallbackMap,this.documentURLTransformer)}createPseudoelementShadow(e,t,n,i,o,s,r,a){const l=this.getPseudoMap(n,this.regionIds,this.isFootnote,this.nodeContext,s);if(!l)return a;const h=[],c=ul.createElementNS(L.SHADOW,"root");let u=c;for(const e of dl){let n;if(e){if(!l[e])continue;if(!("footnote-marker"!=e||t&&this.isFootnote))continue;if(e.match(/^first-/)){const e=i.display;if(!e||e===Bt.inline)continue}if("before"===e||"after"===e){const t=l[e].content;if(!t||t===Bt.normal||t===Bt.none)continue}h.push(e),n=ul.createElementNS(L.XHTML,"span"),gl(n,e)}else n=ul.createElementNS(L.SHADOW,"content");u.appendChild(n),e.match(/^first-/)&&(u=n)}if(!h.length)return a;const d=new ml(e,n,o,s,this.exprContentListener);return new ha(e,c,null,r,a,la.ROOTLESS,d)}getPseudoMap(e,t,n,i,o){const s=Xo(e,"_pseudos");if(!s)return null;const r={};for(const e in s){const i=r[e]={};dr(i,s[e],o),rr(i,o,s[e]),ur(s[e],t,n,(e,t)=>{dr(i,t,o),sr(t,e=>{dr(i,e,o)})})}return r}createRefShadow(e,t,n,i,o){const s=this,r=pi("createRefShadow");return s.xmldoc.store.load(e).then(a=>{const l=a;if(l){const r=l.getElement(e);if(r){const e=s.stylerProducer.getStylerForDoc(l);o=new ha(n,r,l,i,o,t,e)}}r.finish(o)}),r.result()}createShadows(e,t,n,i,o,s,r){const a=this,l=pi("createShadows"),h=i.template;let c;if(h instanceof At){const t=h.url;c=a.createRefShadow(t,la.ROOTLESS,e,r,null)}else c=fi(null);return c.then(h=>{let c=null;if(e.namespaceURI==L.SHADOW&&"include"==e.localName){let t=e.getAttribute("href"),n=null;t?n=r?r.xmldoc:a.xmldoc:r&&(t=r.owner.namespaceURI==L.XHTML?r.owner.getAttribute("href"):r.owner.getAttributeNS(L.XLINK,"href"),n=r.parentShadow?r.parentShadow.xmldoc:a.xmldoc),t&&(t=O(t,n.url),c=a.createRefShadow(t,la.ROOTED,e,r,h))}null==c&&(c=fi(h));let u=null;c.then(t=>{if(i.display===Bt.table_cell){const n=O("user-agent.xml#table-cell",P);u=a.createRefShadow(n,la.ROOTLESS,e,r,t)}else u=fi(t)}),u.then(h=>{h=a.createPseudoelementShadow(e,t,n,i,o,s,r,h),l.finish(h)})}),l.result()}setViewRoot(e,t){this.viewRoot=e,this.isFootnote=t}computeStyle(e,t,n,i){const o=this.context,s=cr(n,o,this.regionIds,this.isFootnote,this.nodeContext);e=lr(s,o,e),t=hr(s,o,t);const r=this;pr(s,i,e,t,(e,t)=>{let n=t.evaluate(o,e);return"font-family"==e&&(n=r.docFaces.filterFontFamily(n)),n});const a=i.position,l=i.float,h=Qa(i.display||Bt.inline,a,l,this.sourceNode===this.xmldoc.root);return["display","position","float"].forEach(e=>{h[e]&&(i[e]=h[e])}),e}inheritFromSourceParent(e){let t=this.nodeContext.sourceNode;const n=[];let i=null,o=this.nodeContext.shadowContext,s=-1;for(;t&&1==t.nodeType;){const e=o&&o.root==t;if(!e||o.type==la.ROOTLESS){const e=(o?o.styler:this.styler).getStyle(t,!1);n.push(e),i=i||V(t)}e?(t=o.owner,o=o.parentShadow):(t=t.parentNode,s++)}const r=0===s,a=this.context.queryUnitSize("em",r),l={"font-size":new _o(new Tt(a,"px"),0)},h=new Jo(l,this.context);for(let e=n.length-1;e>=0;--e){const t=n[e],i=[];for(const e in t)Go(e)&&i.push(e);i.sort(Gt);for(const e of i){h.setPropName(e);const n=$o(t,e);n.value!==Bt.inherit&&(l[e]=n.filterValue(h))}}for(const t in e)Go(t)||(l[t]=e[t]);return{lang:i,elementStyle:l}}resolveURL(e){return e=O(e,this.xmldoc.url),this.fallbackMap[e]||e}inheritLangAttribute(){this.nodeContext.lang=V(this.nodeContext.sourceNode)||this.nodeContext.parent&&this.nodeContext.parent.lang||this.nodeContext.lang}transferPolyfilledInheritedProps(e){const n=p(t.HOOKS.POLYFILLED_INHERITED_PROPS).reduce((e,t)=>e.concat(t()),[].concat(xo)).filter(t=>e[t]);if(n.length){let t=this.nodeContext.inheritedProps;if(this.nodeContext.parent){t=this.nodeContext.inheritedProps={};for(const e in this.nodeContext.parent.inheritedProps)t[e]=this.nodeContext.parent.inheritedProps[e]}n.forEach(n=>{const i=e[n];if(i){if(i instanceof It)t[n]=i.num;else if(i instanceof vt)t[n]=i.name;else if(i instanceof Tt){const e=i;switch(e.unit){case"dpi":case"dpcm":case"dppx":t[n]=e.num*Ie[e.unit]}}else t[n]=i;delete e[n]}})}}resolveFormattingContext(e,n,i,o,s,r){const a=p(t.HOOKS.RESOLVE_FORMATTING_CONTEXT);for(let t=0;t<a.length;t++){const l=a[t](e,n,i,o,s,r);if(l)return void(e.formattingContext=l)}}createElementView(e,t){const n=this;let i=!0;const o=pi("createElementView");let s=n.sourceNode;const r=n.nodeContext.shadowContext?n.nodeContext.shadowContext.styler:n.styler;let a=r.getStyle(s,!1);if(!n.nodeContext.shadowContext){const e=this.xmldoc.getElementOffset(s);vo.registerFragmentIndex(e,n.nodeContext.fragmentIndex,0)}const l={};if(!n.nodeContext.parent){const e=n.inheritFromSourceParent(a);a=e.elementStyle,n.nodeContext.lang=e.lang}const h=a["float-reference"]&&function(e){switch(e){case"inline":return ya.INLINE;case"column":return ya.COLUMN;case"region":return ya.REGION;case"page":return ya.PAGE;default:throw new Error(`Unknown float-reference: ${e}`)}}(a["float-reference"].value.toString());if(n.nodeContext.parent&&h&&Sa(h)){const e=n.inheritFromSourceParent(a);a=e.elementStyle,n.nodeContext.lang=e.lang}n.nodeContext.vertical=n.computeStyle(n.nodeContext.vertical,"rtl"===n.nodeContext.direction,a,l),r.processContent(s,l),this.transferPolyfilledInheritedProps(l),this.inheritLangAttribute(),l.direction&&(n.nodeContext.direction=l.direction.toString());const c=l["flow-into"];if(c&&c.toString()!=n.flowName)return o.finish(!1),o.result();let u=l.display;if(u===Bt.none)return o.finish(!1),o.result();const d=null==n.nodeContext.parent;return n.nodeContext.flexContainer=u===Bt.flex,n.createShadows(s,d,a,l,r,n.context,n.nodeContext.shadowContext).then(c=>{n.nodeContext.nodeShadow=c;const p=l.position;let f=l.float,g=l.clear;const m=n.nodeContext.vertical?Bt.vertical_rl:Bt.horizontal_tb,b=n.nodeContext.parent?n.nodeContext.parent.vertical?Bt.vertical_rl:Bt.horizontal_tb:m,w=function(e){return"true"===e.getAttribute(Ya)}(s);n.nodeContext.establishesBFC=function(e,t,n,i,o,s,r){return o=o||s||Bt.horizontal_tb,!!r||!!n&&n!==Bt.none||Za(t)||e===Bt.inline_block||e===Bt.table_cell||e===Bt.table_caption||e==Bt.flex||(e===Bt.block||e===Bt.list_item)&&!!i&&i!==Bt.visible||!!s&&o!==s}(u,p,f,l.overflow,m,b,w),n.nodeContext.containingBlockForAbsolute=function(e){return e===Bt.relative||e===Bt.absolute||e===Bt.fixed}(p),!n.nodeContext.isInsideBFC()||f===Bt.footnote||h&&Sa(h)||(f=null,g=null);let E=f===Bt.left||f===Bt.right||f===Bt.top||f===Bt.bottom||f===Bt.inline_start||f===Bt.inline_end||f===Bt.block_start||f===Bt.block_end||f===Bt.snap_block||f===Bt.footnote;f&&(delete l.float,f===Bt.footnote&&(n.isFootnote?(E=!1,l.display=Bt.block):l.display=Bt.inline)),g&&(g===Bt.inherit&&n.nodeContext.parent&&n.nodeContext.parent.clearSide&&(g=Ct(n.nodeContext.parent.clearSide)),g!==Bt.left&&g!==Bt.right&&g!==Bt.top&&g!==Bt.bottom&&g!==Bt.both&&g!==Bt.all&&g!==Bt.same||(delete l.clear,l.display&&l.display!=Bt.inline&&(n.nodeContext.clearSide=g.toString())));const y=u===Bt.list_item&&l["ua-list-item-count"];if((E||l["break-inside"]&&l["break-inside"]!==Bt.auto)&&n.nodeContext.breakPenalty++,u&&u!==Bt.inline&&el(u)&&n.nodeContext.breakPenalty++,n.nodeContext.inline=!E&&!u||el(u)||function(e){switch(e.toString()){case"ruby-base":case"ruby-text":case"ruby-base-container":case"ruby-text-container":return!0;default:return!1}}(u),n.nodeContext.display=u?u.toString():"inline",n.nodeContext.floatSide=E?f.toString():null,n.nodeContext.floatReference=h||ya.INLINE,n.nodeContext.floatMinWrapBlock=l["float-min-wrap-block"]||null,n.nodeContext.columnSpan=l["column-span"],!n.nodeContext.inline){const e=l["break-after"];e&&(n.nodeContext.breakAfter=e.toString());const t=l["break-before"];t&&(n.nodeContext.breakBefore=t.toString())}n.nodeContext.verticalAlign=l["vertical-align"]&&l["vertical-align"].toString()||"baseline",n.nodeContext.captionSide=l["caption-side"]&&l["caption-side"].toString()||"top";const S=l["border-collapse"];if(!S||S===Ct("separate")){const e=l["border-spacing"];let t,i;e&&(e.isSpaceList()?(t=e.values[0],i=e.values[1]):t=i=e,t.isNumeric()&&(n.nodeContext.inlineBorderSpacing=Dt(t,n.context)),i.isNumeric()&&(n.nodeContext.blockBorderSpacing=Dt(i,n.context)))}n.nodeContext.footnotePolicy=l["footnote-policy"];const N=l["x-first-pseudo"];if(N){const e=n.nodeContext.parent?n.nodeContext.parent.firstPseudo:null;n.nodeContext.firstPseudo=new ua(e,N.num)}n.nodeContext.inline||n.processAfterIfcontinues(s,a,r,n.context);const v=l["white-space"];if(v){const e=Qr(v.toString());null!==e&&(n.nodeContext.whitespace=e)}const C=l["hyphenate-character"];C&&C!==Bt.auto&&(n.nodeContext.hyphenateCharacter=C.str);const T=l["word-break"],x=l["overflow-wrap"]||["word-wrap"];n.nodeContext.breakWord=T===Bt.break_all||x===Bt.break_word,n.resolveFormattingContext(n.nodeContext,e,u,p,f,d),n.nodeContext.parent&&n.nodeContext.parent.formattingContext&&(e=n.nodeContext.parent.formattingContext.isFirstTime(n.nodeContext,e)),n.nodeContext.inline||(n.nodeContext.repeatOnBreak=n.processRepeatOnBreak(l),n.findAndProcessRepeatingElements(s,r));let I=!1,P=null;const A=[];let O,R=s.namespaceURI,k=s.localName;if(R==L.XHTML)"html"==k||"body"==k||"script"==k||"link"==k||"meta"==k?k="div":"vide_"==k?k="video":"audi_"==k?k="audio":"object"==k&&(I=!!n.customRenderer),s.getAttribute(pl)&&a.content&&a.content.value&&a.content.value.url&&(k="img");else if(R==L.epub)k="span",R=L.XHTML;else if(R==L.FB2){if(R=L.XHTML,"image"==k){k="div";const e=s.getAttributeNS(L.XLINK,"href");if(e&&"#"==e.charAt(0)){const t=n.xmldoc.getElement(e);if(t){P=n.createElement(R,"img");const e=`data:${t.getAttribute("content-type")||"image/jpeg"};base64,${t.textContent.replace(/[ \t\n\t]/g,"")}`;A.push(Pi(P,e))}}}else k=Bu[k];k||(k=n.nodeContext.inline?"span":"div")}else if(R==L.NCX)if(R=L.XHTML,"ncx"==k||"navPoint"==k)k="div";else if("navLabel"==k){k="span";const e=s.parentNode;if(e){let t=null;for(let n=e.firstChild;n;n=n.nextSibling){if(1!=n.nodeType)continue;const e=n;if(e.namespaceURI==L.NCX&&"content"==e.localName){t=e.getAttribute("src");break}}t&&(k="a",s=s.ownerDocument.createElementNS(R,"a"),s.setAttribute("href",t))}}else k="span";else R==L.SHADOW?(R=L.XHTML,k=n.nodeContext.inline?"span":"div"):I=!!n.customRenderer;if(y)e?k="li":(k="div",u=Bt.block,l.display=u);else if("body"==k||"li"==k)k="div";else if("q"==k)k="span";else if("a"==k){const e=l["hyperlink-processing"];e&&"normal"!=e.toString()&&(k="span")}if(l.behavior&&"none"!=l.behavior.toString()&&n.customRenderer&&(I=!0),s.dataset&&"true"===s.getAttribute("data-math-typeset")&&(I=!0),I){const e=n.nodeContext.parent?n.nodeContext.parent.viewNode:null;O=n.customRenderer(s,e,l)}else O=fi(null);O.then(r=>{r?I&&(i="true"==r.getAttribute("data-adapt-process-children")):r=n.createElement(R,k),"a"==k&&r.addEventListener("click",n.page.hrefHandler,!1),P&&(n.applyPseudoelementStyle(n.nodeContext,"inner",P),r.appendChild(P)),"iframe"==r.localName&&r.namespaceURI==L.XHTML&&function(e){e.addEventListener("load",()=>{e.contentWindow.navigator.epubReadingSystem={name:"adapt",version:"0.1",layoutStyle:"paginated",hasFeature:function(e,t){switch(e){case"mouse-events":return!0}return!1}}},!1)}(r);const a=n.nodeContext.inheritedProps["image-resolution"],h=[],c=l.width,u=l.height,d=s.getAttribute("width"),p=s.getAttribute("height"),f=c===Bt.auto||!c&&!d,g=u===Bt.auto||!u&&!p;if(s.namespaceURI!=L.FB2||"td"==k){const t=s.attributes,i=t.length;let o=null;for(let s=0;s<i;s++){const i=t[s],a=i.namespaceURI;let l=i.localName,c=i.nodeValue;if(a){if("http://www.w3.org/2000/xmlns/"==a)continue;a==L.XLINK&&"href"==l&&(c=n.resolveURL(c))}else{if(l.match(/^on/))continue;if("style"==l)continue;if(("id"==l||"name"==l)&&e){c=n.documentURLTransformer.transformFragment(c,n.xmldoc.url),r.setAttribute(l,c),n.page.registerElementWithId(r,c);continue}if("src"==l||"href"==l||"poster"==l?(c=n.resolveURL(c),"href"===l&&(c=n.documentURLTransformer.transformURL(c,n.xmldoc.url))):"srcset"==l&&(c=c.split(",").map(e=>n.resolveURL(e.trim())).join(",")),"poster"===l&&"video"===k&&R===L.XHTML&&f&&g){const e=new Image,t=Pi(e,c);A.push(t),h.push({image:e,element:r,fetcher:t})}}if(R==L.SVG&&/^[A-Z\-]+$/.test(l)&&(l=l.toLowerCase()),n.isSVGUrlAttribute(l)&&(c=Ou(c,n.xmldoc.url,n.documentURLTransformer)),a){const e=Ru[a];e&&(l=`${e}:${l}`)}"src"!=l||a||"img"!=k&&"input"!=k||R!=L.XHTML?"href"==l&&"image"==k&&R==L.SVG&&a==L.XLINK?n.page.fetchers.push(Pi(r,c)):a?r.setAttributeNS(a,l,c):r.setAttribute(l,c):o=c}if(o){const e="input"===k?new Image:r,t=Pi(e,o);e!==r&&(r.src=o),f||g?(f&&g&&a&&1!==a&&h.push({image:e,element:r,fetcher:t}),A.push(t)):n.page.fetchers.push(t)}}delete l.content;const m=l["list-style-image"];if(m&&m instanceof At){const e=m.url;A.push(Pi(new Image,e))}if(n.preprocessElementStyle(l),n.applyComputedStyles(r,l),!n.nodeContext.inline){let i=null;if(e?t&&(i=n.nodeContext.vertical?Du:Fu):i="clone"!==n.nodeContext.inheritedProps["box-decoration-break"]?n.nodeContext.vertical?ku:Lu:n.nodeContext.vertical?Du:Fu,i)for(const e in i)U(r,e,i[e])}y&&r.setAttribute("value",l["ua-list-item-count"].stringValue()),n.viewNode=r,A.length?Ii(A).then(()=>{a>0&&n.modifyElemDimensionWithImageResolution(h,a,l,n.nodeContext.vertical),o.finish(i)}):o.timeSlice().then(()=>{o.finish(i)})})}),o.result()}processAfterIfcontinues(e,t,n,i){const o=this.getPseudoMap(t,this.regionIds,this.isFootnote,this.nodeContext,i);if(o&&o["after-if-continues"]&&o["after-if-continues"].content){const o=new ml(e,t,n,i,this.exprContentListener);this.nodeContext.afterIfContinues=new wl(e,o)}}isSVGUrlAttribute(e){return _u.SVG_URL_ATTRIBUTES.includes(e.toLowerCase())}modifyElemDimensionWithImageResolution(e,t,n,i){const o=this;e.forEach(e=>{if("load"===e.fetcher.get().get()){const s=e.image;let r=s.width/t,a=s.height/t;const l=e.element;if(r>0&&a>0)if(n["box-sizing"]===Bt.border_box&&(n["border-left-style"]!==Bt.none&&(r+=Dt(n["border-left-width"],o.context)),n["border-right-style"]!==Bt.none&&(r+=Dt(n["border-right-width"],o.context)),n["border-top-style"]!==Bt.none&&(a+=Dt(n["border-top-width"],o.context)),n["border-bottom-style"]!==Bt.none&&(a+=Dt(n["border-bottom-width"],o.context))),t>1){const e=n["max-width"]||Bt.none,t=n["max-height"]||Bt.none;if(e===Bt.none&&t===Bt.none)U(l,"max-width",`${r}px`);else if(e!==Bt.none&&t===Bt.none)U(l,"width",`${r}px`);else if(e===Bt.none&&t!==Bt.none)U(l,"height",`${a}px`);else{e.isNumeric(),t.isNumeric();const n=e,s=t;"%"!==n.unit?U(l,"max-width",`${Math.min(r,Dt(n,o.context))}px`):"%"!==s.unit?U(l,"max-height",`${Math.min(a,Dt(s,o.context))}px`):i?U(l,"height",`${a}px`):U(l,"width",`${r}px`)}}else if(t<1){const e=n["min-width"]||Vt,t=n["min-height"]||Vt;e.isNumeric(),e.isNumeric();const s=e,h=t;0===s.num&&0===h.num?U(l,"min-width",`${r}px`):0!==s.num&&0===h.num?U(l,"width",`${r}px`):0===s.num&&0!==h.num?U(l,"height",`${a}px`):"%"!==s.unit?U(l,"min-width",`${Math.max(r,Dt(s,o.context))}px`):"%"!==h.unit?U(l,"min-height",`${Math.max(a,Dt(h,o.context))}px`):i?U(l,"height",`${a}px`):U(l,"width",`${r}px`)}}})}preprocessElementStyle(e){const n=this;p(t.HOOKS.PREPROCESS_ELEMENT_STYLE).forEach(t=>{t(n.nodeContext,e)})}findAndProcessRepeatingElements(e,t){for(let n=e.firstChild;n;n=n.nextSibling){if(1!==n.nodeType)continue;const e={},i=t.getStyle(n,!1);if(this.computeStyle(this.nodeContext.vertical,"rtl"===this.nodeContext.direction,i,e),!this.processRepeatOnBreak(e))continue;if(this.nodeContext.formattingContext instanceof Dl&&!this.nodeContext.belongsTo(this.nodeContext.formattingContext))return;const o=this.nodeContext.parent,s=o&&o.formattingContext;return this.nodeContext.formattingContext=new Dl(s,this.nodeContext.sourceNode),void this.nodeContext.formattingContext.initializeRepetitiveElements(this.nodeContext.vertical)}}processRepeatOnBreak(e){let t=e["repeat-on-break"];return t!==Bt.none&&(t===Bt.auto&&(t=e.display===Bt.table_header_group?Bt.header:e.display===Bt.table_footer_group?Bt.footer:Bt.none),t&&t!==Bt.none)?t.toString():null}createTextNodeView(){const e=this,t=pi("createTextNodeView");return this.preprocessTextContent().then(()=>{const n=e.offsetInNode||0,i=Vr(e.nodeContext.preprocessedTextContent).substr(n);e.viewNode=document.createTextNode(i),t.finish(!0)}),t.result()}preprocessTextContent(){if(null!=this.nodeContext.preprocessedTextContent)return fi(!0);const e=this;let n,i=n=e.sourceNode.textContent;const o=pi("preprocessTextContent"),s=p(t.HOOKS.PREPROCESS_TEXT_CONTENT);let r=0;return o.loop(()=>r>=s.length?fi(!1):s[r++](e.nodeContext,i).thenAsync(e=>(i=e,fi(!0)))).then(()=>{e.nodeContext.preprocessedTextContent=function(e,t){return zr(e,t,0)}(n,i),o.finish(!0)}),o.result()}createNodeView(e,t){const n=this,i=pi("createNodeView");let o,s=!0;return 1==n.sourceNode.nodeType?o=n.createElementView(e,t):8==n.sourceNode.nodeType?(n.viewNode=null,o=fi(!0)):o=n.createTextNodeView(),o.then(e=>{if(s=e,n.nodeContext.viewNode=n.viewNode,n.viewNode){const e=n.nodeContext.parent?n.nodeContext.parent.viewNode:n.viewRoot;e&&e.appendChild(n.viewNode)}i.finish(s)}),i.result()}setCurrent(e,t,n){return this.nodeContext=e,e?(this.sourceNode=e.sourceNode,this.offsetInNode=e.offsetInNode):(this.sourceNode=null,this.offsetInNode=-1),this.viewNode=null,this.nodeContext?this.createNodeView(t,!!n):fi(!0)}processShadowContent(e){if(null==e.shadowContext||"content"!=e.sourceNode.localName||e.sourceNode.namespaceURI!=L.SHADOW)return e;const t=e.boxOffset,n=e.shadowContext,i=e.parent;let o,s,r;n.subShadow?(r=n.subShadow,o=n.root,s=n.type,s==la.ROOTLESS&&(o=o.firstChild)):(r=n.parentShadow,o=n.owner.firstChild,s=la.ROOTLESS);const a=e.sourceNode.nextSibling;if(a?(e.sourceNode=a,e.resetView()):e.shadowSibling?e=e.shadowSibling:o?e=null:(e=e.parent.modify()).after=!0,o){const n=new da(o,i,t);return n.shadowContext=r,n.shadowType=s,n.shadowSibling=e,n}return e.boxOffset=t,e}nextPositionInTree(e){let t=e.boxOffset+1;if(e.after){if(!e.parent)return null;if(e.shadowType!=la.ROOTED){const n=e.sourceNode.nextSibling;if(n)return(e=e.modify()).boxOffset=t,e.sourceNode=n,e.resetView(),this.processShadowContent(e)}return e.shadowSibling?((e=e.shadowSibling.modify()).boxOffset=t,e):((e=e.parent.modify()).boxOffset=t,e.after=!0,e)}{if(e.nodeShadow){let n=e.nodeShadow.root;if(e.nodeShadow.type==la.ROOTLESS&&(n=n.firstChild),n){const i=new da(n,e,t);return i.shadowContext=e.nodeShadow,i.shadowType=e.nodeShadow.type,this.processShadowContent(i)}}const n=e.sourceNode.firstChild;return n?this.processShadowContent(new da(n,e,t)):(1!=e.sourceNode.nodeType&&(t+=Vr(e.preprocessedTextContent).length-1-e.offsetInNode),(e=e.modify()).boxOffset=t,e.after=!0,e)}}isTransclusion(e,t,n){const i=$o(t,"hyperlink-processing");if(!i)return!1;const o=i.evaluate(this.context,"hyperlink-processing");return!!o&&o.toString()==n}nextInTree(e,t){let n=this.nextPositionInTree(e);if(!n||n.after)return fi(n);const i=pi("nextInTree");return this.setCurrent(n,!0,t).then(e=>{n.viewNode&&e||(n=n.modify(),n.after=!0,n.viewNode||(n.inline=!0)),this.dispatchEvent({type:"nextInTree",nodeContext:n}),i.finish(n)}),i.result()}addImageFetchers(e){if(e instanceof Lt){const t=e.values;for(let e=0;e<t.length;e++)this.addImageFetchers(t[e])}else if(e instanceof At){const t=e.url;this.page.fetchers.push(Pi(new Image,t))}}applyComputedStyles(e,t){const n=t["background-image"];n&&this.addImageFetchers(n);const i=t.position===Bt.relative;for(const n in t){if(Mu[n])continue;let o=t[n];o=o.visit(new yn(this.xmldoc.url,this.documentURLTransformer)),o.isNumeric()&&Pe(o.unit)&&(o=_t(o,this.context)),$r[n]||i&&Wr[n]?this.page.delayedItems.push(new Xr(e,n,o)):U(e,n,o.toString())}}applyPseudoelementStyle(e,t,n){if(e.after)return;const i=this.sourceNode;let o=(e.shadowContext?e.shadowContext.styler:this.styler).getStyle(i,!1);const s=Xo(o,"_pseudos");if(!s)return;if(o=s[t],!o)return;const r={};e.vertical=this.computeStyle(e.vertical,"rtl"===e.direction,o,r);const a=r.content;Ea(a)&&(a.visit(new wa(n,this.context,a,this.exprContentListener)),delete r.content),this.applyComputedStyles(n,r)}peelOff(e,t){const n=pi("peelOff"),i=e.firstPseudo;let o=e.offsetInNode;const s=e.after;if(t>0){const n=e.viewNode.textContent;e.viewNode.textContent=n.substr(0,t),o+=t}else if(!s&&e.viewNode&&0==o){const t=e.viewNode.parentNode;t&&t.removeChild(e.viewNode)}const r=e.boxOffset+t,a=[];for(;e.firstPseudo===i;)a.push(e),e=e.parent;let l=a.pop(),h=l.shadowSibling;const c=this;return n.loop(()=>{for(;a.length>0;){l=a.pop(),e=new da(l.sourceNode,e,r),0==a.length&&(e.offsetInNode=o,e.after=s),e.shadowType=l.shadowType,e.shadowContext=l.shadowContext,e.nodeShadow=l.nodeShadow,e.shadowSibling=l.shadowSibling?l.shadowSibling:h,h=null;const t=c.setCurrent(e,!1);if(t.isPending())return t}return fi(!1)}).then(()=>{n.finish(e)}),n.result()}createElement(e,t){return e==L.XHTML?this.document.createElement(t):this.document.createElementNS(e,t)}applyFootnoteStyle(e,t,n){const i={},o=Xo(this.footnoteStyle,"_pseudos");if(e=this.computeStyle(e,t,this.footnoteStyle,i),o&&o.before){const i={},s=this.createElement(L.XHTML,"span");gl(s,"before"),n.appendChild(s),this.computeStyle(e,t,o.before,i),delete i.content,this.applyComputedStyles(s,i)}return delete i.content,this.applyComputedStyles(n,i),e}processFragmentedBlockEdge(e){e&&e.walkUpBlocks(e=>{const t=e.inheritedProps["box-decoration-break"];if(!t||"slice"===t){const t=e.viewNode;e.vertical?(U(t,"padding-left","0"),U(t,"border-left","none"),U(t,"border-top-left-radius","0"),U(t,"border-bottom-left-radius","0")):(U(t,"padding-bottom","0"),U(t,"border-bottom","none"),U(t,"border-bottom-left-radius","0"),U(t,"border-bottom-right-radius","0"))}})}convertLengthToPx(e,t,n){const i=e.num,o=e.unit;if(function(e){switch(e.toLowerCase()){case"em":case"ex":case"rem":return!0;default:return!1}}(o)){let i=t;for(;i&&1!==i.nodeType;)i=i.parentNode;const o=parseFloat(n.getElementComputedStyle(i)["font-size"]);return this.context,es(e,o,this.context).num}{const t=this.context.queryUnitSize(o,!1);return t?i*t:e}}isSameNodePositionStep(e,t){if(e.shadowContext){if(!t.shadowContext)return!1;const n=1===e.node.nodeType?e.node:e.node.parentElement,i=1===t.node.nodeType?t.node:t.node.parentElement;return e.shadowContext.owner===t.shadowContext.owner&&fl(n)===fl(i)}return e.node===t.node}isSameNodePosition(e,t){return e.offsetInNode===t.offsetInNode&&e.after==t.after&&e.steps.length===t.steps.length&&e.steps.every((e,n)=>{const i=t.steps[n];return this.isSameNodePositionStep(e,i)})}isPseudoelement(e){return!!fl(e)}}_u.SVG_URL_ATTRIBUTES=["color-profile","clip-path","cursor","filter","marker","marker-start","marker-end","marker-mid","fill","stroke","mask"];const Bu={a:"a",sub:"sub",sup:"sup",table:"table",tr:"tr",td:"td",th:"th",code:"code",body:"div",p:"p",v:"p",date:"p",emphasis:"em",strong:"strong",style:"span",strikethrough:"del"},Mu={"box-decoration-break":!0,"float-min-wrap-block":!0,"float-reference":!0,"flow-into":!0,"flow-linger":!0,"flow-options":!0,"flow-priority":!0,"footnote-policy":!0,page:!0};class Uu{constructor(e){this.layoutBox=e.layoutBox,this.window=e.window}subtractOffsets(e,t){const n=t.left,i=t.top;return{left:e.left-n,top:e.top-i,right:e.right-n,bottom:e.bottom-i,width:e.width,height:e.height}}getRangeClientRects(e){const t=e.getClientRects(),n=this.layoutBox.getBoundingClientRect();return Array.from(t).map(e=>this.subtractOffsets(e,n))}getElementClientRect(e){const t=e.getBoundingClientRect(),n=this.layoutBox.getBoundingClientRect();return this.subtractOffsets(t,n)}getElementComputedStyle(e){return this.window.getComputedStyle(e,null)}}class zu{constructor(e,t,n,i,o){this.window=e,this.fontSize=t,this.document=e.document,this.root=n||this.document.body;let s=this.root.firstElementChild;s||(s=this.document.createElement("div"),s.setAttribute("data-vivliostyle-outer-zoom-box","true"),this.root.appendChild(s));let r=s.firstElementChild;r||(r=this.document.createElement("div"),r.setAttribute("data-vivliostyle-spread-container","true"),s.appendChild(r));let a=s.nextElementSibling;a||(a=this.document.createElement("div"),a.setAttribute("data-vivliostyle-layout-box","true"),this.root.appendChild(a)),this.outerZoomBox=s,this.contentContainer=r,this.layoutBox=a;const l=new Uu(this).getElementComputedStyle(this.root);this.width=i||parseFloat(l.width)||e.innerWidth,this.height=o||parseFloat(l.height)||e.innerHeight}resetZoom(){U(this.outerZoomBox,"width",""),U(this.outerZoomBox,"height",""),U(this.contentContainer,"width",""),U(this.contentContainer,"height",""),U(this.contentContainer,"transform","")}zoom(e,t,n){U(this.outerZoomBox,"width",`${e*n}px`),U(this.outerZoomBox,"height",`${t*n}px`),U(this.contentContainer,"width",`${e}px`),U(this.contentContainer,"height",`${t}px`),U(this.contentContainer,"transform",`scale(${n})`)}clear(){const e=this.root;for(;e.lastChild;)e.removeChild(e.lastChild)}}const Vu="data-adapt-eloff";class Hu{constructor(e,t,n){this.store=e,this.url=t,this.document=n,this.lang=null,this.totalOffset=-1,this.lastOffset=1,this.root=n.documentElement;let i=null,o=null;if(this.root.namespaceURI==L.XHTML){for(let e=this.root.firstChild;e;e=e.nextSibling){if(1!=e.nodeType)continue;const t=e;if(t.namespaceURI==L.XHTML)switch(t.localName){case"head":o=t;break;case"body":i=t}}this.lang=this.root.getAttribute("lang")}else if(this.root.namespaceURI==L.FB2){o=this.root;for(let e=this.root.firstChild;e;e=e.nextSibling){if(1!=e.nodeType)continue;const t=e;t.namespaceURI==L.FB2&&"body"==t.localName&&(i=t)}const e=this.doc().child("FictionBook").child("description").child("title-info").child("lang").textContent();e.length>0&&(this.lang=e[0])}else if(this.root.namespaceURI==L.SSE)for(let e=this.root.firstElementChild;e;e=e.nextElementSibling){const t=e.localName;"meta"===t?o=e:"body"===t&&(i=e)}this.body=i,this.head=o,this.last=this.root,this.last.setAttribute(Vu,"0")}doc(){return new Ku([this.document])}getElementOffset(e){const t=e.getAttribute(Vu);if(t)return parseInt(t,10);let n=this.lastOffset,i=this.last;for(;i!=e;){let e=i.firstChild;if(!e)for(;e=i.nextSibling,!e;)if(i=i.parentNode,null==i)throw new Error("Internal error");i=e,1==e.nodeType?(e.setAttribute(Vu,n.toString()),++n):n+=e.textContent.length}return this.lastOffset=n,this.last=e,n-1}getNodeOffset(e,t,n){let i=0,o=e,s=null;if(1==o.nodeType){if(!n)return this.getElementOffset(o)}else{if(i=t,s=o.previousSibling,!s)return o=o.parentNode,i+=1,this.getElementOffset(o)+i;o=s}for(;;){for(;o.lastChild;)o=o.lastChild;if(1==o.nodeType)break;if(i+=o.textContent.length,s=o.previousSibling,!s){o=o.parentNode;break}o=s}return i+=1,this.getElementOffset(o)+i}getTotalOffset(){return this.totalOffset<0&&(this.totalOffset=this.getNodeOffset(this.root,0,!0)),this.totalOffset}getNodeByOffset(e){let t;const n=this;let i=this.root;for(;;){if(t=this.getElementOffset(i),t>=e)return i;const o=i.children;if(!o)break;const s=Z(o.length,t=>{const i=o[t];return n.getElementOffset(i)>e});if(0==s)break;i=o[s-1]}let o=t+1,s=i,r=s.firstChild||s.nextSibling,a=null;for(;;){if(r){if(1==r.nodeType)break;if(s=r,a=s,o+=r.textContent.length,o>e)break}else if(s=s.parentNode,!s)break;r=s.nextSibling}return a||i}buildIdMap(e){const t=e.getAttribute("id");t&&!this.idMap[t]&&(this.idMap[t]=e);const n=e.getAttributeNS(L.XML,"id");n&&!this.idMap[n]&&(this.idMap[n]=e);for(let t=e.firstElementChild;t;t=t.nextElementSibling)this.buildIdMap(t)}getElement(e){const t=e.match(/([^#]*)#(.+)$/);if(!t||t[1]&&t[1]!=this.url)return null;const n=t[2];let i=this.document.getElementById(n);return!i&&this.document.getElementsByName&&(i=this.document.getElementsByName(n)[0]),i||(this.idMap||(this.idMap={},this.buildIdMap(this.document.documentElement)),i=this.idMap[n]),i}}var Gu;function $u(e,t,n){const i=n||new DOMParser;let o;try{o=i.parseFromString(e,t)}catch(e){}if(!o)return null;{const e=o.documentElement,t="parsererror";if(e.localName===t)return null;for(let n=e.firstElementChild;n;n=n.nextElementSibling)if(n.localName===t)return null}return o}function Wu(e,t){let n=e.responseXML;if(!n){const t=new DOMParser,i=e.responseText;if(i){const o=function(e){const t=e.contentType;if(t){const e=Object.keys(Gu);for(let n=0;n<e.length;n++)if(Gu[e[n]]===t)return t;if(t.match(/\+xml$/))return Gu.APPLICATION_XML}const n=e.url.match(/\.([^./]+)$/);if(n)switch(n[1]){case"html":case"htm":return Gu.TEXT_HTML;case"xhtml":case"xht":return Gu.APPLICATION_XHTML_XML;case"svg":case"svgz":return Gu.IMAGE_SVG_XML;case"opf":case"xml":return Gu.APPLICATION_XML}return null}(e);if(n=$u(i,o||Gu.APPLICATION_XML,t),n&&!o){const e=n.documentElement;"html"!==e.localName.toLowerCase()||e.namespaceURI?"svg"===e.localName.toLowerCase()&&n.contentType!==Gu.IMAGE_SVG_XML&&(n=$u(i,Gu.IMAGE_SVG_XML,t)):n=$u(i,Gu.TEXT_HTML,t)}n||(n=$u(i,Gu.TEXT_HTML,t))}}return fi(n?new Hu(t,e.url,n):null)}!function(e){e.TEXT_HTML="text/html",e.TEXT_XML="text/xml",e.APPLICATION_XML="application/xml",e.APPLICATION_XHTML_XML="application/xhtml_xml",e.IMAGE_SVG_XML="image/svg+xml"}(Gu||(Gu={}));class Xu{constructor(e){this.fn=e}check(e){return this.fn(e)}withAttribute(e,t){const n=this;return new Xu(i=>n.check(i)&&1==i.nodeType&&i.getAttribute(e)==t)}withChild(e,t){const n=this;return new Xu(i=>{if(!n.check(i))return!1;let o=new Ku([i]);return o=o.child(e),t&&(o=o.predicate(t)),o.size()>0})}}const ju=new Xu(e=>!0);class Ku{constructor(e){this.nodes=e}asArray(){return this.nodes}size(){return this.nodes.length}predicate(e){const t=[];for(const n of this.nodes)e.check(n)&&t.push(n);return new Ku(t)}forEachNode(e){const t=[],n=e=>{t.push(e)};for(let t=0;t<this.nodes.length;t++)e(this.nodes[t],n);return new Ku(t)}forEach(e){const t=[];for(let n=0;n<this.nodes.length;n++)t.push(e(this.nodes[n]));return t}forEachNonNull(e){const t=[];for(let n=0;n<this.nodes.length;n++){const i=e(this.nodes[n]);null!=i&&t.push(i)}return t}child(e){return this.forEachNode((t,n)=>{for(let i=t.firstChild;i;i=i.nextSibling)1==i.nodeType&&i.localName==e&&n(i)})}childElements(){return this.forEachNode((e,t)=>{for(let n=e.firstChild;n;n=n.nextSibling)1==n.nodeType&&t(n)})}attribute(e){return this.forEachNonNull(t=>1==t.nodeType?t.getAttribute(e):null)}textContent(){return this.forEach(e=>e.textContent)}}var Yu='@namespace html "http://www.w3.org/1999/xhtml";\n@namespace fb2 "http://www.gribuser.ru/xml/fictionbook/2.0";\n\nhtml|body,\nfb2|body {\n  hyphens: -epubx-expr(pref-hyphenate? "auto": "manual");\n}\n\n@-adapt-footnote-area {\n  display: block;\n  margin-block-start: 0.5em;\n  margin-block-end: 0.5em;\n}\n\n@-adapt-footnote-area ::before {\n  display: block;\n  border-block-start-width: 1px;\n  border-block-start-style: solid;\n  border-block-start-color: black;\n  margin-block-end: 0.4em;\n  margin-inline-start: 0;\n  margin-inline-end: 60%;\n}\n\n/* default page master */\n@-epubx-page-master :background-host {\n  @-epubx-partition :layout-host {\n    -epubx-flow-from: body;\n    top: -epubx-expr(header.margin-bottom-edge);\n    bottom: -epubx-expr(page-height - footer.margin-top-edge);\n    left: 0px;\n    right: 0px;\n    column-width: 25em;\n  }\n  @-epubx-partition footer :oeb-page-foot {\n    writing-mode: horizontal-tb;\n    -epubx-flow-from: oeb-page-foot;\n    bottom: 0px;\n    left: 0px;\n    right: 0px;\n  }\n  @-epubx-partition header :oeb-page-head {\n    writing-mode: horizontal-tb;\n    -epubx-flow-from: oeb-page-head;\n    top: 0px;\n    left: 0px;\n    right: 0px;\n  }\n}\n\n@page {\n  @top-left-corner {\n    text-align: right;\n    vertical-align: middle;\n  }\n  @top-left {\n    text-align: left;\n    vertical-align: middle;\n  }\n  @top-center {\n    text-align: center;\n    vertical-align: middle;\n  }\n  @top-right {\n    text-align: right;\n    vertical-align: middle;\n  }\n  @top-right-corner {\n    text-align: left;\n    vertical-align: middle;\n  }\n  @left-top {\n    text-align: center;\n    vertical-align: top;\n  }\n  @left-middle {\n    text-align: center;\n    vertical-align: middle;\n  }\n  @left-bottom {\n    text-align: center;\n    vertical-align: bottom;\n  }\n  @right-top {\n    text-align: center;\n    vertical-align: top;\n  }\n  @right-middle {\n    text-align: center;\n    vertical-align: middle;\n  }\n  @right-bottom {\n    text-align: center;\n    vertical-align: bottom;\n  }\n  @bottom-left-corner {\n    text-align: right;\n    vertical-align: middle;\n  }\n  @bottom-left {\n    text-align: left;\n    vertical-align: middle;\n  }\n  @bottom-center {\n    text-align: center;\n    vertical-align: middle;\n  }\n  @bottom-right {\n    text-align: right;\n    vertical-align: middle;\n  }\n  @bottom-right-corner {\n    text-align: left;\n    vertical-align: middle;\n  }\n}\n\n@media print {\n  @page {\n    margin: 10%;\n  }\n}\n';const qu=new xi(()=>{const e=pi("uaStylesheetBase"),t=uc(),n=O("user-agent-base.css",P),i=new Qs(null,null,null,null,null,t,!0);return i.startStylesheet(Hi.USER_AGENT),function(e){Zs=e}(i.cascade),fo('@namespace html "http://www.w3.org/1999/xhtml";\n\nhtml|html,\nhtml|address,\nhtml|blockquote,\nhtml|body,\nhtml|dd,\nhtml|div,\nhtml|dl,\nhtml|dt,\nhtml|fieldset,\nhtml|form,\nhtml|frame,\nhtml|frameset,\nhtml|h1,\nhtml|h2,\nhtml|h3,\nhtml|h4,\nhtml|h5,\nhtml|h6,\nhtml|noframes,\nhtml|ol,\nhtml|p,\nhtml|ul,\nhtml|center,\nhtml|dir,\nhtml|hr,\nhtml|menu,\nhtml|pre,\nhtml|article,\nhtml|section,\nhtml|nav,\nhtml|aside,\nhtml|hgroup,\nhtml|footer,\nhtml|header,\nhtml|figure,\nhtml|figcaption,\nhtml|main {\n  display: block;\n  unicode-bidi: normal;\n}\nhtml|li {\n  display: list-item;\n}\nhtml|head {\n  display: none !important;\n}\nhtml|table {\n  display: table;\n}\nhtml|tr {\n  display: table-row;\n}\nhtml|thead {\n  display: table-header-group;\n  break-after: avoid;\n}\nhtml|tbody {\n  display: table-row-group;\n}\nhtml|tfoot {\n  display: table-footer-group;\n  break-before: avoid;\n}\nhtml|col {\n  display: table-column;\n}\nhtml|colgroup {\n  display: table-column-group;\n}\nhtml|td,\nhtml|th {\n  display: table-cell;\n}\nhtml|caption {\n  display: table-caption;\n  text-align: center;\n}\nhtml|th {\n  font-weight: bolder;\n  text-align: center;\n}\nhtml|script {\n  display: none;\n}\nhtml|body {\n  margin: 8px;\n}\nhtml|h1 {\n  font-size: 2em;\n  margin-block-start: 0.67em;\n  margin-block-end: 0.67em;\n  margin-inline-start: 0em;\n  margin-inline-end: 0em;\n}\nhtml|h2 {\n  font-size: 1.5em;\n  margin-block-start: 0.75em;\n  margin-block-end: 0.75em;\n  margin-inline-start: 0em;\n  margin-inline-end: 0em;\n}\nhtml|h3 {\n  font-size: 1.17em;\n  margin-block-start: 0.83em;\n  margin-block-end: 0.83em;\n  margin-inline-start: 0em;\n  margin-inline-end: 0em;\n}\nhtml|h4,\nhtml|p,\nhtml|blockquote,\nhtml|ul,\nhtml|fieldset,\nhtml|form,\nhtml|ol,\nhtml|dl,\nhtml|dir,\nhtml|menu,\nhtml|h5,\nhtml|h6 {\n  margin-block-start: 1em;\n  margin-block-end: 1em;\n  margin-inline-start: 0em;\n  margin-inline-end: 0em;\n}\nhtml|h5 {\n  font-size: 0.83em;\n}\nhtml|h6 {\n  font-size: 0.75em;\n}\nhtml|h1,\nhtml|h2,\nhtml|h3,\nhtml|h4,\nhtml|h5,\nhtml|h6,\nhtml|b,\nhtml|strong {\n  font-weight: bolder;\n}\nhtml|h1,\nhtml|h2,\nhtml|h3,\nhtml|h4,\nhtml|h5,\nhtml|h6 {\n  break-after: avoid;\n}\nhtml|blockquote {\n  margin-block-start: 0px;\n  margin-block-end: 0px;\n  margin-inline-start: 40px;\n  margin-inline-end: 40px;\n}\nhtml|i,\nhtml|cite,\nhtml|em,\nhtml|var,\nhtml|address {\n  font-style: italic;\n}\nhtml|pre,\nhtml|tt,\nhtml|code,\nhtml|kbd,\nhtml|samp {\n  font-family: monospace;\n}\nhtml|pre {\n  white-space: pre;\n}\nhtml|button,\nhtml|textarea,\nhtml|input,\nhtml|select {\n  display: inline-block;\n}\nhtml|big {\n  font-size: 1.17em;\n}\nhtml|small,\nhtml|sub,\nhtml|sup {\n  font-size: 0.83em;\n}\nhtml|sub {\n  vertical-align: sub;\n}\nhtml|sup {\n  vertical-align: super;\n}\nhtml|table {\n  border-spacing: 2px;\n}\nhtml|thead,\nhtml|tbody,\nhtml|tfoot {\n  vertical-align: middle;\n}\n/* for XHTML tables without tbody */\nhtml|table > html|tr {\n  vertical-align: middle;\n}\nhtml|td,\nhtml|th {\n  vertical-align: inherit;\n}\nhtml|s,\nhtml|strike,\nhtml|del {\n  text-decoration: line-through;\n}\nhtml|hr {\n  border: 1px inset;\n}\nhtml|ol,\nhtml|ul,\nhtml|dir,\nhtml|menu,\nhtml|dd {\n  margin: 0px;\n  margin-inline-start: 40px;\n}\nhtml|ol {\n  list-style-type: decimal;\n}\nhtml|ol html|ul,\nhtml|ul html|ol,\nhtml|ul html|ul,\nhtml|ol html|ol {\n  margin-top: 0;\n  margin-bottom: 0;\n}\nhtml|u,\nhtml|ins {\n  text-decoration: underline;\n}\nhtml|center {\n  text-align: center;\n}\nhtml|q:before {\n  content: open-quote;\n}\nhtml|q:after {\n  content: close-quote;\n}\n\nhtml|audio,\nhtml|video {\n  break-inside: avoid;\n}\n\nhtml|ruby {\n  display: ruby;\n}\nhtml|rp {\n  display: none;\n}\nhtml|rbc {\n  display: ruby-base-container;\n}\nhtml|rtc {\n  display: ruby-text-container;\n}\nhtml|rb {\n  display: ruby-base;\n  white-space: nowrap;\n}\nhtml|rt {\n  display: ruby-text;\n}\nhtml|ruby,\nhtml|rb,\nhtml|rt,\nhtml|rbc,\nhtml|rtc {\n  unicode-bidi: isolate;\n}\n\nhtml|rtc,\nhtml|rt {\n  font-variant-east-asian: ruby;\n  text-emphasis: none;\n  white-space: nowrap;\n  line-height: 1;\n}\n\nhtml|rtc:lang(zh),\nhtml|rt:lang(zh) {\n  ruby-align: center;\n}\n\nhtml|rtc,\nhtml|rt {\n  font-size: 50%;\n}\n\nhtml|rtc:lang(zh-TW),\nhtml|rt:lang(zh-TW) {\n  font-size: 30%;\n}\n\nhtml|rtc > html|rt,\nhtml|rtc > html|rt:lang(zh-TW) {\n  font-size: 100%;\n}\n\n/* Bidi settings */\nhtml|bdo[dir="ltr"] {\n  direction: ltr;\n  unicode-bidi: bidi-override;\n}\nhtml|bdo[dir="rtl"] {\n  direction: rtl;\n  unicode-bidi: bidi-override;\n}\nhtml|*[dir="ltr"] {\n  direction: ltr;\n  unicode-bidi: embed;\n}\nhtml|*[dir="rtl"] {\n  direction: rtl;\n  unicode-bidi: embed;\n}\n\n/*------------------ epub-specific ---------------------*/\n\n@namespace epub "http://www.idpf.org/2007/ops";\n\nhtml|a[epub|type="noteref"] {\n  font-size: 0.75em;\n  vertical-align: super;\n  line-height: 0.01;\n}\n\nhtml|a[epub|type="noteref"]:href-epub-type(footnote) {\n  -adapt-template: url(user-agent.xml#footnote);\n  text-decoration: none;\n}\n\nhtml|aside[epub|type="footnote"] {\n  display: none;\n}\n\nhtml|aside[epub|type="footnote"]:footnote-content {\n  display: block;\n  margin: 0.25em;\n  font-size: 1.2em;\n  line-height: 1.2;\n}\n\nepub|trigger {\n  display: none;\n}\n\nepub|switch {\n  display: inline;\n}\n\nepub|default {\n  display: inline;\n}\n\nepub|case {\n  display: none;\n}\n\nepub|case[required-namespace::supported] {\n  display: inline;\n}\n\nepub|case[required-namespace::supported] ~ epub|case {\n  display: none;\n}\n\nepub|case[required-namespace::supported] ~ epub|default {\n  display: none;\n}\n\n/*--------------- ncx and toc ----------------------*/\n\n@namespace ncx "http://www.daisy.org/z3986/2005/ncx/";\n\nncx|ncx {\n  display: block;\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n\nncx|content {\n  display: none;\n}\n\nbody > * {\n  -adapt-behavior: body-child;\n}\n\n[role="doc-toc"],\n[role="directory"],\nnav,\n.toc,\n#toc,\n#table-of-contents,\n#contents {\n  -adapt-behavior: toc-root;\n}\n\n[role="doc-toc"] a,\n[role="directory"] a,\nnav a,\n.toc a,\n#toc a,\nncx|navLabel {\n  -adapt-behavior: toc-node-anchor;\n}\n\n[role="doc-toc"] li,\n[role="directory"] li,\nnav li,\n.toc li,\n#toc li,\nncx|navPoint {\n  -adapt-behavior: toc-node;\n}\n\n[role="doc-toc"] li > *:first-child,\n[role="directory"] li > *:first-child,\nnav li > *:first-child,\n.toc li > *:first-child,\n#toc li > *:first-child {\n  -adapt-behavior: toc-node-first-child;\n}\n\n[role="doc-toc"] ol,\n[role="directory"] ol,\nnav ol,\n.toc ol,\n#toc ol,\n[role="doc-toc"] ul,\n[role="directory"] ul,\nnav ul,\n.toc ul,\n#toc ul,\nol[role="doc-toc"],\nol[role="directory"],\nol.toc,\nol#toc,\nul[role="doc-toc"],\nul[role="directory"],\nul.toc,\nul#toc {\n  -adapt-behavior: toc-container;\n}\n\n/*---------------- fb2 ---------------------*/\n\n@namespace fb2 "http://www.gribuser.ru/xml/fictionbook/2.0";\n\nfb2|FictionBook {\n  display: block;\n}\n\nfb2|body {\n  font-family: serif;\n  margin: 8px;\n  column-width: 25em;\n}\n\nfb2|a {\n  line-height: 0.1;\n  vertical-align: super;\n  font-size: 0.7em;\n}\n\nfb2|sub {\n  line-height: 0.1;\n  font-size: 0.7em;\n}\n\nfb2|sup {\n  line-height: 0.1;\n  font-size: 0.7em;\n}\n\nfb2|table {\n  display: table;\n  font-size: 0.8em;\n  font-family: sans-serif;\n  margin: 0.5em;\n  border-collapse: collapse;\n  border: 1px solid black;\n}\n\nfb2|td {\n  border: 1px solid black;\n  padding: 0.3em;\n}\n\nfb2|th {\n  font-weight: bold;\n  text-align: center;\n  border: 1px solid black;\n  background-color: #cee;\n  padding: 0.3em;\n}\n\nfb2|code {\n  font-family: monospace;\n}\n\nfb2|p {\n  display: block;\n  margin: 0px;\n  text-indent: 1.5em;\n  text-align: justify;\n}\n\nfb2|title fb2|p {\n  margin: 0px 0px 0.5em 0px;\n  text-indent: 0px;\n  text-align: inherit;\n}\n\nfb2|title {\n  font-size: 2.2em;\n  font-weight: bold;\n  break-inside: avoid;\n  break-after: avoid;\n  text-align: center;\n  margin: 1em 0px 0.5em 0px;\n  display: block;\n}\n\nfb2|section {\n  display: block;\n}\n\nfb2|section fb2|title {\n  font-size: 1.8em;\n  text-align: center;\n  margin: 1em 0px 0.5em 0px;\n}\n\nfb2|section fb2|section fb2|title {\n  font-size: 1.5em;\n  text-align: left;\n  margin: 1em 0px 0.5em 1.5625em;\n}\n\nfb2|section fb2|section fb2|section fb2|title {\n  font-size: 1.3em;\n  text-align: left;\n  margin: 1em 0px 0.5em 1.923em;\n}\n\nfb2|section fb2|section fb2|section fb2|section fb2|title {\n  font-size: 1.2em;\n  text-align: left;\n  margin: 1em 0px 0.5em 2.083em;\n}\n\nfb2|section fb2|section fb2|section fb2|section fb2|section fb2|title {\n  font-size: 1.1em;\n  text-align: left;\n  margin: 1em 0px 0.5em 2.272em;\n}\n\nfb2|section\n  fb2|section\n  fb2|section\n  fb2|section\n  fb2|section\n  fb2|section\n  fb2|title {\n  text-align: left;\n  margin: 1em 0px 0.5em 2.5em;\n}\n\nfb2|epigraph {\n  text-align: left;\n  font-style: italic;\n  margin: 1em 1em 2em 30%;\n  display: block;\n}\n\nfb2|image {\n  text-align: center;\n  padding: 3px;\n}\n\nfb2|image::inner {\n  max-width: 95%;\n}\n\nfb2|image::after {\n  display: block;\n  content: attr(title);\n}\n\nfb2|v {\n  text-indent: -1em;\n  padding-left: 1em;\n  margin: 0px;\n  display: block;\n}\nfb2|poem {\n  margin: 0.5em 0px 0.5em 2em;\n  display: block;\n}\nfb2|date {\n  margin: 0.5em 0px 0.5em 50%;\n  font-style: italic;\n  display: block;\n}\nfb2|stanza {\n  margin: 0.5em 0px;\n  break-inside: avoid;\n  display: block;\n}\nfb2|empty-line {\n  height: 1em;\n  margin: 0px;\n  display: block;\n}\nfb2|cite {\n  margin: 0.5em 0px 0.5em 1em;\n  font-size: 0.95em;\n  display: block;\n}\nfb2|subtitle {\n  text-indent: 0px;\n  text-align: center;\n  font-style: italic;\n  font-weight: bold;\n  margin: 0.5em 2em;\n  break-inside: avoid;\n  break-after: avoid;\n  display: block;\n}\nfb2|annotation {\n  margin: 1em 0px 1em 2em;\n  text-indent: 0px;\n  font-style: italic;\n  display: block;\n}\nfb2|text-author {\n  text-indent: 0px;\n  margin: 0.2em 0px 0px 3em;\n  display: block;\n}\nfb2|emphasis {\n  font-style: italic;\n}\nfb2|strong {\n  font-weight: bold;\n}\nfb2|strikethrough {\n  text-decoration: line-through;\n}\nfb2|*.italic {\n  font-style: italic;\n}\nfb2|*.bold {\n  font-weight: bold;\n}\n\nfb2|binary,\nfb2|description,\nfb2|stylesheet {\n  display: none;\n}\n\nfb2|a[type="note"] {\n  font-size: 0.75em;\n  vertical-align: super;\n  line-height: 0.01;\n  text-decoration: none;\n  -adapt-template: url(user-agent.xml#footnote);\n}\n\nfb2|body[name="notes"] {\n  display: none;\n}\n\nfb2|body[name="notes"] fb2|title {\n  display: inline;\n  vertical-align: super;\n  line-height: 0.01;\n  text-align: left;\n  font-size: 0.75em;\n  font-weight: bold;\n  margin: 0px;\n}\n\nfb2|body[name="notes"] fb2|p {\n  text-indent: 0px;\n  display: inline; /* for now */\n}\n\nfb2|body[name="notes"] fb2|p + fb2|p {\n  display: block;\n}\n\nfb2|body[name="notes"] fb2|section {\n  text-indent: 0px;\n  line-height: 1.2;\n  font-size: 1.2em;\n}\n',i,n,null,null).thenFinish(e),e.result()},"uaStylesheetBaseFetcher");class Zu{constructor(e,t,n,i,o,s,r,a,l,h){this.store=e,this.rootScope=t,this.pageScope=n,this.cascade=i,this.rootBox=o,this.fontFaces=s,this.footnoteProps=r,this.flowProps=a,this.viewportProps=l,this.pageProps=h,this.fontDeobfuscator=e.fontDeobfuscator,this.validatorSet=e.validatorSet,this.pageScope.defineBuiltIn("has-content",(function(e){e=e;const t=this.currentLayoutPosition,n=t.firstFlowChunkOfFlow(e);return this.matchPageSide(t.startSideOfFlow(e))&&t.hasContent(e,this.lookupOffset)&&!!n&&!this.flowChunkIsAfterParentFlowForcedBreak(n)})),this.pageScope.defineName("page-number",new it(this.pageScope,(function(){return this.pageNumberOffset+this.currentLayoutPosition.page}),"page-number"))}sizeViewport(e,t,n,i){if(this.viewportProps.length){const o=new Ae(this.rootScope,e,t,n),s=function(e,t){const n={};for(let i=0;i<t.length;i++)Zo(e,n,t[i],0,null,null,null);return n}(o,this.viewportProps),r=s.width,a=s.height,l=s["text-zoom"];let h=1;if(r&&a||l){const s=Ie.em;if((l?l.evaluate(o,"text-zoom"):null)===Bt.scale&&(h=s/n,n=s,e*=h,t*=h),r&&a){const e=Dt(r.evaluate(o,"width"),o),t=Dt(a.evaluate(o,"height"),o);if(e>0&&t>0)return{width:i&&i.spreadView?2*(e+i.pageBorder):e,height:t,fontSize:n}}}}return{width:e,height:t,fontSize:n}}}class Qu extends Ae{constructor(e,t,n,i,o,s,r,a,l,h,c,u){super(e.rootScope,i.width,i.height,i.fontSize),this.style=e,this.xmldoc=t,this.viewport=i,this.clientLayout=o,this.fontMapper=s,this.customRenderer=r,this.fallbackMap=a,this.pageNumberOffset=l,this.documentURLTransformer=h,this.counterStore=c,this.primaryFlows={body:!0},this.rootPageBoxInstance=null,this.styler=null,this.stylerMap=null,this.currentLayoutPosition=null,this.layoutPositionAtPageStart=null,this.lookupOffset=0,this.pageBoxInstances={},this.pageManager=null,this.pageBreaks={},this.pageProgression=null,this.pageSheetSize={},this.pageSheetHeight=0,this.pageSheetWidth=0,this.lang=t.lang||n,this.faces=new bc(this.style.fontDeobfuscator),this.rootPageFloatLayoutContext=new xa(null,null,null,null,null,null,null),this.pageProgression=u||null;for(const t in e.flowProps){const n=$o(e.flowProps[t],"flow-consume");n&&(n.evaluate(this,"flow-consume")==Bt.all?this.primaryFlows[t]=!0:delete this.primaryFlows[t])}}init(){const e=this,t=pi("StyleInstance.init"),n=e.counterStore.createCounterListener(e.xmldoc.url),i=e.counterStore.createCounterResolver(e.xmldoc.url,e.style.rootScope,e.style.pageScope);e.styler=new Ah(e.xmldoc,e.style.cascade,e.style.rootScope,e,this.primaryFlows,e.style.validatorSet,n,i),i.setStyler(e.styler),e.styler.resetFlowChunkStream(e),e.stylerMap={},e.stylerMap[e.xmldoc.url]=e.styler;const o=e.styler.getTopContainerStyle();e.pageProgression||(e.pageProgression=Xc(o));const s=this.style.rootBox;this.rootPageBoxInstance=new Mc(s);const r=this.style.cascade.createInstance(e,n,i,this.lang);this.rootPageBoxInstance.applyCascadeAndInit(r,o),this.rootPageBoxInstance.resolveAutoSizing(e),this.pageManager=new yu(r,this.style.pageScope,this.rootPageBoxInstance,e,o);const a=[];for(const t of e.style.fontFaces){if(t.condition&&!t.condition.evaluate(e))continue;const n=gc(t.properties,e),i=new mc(n);a.push(i)}e.fontMapper.findOrLoadFonts(a,e.faces).thenFinish(t);const l=e.style.pageProps;return Object.keys(l).forEach(e=>{const t=Jc(Qc(l[e]),this);this.pageSheetSize[e]={width:t.pageWidth+2*t.cropOffset,height:t.pageHeight+2*t.cropOffset}}),t.result()}getStylerForDoc(e){let t=this.stylerMap[e.url];if(!t){const n=this.style.store.getStyleForDoc(e),i=new Ae(n.rootScope,this.pageWidth(),this.pageHeight(),this.initialFontSize),o=this.counterStore.createCounterListener(e.url),s=this.counterStore.createCounterResolver(e.url,n.rootScope,n.pageScope);t=new Ah(e,n.cascade,n.rootScope,i,this.primaryFlows,n.validatorSet,o,s),this.stylerMap[e.url]=t}return t}registerInstance(e,t){this.pageBoxInstances[e]=t}lookupInstance(e){return this.pageBoxInstances[e]}encounteredFlowChunk(e,t){const n=this.currentLayoutPosition;if(n){n.flows[e.flowName]?t=n.flows[e.flowName]:n.flows[e.flowName]=t;let i=n.flowPositions[e.flowName];i||(i=new ga,n.flowPositions[e.flowName]=i);const o=function(e){return{steps:[{node:e,shadowType:la.NONE,shadowContext:null,nodeShadow:null,shadowSibling:null,formattingContext:null,fragmentIndex:0}],offsetInNode:0,after:!1,preprocessedTextContent:null}}(e.element),s=new pa(o),r=new fa(s,e);i.positions.push(r)}}getConsumedOffset(e){let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.positions.length;n++){const i=e.positions[n].chunkPosition.primary;let o=i.steps[0].node,s=i.offsetInNode,r=i.after,a=0;for(;o.ownerDocument!=this.xmldoc.document;)a++,o=i.steps[a].node,r=!1,s=0;const l=this.xmldoc.getNodeOffset(o,s,r);l<t&&(t=l)}return t}getPosition(e,t){if(!e)return 0;let n=Number.POSITIVE_INFINITY;for(const i in this.primaryFlows){let o=e.flowPositions[i];if(t||o&&0!=o.positions.length||!this.currentLayoutPosition||(this.styler.styleUntilFlowIsReached(i),o=this.currentLayoutPosition.flowPositions[i],e!=this.currentLayoutPosition&&o&&(o=o.clone(),e.flowPositions[i]=o)),o){const e=this.getConsumedOffset(o);e<n&&(n=e)}}return n}dumpLocation(e){h.debug("Location - page",this.currentLayoutPosition.page),h.debug("  current:",e),h.debug("  lookup:",this.lookupOffset);for(const e in this.currentLayoutPosition.flowPositions){const t=this.currentLayoutPosition.flowPositions[e];for(const n of t.positions)h.debug("  Chunk",`${e}:`,n.flowChunk.startOffset)}}matchPageSide(e){switch(e){case"left":case"right":case"recto":case"verso":return new tt(this.style.pageScope,`${e}-page`).evaluate(this);default:return!0}}updateStartSide(e){for(const t in e.flowPositions){const n=e.flowPositions[t];if(n&&n.positions.length>0){const e=n.positions[0].flowChunk;if(this.getConsumedOffset(n)===e.startOffset){const e=n.positions[0].flowChunk.breakBefore,t=Ua(n.startSide);n.startSide=Ma(Ba(t,e))}}}}selectPageMaster(e){const t=this,n=this.currentLayoutPosition,i=this.getPosition(n);if(i==Number.POSITIVE_INFINITY)return null;const o=this.rootPageBoxInstance.children;let s;for(let r=0;r<o.length;r++){if(s=o[r],s.pageBox.pseudoName===hu)continue;let a=1;const l=s.getProp(t,"utilization");l&&l.isNum()&&(a=l.num);const h=t.queryUnitSize("em",!1),c=t.pageWidth()*t.pageHeight(),u=Math.ceil(a*c/(h*h));this.lookupOffset=this.styler.styleUntil(i,u),this.updateStartSide(n),this.layoutPositionAtPageStart=n.clone(),this.initLingering(),t.clearScope(this.style.pageScope);const d=s.getProp(t,"enabled");if(!d||d===Bt._true)return this.pageManager.getPageRulePageMaster(s,e)}throw new Error("No enabled page masters")}flowChunkIsAfterParentFlowForcedBreak(e){const t=this.layoutPositionAtPageStart.flows,n=t[e.flowName].parentFlowName;if(n){const i=e.startOffset,o=t[n].forcedBreakOffsets;if(!o.length||i<o[0])return!1;const s=Z(o.length,e=>o[e]>i)-1,r=o[s],a=this.layoutPositionAtPageStart.flowPositions[n],l=this.getConsumedOffset(a);return!(r<l)&&(l<r||!this.matchPageSide(a.startSide))}return!1}setFormattingContextToColumn(e,t){const n=this.currentLayoutPosition.flows[t];n.formattingContext||(n.formattingContext=new il(null)),e.flowRootFormattingContext=n.formattingContext}layoutDeferredPageFloats(e){const t=e.pageFloatLayoutContext,n=t.getDeferredPageFloatContinuations(),i=pi("layoutDeferredPageFloats");let o=!1,s=0;return i.loopWithFrame(i=>{if(s===n.length)return void i.breakLoop();const r=n[s++],a=r.float,l=(new Pa).findByFloat(a),h=l.findPageFloatFragment(a,t);if(!h||!h.hasFloat(a))return t.isForbidden(a)||t.hasPrecedingFloatsDeferredToNext(a)?(t.deferPageFloat(r),void i.breakLoop()):void e.layoutPageFloatInner(r,l,null,h).then(e=>{if(!e)return void i.breakLoop();const n=t.parent.isInvalidated();n?i.breakLoop():(t.isInvalidated()&&!n&&(o=!0,t.validate()),i.continueLoop())});i.continueLoop()}).then(()=>{o&&t.invalidate(),i.finish(!0)}),i.result()}getLastAfterPositionIfDeferredFloatsExists(e,t){if(e.pageFloatLayoutContext.getPageFloatContinuationsDeferredToNext().length>0){if(e.lastAfterPosition){let n;return t?(n=t.clone(),n.primary=e.lastAfterPosition):n=new pa(e.lastAfterPosition),n}return null}return null}layoutColumn(e,t){const n=this.currentLayoutPosition.flowPositions[t];if(!n||!this.matchPageSide(n.startSide))return fi(!0);n.startSide="any",this.setFormattingContextToColumn(e,t),e.init(),this.primaryFlows[t]&&e.bands.length>0&&(e.forceNonfitting=!1);const i=this,o=pi("layoutColumn");return this.layoutDeferredPageFloats(e).then(()=>{if(e.pageFloatLayoutContext.isInvalidated())return void o.finish(!0);const s=[],r=[];let a=!0;o.loopWithFrame(o=>{if(e.pageFloatLayoutContext.hasContinuingFloatFragmentsInFlow(t))o.breakLoop();else{for(;n.positions.length-r.length>0;){let t=0;for(;r.includes(t);)t++;let l=n.positions[t];if(l.flowChunk.startOffset>i.lookupOffset||i.flowChunkIsAfterParentFlowForcedBreak(l.flowChunk))break;for(let e=t+1;e<n.positions.length;e++){if(r.includes(e))continue;const o=n.positions[e];if(o.flowChunk.startOffset>i.lookupOffset||i.flowChunkIsAfterParentFlowForcedBreak(o.flowChunk))break;o.flowChunk.isBetter(l.flowChunk)&&(l=o,t=e)}const h=l.flowChunk;let c=!0;if(e.layout(l.chunkPosition,a,n.breakAfter).then(u=>{if(e.pageFloatLayoutContext.isInvalidated())o.breakLoop();else{if(a=!1,l.flowChunk.repeated&&(null===u||h.exclusive)&&s.push(t),h.exclusive)return r.push(t),void o.breakLoop();{const a=!!u||!!e.pageBreakType,h=i.getLastAfterPositionIfDeferredFloatsExists(e,u);if(e.pageBreakType&&h?(l.chunkPosition=h,n.breakAfter=e.pageBreakType,e.pageBreakType=null):(r.push(t),(u||h)&&(l.chunkPosition=u||h,s.push(t)),e.pageBreakType&&(n.startSide=Ma(e.pageBreakType))),a)return void o.breakLoop()}e.forceNonfitting=!1,c?c=!1:o.continueLoop()}}),c)return void(c=!1)}o.breakLoop()}}).then(()=>{if(!e.pageFloatLayoutContext.isInvalidated()){n.positions=n.positions.filter((e,t)=>s.includes(t)||!r.includes(t)),"column"===n.breakAfter&&(n.breakAfter=null),e.saveDistanceToBlockEndFloats();const t=e.pageFloatLayoutContext.getMaxReachedAfterEdge();e.updateMaxReachedAfterEdge(t)}o.finish(!0)})}),o.result()}createLayoutConstraint(e){const t=this.currentLayoutPosition.page-1,n=this.counterStore.createLayoutConstraint(t);return new Cl([n].concat(e.getLayoutConstraints()))}createAndLayoutColumn(e,t,n,i,o,s,r,a,l,h,c,u,d,p){const f=this,g=e.vertical?e.isAutoWidth&&e.isRightDependentOnAutoWidth:e.isAutoHeight&&e.isTopDependentOnAutoHeight,m=o.element,b=new xa(a,ya.COLUMN,null,r,null,null,null),w=f.currentLayoutPosition.clone(),E=pi("createAndLayoutColumn");let y;return E.loopWithFrame(e=>{const E=f.createLayoutConstraint(b);if(l>1){const e=f.viewport.document.createElement("div");if(U(e,"position","absolute"),m.appendChild(e),y=new Il(e,d,f.clientLayout,E,b),y.forceNonfitting=p,y.vertical=o.vertical,y.snapHeight=o.snapHeight,y.snapWidth=o.snapWidth,o.vertical){const e=s*(c+h)+o.paddingTop;y.setHorizontalPosition(o.paddingLeft,o.width),y.setVerticalPosition(e,c)}else{const e=s*(c+h)+o.paddingLeft;y.setVerticalPosition(o.paddingTop,o.height),y.setHorizontalPosition(e,c)}y.originX=t,y.originY=n}else y=new Il(m,d,f.clientLayout,E,b),y.copyFrom(o);y.exclusions=g?[]:i.concat(),y.innerShape=u,b.setContainer(y),y.width>=0?f.layoutColumn(y,r).then(()=>{b.isInvalidated()||b.finish(),y.pageFloatLayoutContext.isInvalidated()&&!a.isInvalidated()?(y.pageFloatLayoutContext.validate(),f.currentLayoutPosition=w.clone(),y.element!==m&&m.removeChild(y.element),e.continueLoop()):e.breakLoop()}):(b.finish(),e.breakLoop())}).then(()=>{E.finish(y)}),E.result()}setPagePageFloatLayoutContextContainer(e,t,n){(t instanceof wu||t instanceof Uc&&!(t instanceof fu))&&e.setContainer(n)}getRegionPageFloatLayoutContext(e,t,n,i){const o=t.getProp(this,"writing-mode")||null,s=t.getProp(this,"direction")||null;return new xa(e,ya.REGION,n,i,null,o,s)}layoutFlowColumnsWithBalancing(e,t,n,i,o,s,r,a,l){const h=this,c=h.currentLayoutPosition.clone(),u=h.getRegionPageFloatLayoutContext(s,t,r,a);let d=!0;function p(){return h.currentLayoutPosition=c.clone(),h.layoutFlowColumns(e,t,n,i,o,s,u,r,a,l,d).thenAsync(e=>fi(e?{columns:e,position:h.currentLayoutPosition}:null))}return p().thenAsync(e=>{if(!e)return fi(null);if(l<=1)return fi(e.columns);const n=t.getProp(h,"column-fill")||Bt.balance,i=h.currentLayoutPosition.flowPositions[a],o=function(e,t,n,i,o,s,r){if(t===Bt.auto)return null;{const a=0===r.positions.length,l=s[s.length-1],h=!(!l||!l.pageBreakType);return a||h?new Nh(n,i,o,e):t===Bt.balance_all?new Ch(n,i,o):null}}(l,n,p,u,r,e.columns,i);return o?(d=!1,s.lock(),u.lock(),o.balanceColumns(e).thenAsync(e=>(s.unlock(),s.validate(),u.unlock(),h.currentLayoutPosition=e.position,fi(e.columns)))):fi(e.columns)})}layoutFlowColumns(e,t,n,i,o,s,r,a,l,h,c){const u=this,d=pi("layoutFlowColumns"),p=u.currentLayoutPosition.clone(),f=t.getPropAsNumber(u,"column-gap"),g=h>1?t.getPropAsNumber(u,"column-width"):a.width,m=t.getActiveRegions(u),b=bn(t.getProp(u,"shape-inside"),0,0,a.width,a.height,u),w=new _u(l,u,u.viewport,u.styler,m,u.xmldoc,u.faces,u.style.footnoteProps,u,e,u.customRenderer,u.fallbackMap,this.documentURLTransformer);let E=0,y=null,S=[];return d.loopWithFrame(e=>{u.createAndLayoutColumn(t,n,i,o,a,E++,l,r,h,f,g,b,w,c).then(t=>s.isInvalidated()?(S=null,void e.breakLoop()):(!(t.pageBreakType&&"column"!==t.pageBreakType)&&E!==h||r.isInvalidated()||r.finish(),r.isInvalidated()?(E=0,u.currentLayoutPosition=p.clone(),r.validate(),void(r.isLocked()?(S=null,e.breakLoop()):e.continueLoop())):(y=t,S[E-1]=y,y.pageBreakType&&"column"!=y.pageBreakType&&(E=h,"region"!=y.pageBreakType&&(u.pageBreaks[l]=!0)),void(E<h?e.continueLoop():e.breakLoop()))))}).then(()=>{d.finish(S)}),d.result()}layoutContainer(e,t,n,i,o,s,r){const a=this;t.reset();const l=t.getProp(a,"enabled");if(l&&l!==Bt._true)return fi(!0);const h=pi("layoutContainer"),c=t.getProp(a,"wrap-flow")===Bt.auto,u=t.getProp(a,"flow-from"),d=a.viewport.document.createElement("div"),p=t.getProp(a,"position");U(d,"position",p?p.name:"absolute"),n.insertBefore(d,n.firstChild);let f,g=new ba(d);g.vertical=t.vertical,g.exclusions=s,t.prepareContainer(a,g,e,a.faces,a.clientLayout),g.originX=i,g.originY=o,i+=g.left+g.marginLeft+g.borderLeft,o+=g.top+g.marginTop+g.borderTop,this.setPagePageFloatLayoutContextContainer(r,t,g);let m=!1;if(u&&u.isIdent())if(a.pageBreaks[u.toString()])r.isInvalidated()||t.finishContainer(a,g,e,null,1,a.clientLayout,a.faces),f=fi(!0);else{const n=pi("layoutContainer.inner"),l=u.toString(),h=t.getPropAsNumber(a,"column-count");a.layoutFlowColumnsWithBalancing(e,t,i,o,s,r,g,l,h).then(i=>{if(!r.isInvalidated()){const n=i[0];n.element===d&&(g=n),g.computedBlockSize=Math.max.apply(null,i.map(e=>e.computedBlockSize)),t.finishContainer(a,g,e,n,h,a.clientLayout,a.faces);const o=a.currentLayoutPosition.flowPositions[l];o&&"region"===o.breakAfter&&(o.breakAfter=null)}n.finish(!0)}),f=n.result()}else{const i=t.getProp(a,"content");if(i&&Ea(i)){let n="span";i.url&&(n="img");const o=a.viewport.document.createElement(n);i.visit(new wa(o,a,i,a.counterStore.getExprContentListener())),d.appendChild(o),"img"==n&&t.transferSinglUriContentProps(a,o,a.faces),t.transferContentProps(a,g,e,a.faces)}else t.suppressEmptyBoxGeneration&&(n.removeChild(d),m=!0);m||t.finishContainer(a,g,e,null,1,a.clientLayout,a.faces),f=fi(!0)}return f.then(()=>{if(r.isInvalidated())return void h.finish(!0);if(!t.isAutoHeight||Math.floor(g.computedBlockSize)>0){if(!m&&!c){const e=t.getProp(a,"shape-outside"),n=g.getOuterShape(e,a);s.push(n)}}else if(0==t.children.length)return n.removeChild(d),void h.finish(!0);let l=t.children.length-1;h.loop(()=>{for(;l>=0;){const n=t.children[l--],h=a.layoutContainer(e,n,d,i,o,s,r);if(h.isPending())return h.thenAsync(()=>fi(!r.isInvalidated()));if(r.isInvalidated())break}return fi(!1)}).then(()=>{h.finish(!0)})}),h.result()}processLinger(){const e=this.currentLayoutPosition.page;for(const t in this.currentLayoutPosition.flowPositions){const n=this.currentLayoutPosition.flowPositions[t];for(let t=n.positions.length-1;t>=0;t--){const i=n.positions[t];i.flowChunk.startPage>=0&&i.flowChunk.startPage+i.flowChunk.linger-1<=e&&n.positions.splice(t,1)}}}initLingering(){const e=this.currentLayoutPosition.page;for(const t in this.currentLayoutPosition.flowPositions){const n=this.currentLayoutPosition.flowPositions[t];for(let t=n.positions.length-1;t>=0;t--){const i=n.positions[t];i.flowChunk.startPage<0&&i.flowChunk.startOffset<this.lookupOffset&&(i.flowChunk.startPage=e)}}}noMorePrimaryFlows(e){for(const t in this.primaryFlows){const n=e.flowPositions[t];if(n&&n.positions.length>0)return!1}return!0}layoutNextPage(e,n){const i=this,o=e.container===e.bleedBox;i.pageBreaks={},n?(i.currentLayoutPosition=n.clone(),i.styler.replayFlowElementsFromOffset(n.highestSeenOffset)):(i.currentLayoutPosition=new ma,i.styler.replayFlowElementsFromOffset(-1)),this.lang&&e.bleedBox.setAttribute("lang",this.lang),(n=i.currentLayoutPosition).page++,i.clearScope(i.style.pageScope),i.layoutPositionAtPageStart=n.clone();const s=o?{}:i.pageManager.getCascadedPageStyle(),r=i.selectPageMaster(s);if(!r)return fi(null);let a=0;if(!o){e.setAutoPageWidth(r.pageBox.specified.width.value===Ut),e.setAutoPageHeight(r.pageBox.specified.height.value===zt),i.counterStore.setCurrentPage(e),i.counterStore.updatePageCounters(s,i);const t=Jc(Qc(s),this);i.setPageSizeAndBleed(t,e),ou(s,t,e,this),a=t.bleedOffset+t.bleed}const l=!o&&r.getProp(i,"writing-mode")||Bt.horizontal_tb;this.pageVertical=l!=Bt.horizontal_tb;const h=r.getProp(i,"direction")||Bt.ltr,c=new xa(i.rootPageFloatLayoutContext,ya.PAGE,null,null,null,l,h),u=pi("layoutNextPage");return u.loopWithFrame(t=>{i.layoutContainer(e,r,e.bleedBox,a,a,[],c).then(()=>{c.isInvalidated()||c.finish(),c.isInvalidated()?(i.currentLayoutPosition=i.layoutPositionAtPageStart.clone(),c.validate(),t.continueLoop()):t.breakLoop()})}).then(()=>{if(r.adjustPageLayout(i,e,i.clientLayout),!o){const o=new tt(r.pageBox.scope,"left-page");e.side=o.evaluate(i)?t.PageSide.LEFT:t.PageSide.RIGHT,i.processLinger(),n=i.currentLayoutPosition,Object.keys(n.flowPositions).forEach(e=>{const t=n.flowPositions[e],o=t.breakAfter;!o||"page"!==o&&i.matchPageSide(o)||(t.breakAfter=null)})}i.currentLayoutPosition=i.layoutPositionAtPageStart=null,n.highestSeenOffset=i.styler.getReachedOffset();const s=i.style.store.getTriggersForDoc(i.xmldoc);e.finish(s,i.clientLayout),i.noMorePrimaryFlows(n)&&(n=null),u.finish(n)}),u.result()}setPageSizeAndBleed(e,t){this.actualPageWidth=e.pageWidth,this.actualPageHeight=e.pageHeight,this.pageSheetWidth=e.pageWidth+2*e.cropOffset,this.pageSheetHeight=e.pageHeight+2*e.cropOffset,t.container.style.width=`${this.pageSheetWidth}px`,t.container.style.height=`${this.pageSheetHeight}px`,t.bleedBox.style.left=`${e.bleedOffset}px`,t.bleedBox.style.right=`${e.bleedOffset}px`,t.bleedBox.style.top=`${e.bleedOffset}px`,t.bleedBox.style.bottom=`${e.bleedOffset}px`,t.bleedBox.style.padding=`${e.bleed}px`,t.bleedBox.style.paddingTop=`${e.bleed+.01}px`}}class Ju extends Qs{constructor(e,t,n,i){super(e.rootScope,e,t,n,i,e.validatorSet,!n),this.masterHandler=e,this.insideRegion=!1}startPageTemplateRule(){}startPageMasterRule(e,t,n){const i=new vc(this.masterHandler.pageScope,e,t,n,this.masterHandler.rootBox,this.condition,this.owner.getBaseSpecificity());this.masterHandler.pushHandler(new Wc(i.scope,this.masterHandler,i,this.validatorSet))}startWhenRule(e){let t=e.expr;null!=this.condition&&(t=ht(this.scope,this.condition,t)),this.masterHandler.pushHandler(new Ju(this.masterHandler,t,this,this.regionId))}startDefineRule(){this.masterHandler.pushHandler(new nr(this.scope,this.owner))}startFontFaceRule(){const e={};this.masterHandler.fontFaces.push({properties:e,condition:this.condition}),this.masterHandler.pushHandler(new ir(this.scope,this.owner,null,e,this.masterHandler.validatorSet))}startFlowRule(e){let t=this.masterHandler.flowProps[e];t||(t={},this.masterHandler.flowProps[e]=t),this.masterHandler.pushHandler(new ir(this.scope,this.owner,null,t,this.masterHandler.validatorSet))}startViewportRule(){const e={};this.masterHandler.viewportProps.push(e),this.masterHandler.pushHandler(new ir(this.scope,this.owner,this.condition,e,this.masterHandler.validatorSet))}startFootnoteRule(e){let t=this.masterHandler.footnoteProps;if(e){const n=jo(t,"_pseudos");t=n[e],t||(t={},n[e]=t)}this.masterHandler.pushHandler(new ir(this.scope,this.owner,null,t,this.masterHandler.validatorSet))}startRegionRule(){this.insideRegion=!0,this.startSelectorRule()}startPageRule(){const e=new Pu(this.masterHandler.pageScope,this.masterHandler,this,this.validatorSet,this.masterHandler.pageProps);this.masterHandler.pushHandler(e),e.startPageRule()}startRuleBody(){if(Qs.prototype.startRuleBody.call(this),this.insideRegion){this.insideRegion=!1;const e=`R${this.masterHandler.regionCount++}`;this.special("region-id",Ct(e)),this.endRule();const t=new Ju(this.masterHandler,this.condition,this,e);this.masterHandler.pushHandler(t),t.startRuleBody()}}}function ed(e){let t=e.getAttribute("content");if(!t)return"";const n={};let i;for(;null!=(i=t.match(/^,?\s*([-A-Za-z_.][-A-Za-z_0-9.]*)\s*=\s*([-+A-Za-z_0-9.]*)\s*/));)t=t.substr(i[0].length),n[i[1]]=i[2];const o=n.width-0,s=n.height-0;return o&&s?`@-epubx-viewport{width:${o}px;height:${s}px;}`:""}class td extends Wi{constructor(e){super(),this.validatorSet=e,this.regionCount=0,this.fontFaces=[],this.footnoteProps={},this.flowProps={},this.viewportProps=[],this.pageProps={},this.rootScope=new Te(null),this.pageScope=new Te(this.rootScope),this.rootBox=new Sc(this.rootScope),this.cascadeParserHandler=new Ju(this,null,null,null),this.slave=this.cascadeParserHandler}error(e,t){h.warn("CSS parser:",e)}}function nd(e,t){return t.parseOPSResource(e)}class id extends ki{constructor(e){super(nd,Ai.DOCUMENT),this.fontDeobfuscator=e,this.styleByKey={},this.styleFetcherByKey={},this.styleByDocURL={},this.triggersByDocURL={},this.validatorSet=null,this.styleSheets=[],this.triggerSingleDocumentPreprocessing=!1}init(e,t){this.setStyleSheets(e,t);const n=O("user-agent.xml",P),i=pi("OPSDocStore.init");return this.validatorSet=uc(),qu.get().then(()=>{this.load(n).then(()=>{this.triggerSingleDocumentPreprocessing=!0,i.finish(!0)})}),i.result()}getStyleForDoc(e){return this.styleByDocURL[e.url]}getTriggersForDoc(e){return this.triggersByDocURL[e.url]}setStyleSheets(e,t){this.clearStyleSheets(),e&&e.forEach(this.addAuthorStyleSheet,this),t&&t.forEach(this.addUserStyleSheet,this)}clearStyleSheets(){this.styleSheets.splice(0)}addAuthorStyleSheet(e){let t=e.url;t&&(t=O(R(t),x)),this.styleSheets.push({url:t,text:e.text,flavor:Hi.AUTHOR,classes:null,media:null})}addUserStyleSheet(e){let t=e.url;t&&(t=O(R(t),x)),this.styleSheets.push({url:t,text:e.text,flavor:Hi.USER,classes:null,media:null})}parseOPSResource(e){const n=pi("OPSDocStore.load"),i=this,o=e.url,s=o.endsWith("?viv-toc-box");return Wu(e,i).then(e=>{if(!e)return void n.finish(null);if(i.triggerSingleDocumentPreprocessing){const n=p(t.HOOKS.PREPROCESS_SINGLE_DOCUMENT);for(let t=0;t<n.length;t++)try{n[t](e.document)}catch(e){h.warn("Error during single document preprocessing:",e)}}const r=[],a=e.document.getElementsByTagNameNS(L.epub,"trigger");for(let e=0;e<a.length;e++){const t=a[e],n=t.getAttributeNS(L.EV,"observer"),i=t.getAttributeNS(L.EV,"event"),o=t.getAttribute("action"),s=t.getAttribute("ref");n&&i&&o&&s&&r.push({observer:n,event:i,action:o,ref:s})}i.triggersByDocURL[o]=r;const l=[],c=O("user-agent-page.css",P);l.push({url:c,text:Yu,flavor:Hi.USER_AGENT,classes:null,media:null});const u=e.head;if(!s&&u)for(let e=u.firstChild;e;e=e.nextSibling){if(1!=e.nodeType)continue;const t=e,n=t.namespaceURI,i=t.localName;if(n==L.XHTML)if("style"==i){const e=t.getAttribute("class"),n=t.getAttribute("media"),i=t.getAttribute("title");l.push({url:o,text:t.textContent,flavor:Hi.AUTHOR,classes:i?e:null,media:n})}else if("link"==i){const e=t.getAttribute("rel"),n=t.getAttribute("class"),i=t.getAttribute("media");if("stylesheet"==e||"alternate stylesheet"==e&&n){let e=t.getAttribute("href");e=O(e,o);const s=t.getAttribute("title");l.push({url:e,text:null,classes:s?n:null,media:i,flavor:Hi.AUTHOR})}}else"meta"==i&&"viewport"==t.getAttribute("name")&&l.push({url:o,text:ed(t),flavor:Hi.AUTHOR,classes:null,media:null});else if(n==L.FB2)"stylesheet"==i&&"text/css"==t.getAttribute("type")&&l.push({url:o,text:t.textContent,flavor:Hi.AUTHOR,classes:null,media:null});else if(n==L.SSE&&"property"===i){const e=t.getElementsByTagName("name")[0];if(e&&"stylesheet"===e.textContent){const e=t.getElementsByTagName("value")[0];if(e){const t=O(e.textContent,o);l.push({url:t,text:null,classes:null,media:null,flavor:Hi.AUTHOR})}}}}if(!s)for(let e=0;e<i.styleSheets.length;e++)l.push(i.styleSheets[e]);let d="";for(let e=0;e<l.length;e++)d+=l[e].url,d+="^",l[e].text&&(d+=l[e].text),d+="^";let f=i.styleByKey[d];if(f)return i.styleByDocURL[o]=f,void n.finish(e);let g=i.styleFetcherByKey[d];g||(g=new xi(()=>{const e=pi("fetchStylesheet");let t=0;const n=new td(i.validatorSet);return e.loop(()=>{if(t<l.length){const e=l[t++];return n.startStylesheet(e.flavor),null!==e.text?fo(e.text,n,e.url,e.classes,e.media).thenReturn(!0):go(e.url,n,e.classes,e.media)}return fi(!1)}).then(()=>{const t=n.cascadeParserHandler.finish();f=new Zu(i,n.rootScope,n.pageScope,t,n.rootBox,n.fontFaces,n.footnoteProps,n.flowProps,n.viewportProps,n.pageProps),i.styleByKey[d]=f,delete i.styleFetcherByKey[d],e.finish(f)}),e.result()},`FetchStylesheet ${o}`),i.styleFetcherByKey[d]=g,g.start()),g.get().then(t=>{i.styleByDocURL[o]=t,n.finish(e)})}),n.result()}}function od(e){return String.fromCharCode(e>>>24&255,e>>>16&255,e>>>8&255,255&e)}function sd(e){return(255&e.charCodeAt(0))<<24|(255&e.charCodeAt(1))<<16|(255&e.charCodeAt(2))<<8|255&e.charCodeAt(3)}function rd(e){const t=new H;t.append(e);let n=55-e.length&63;for(t.append("");n>0;)n--,t.append("\0");t.append("\0\0\0\0"),t.append(od(8*e.length)),e=t.toString();const i=[1732584193,4023233417,2562383102,271733878,3285377520],o=[];let s;for(let t=0;t<e.length;t+=64){for(s=0;s<16;s++)o[s]=sd(e.substr(t+4*s,4));for(;s<80;s++){const e=o[s-3]^o[s-8]^o[s-14]^o[s-16];o[s]=e<<1|e>>>31}let n,r=i[0],a=i[1],l=i[2],h=i[3],c=i[4];for(s=0;s<80;s++)n=s<20?1518500249+(a&l|~a&h):s<40?1859775393+(a^l^h):s<60?2400959708+(a&l|a&h|l&h):3395469782+(a^l^h),n+=(r<<5|r>>>27)+c+o[s],c=h,h=l,l=a<<30|a>>>2,a=r,r=n;i[0]=i[0]+r|0,i[1]=i[1]+a|0,i[2]=i[2]+l|0,i[3]=i[3]+h|0,i[4]=i[4]+c|0}return i}function ad(e){const t=function(e){const t=rd(e),n=new H;for(let e=0;e<t.length;e++)n.append(od(t[e]));return n.toString()}(e),n=new H;for(let e=0;e<t.length;e++)n.append((256|t.charCodeAt(e)).toString(16).substr(1));return n.toString()}const ld="▸",hd="▾",cd="▹";class ud{constructor(e,t,n,i,o,s,r,a,l,h){this.store=e,this.url=t,this.lang=n,this.clientLayout=i,this.fontMapper=o,this.rendererFactory=r,this.fallbackMap=a,this.documentURLTransformer=l,this.counterStore=h,this.page=null,this.instance=null,this.pref=be(s),this.pref.spreadView=!1}setAutoHeight(e,t){if(0!=t--)for(let n=e.firstChild;n;n=n.nextSibling)if(1==n.nodeType){const e=n;"auto"!=z(e,"height","auto")&&(U(e,"height","auto"),this.setAutoHeight(e,t)),"absolute"==z(e,"position","static")&&(U(e,"position","relative"),this.setAutoHeight(e,t))}}makeCustomRenderer(e){const t=this.rendererFactory.makeCustomRenderer(e);return(e,n,i)=>{const o=i.behavior;if(o)switch(o.toString()){case"body-child":e.parentElement.getAttribute("data-vivliostyle-primary-entry")&&(e.querySelector("[role=doc-toc], [role=directory], nav li a, .toc, #toc")||(i.display=Bt.none));break;case"toc-node-anchor":i.color=Bt.inherit,i["text-decoration"]=Bt.none;break;case"toc-node":i.display=Bt.block,i.margin=Vt,i.padding=Vt,i["padding-inline-start"]=new Tt(1.25,"em");break;case"toc-node-first-child":i.display=Bt.inline_block,i.margin=new Tt(.2,"em"),i["vertical-align"]=Bt.top,i.color=Bt.inherit,i["text-decoration"]=Bt.none}if(!o||"toc-node"!=o.toString()&&"toc-container"!=o.toString())return t(e,n,i);const s=e.firstChild;s&&1!==s.nodeType&&""===s.textContent.trim()&&e.replaceChild(e.ownerDocument.createComment(s.textContent),s);const r=n.getAttribute("data-adapt-class");if("toc-node"==r){const e=n.firstChild;e.textContent!=ld&&(e.textContent=ld,U(e,"cursor","pointer"),e.addEventListener("click",dd,!1),e.setAttribute("role","button"),e.setAttribute("aria-expanded","false"),n.setAttribute("aria-expanded","false"),"0px"!==n.style.height&&(e.tabIndex=0))}const a=n.ownerDocument.createElement("div");if(a.setAttribute("data-adapt-process-children","true"),"toc-node"==o.toString()){const t=n.ownerDocument.createElement("div");if(t.textContent=cd,U(t,"margin","0.2em 0 0 -1em"),U(t,"margin-inline-start","-1em"),U(t,"margin-inline-end","0"),U(t,"display","inline-block"),U(t,"width","1em"),U(t,"text-align","center"),U(t,"vertical-align","top"),U(t,"cursor","default"),U(t,"font-family","Menlo,sans-serif"),a.appendChild(t),U(a,"overflow","hidden"),a.setAttribute("data-adapt-class","toc-node"),a.setAttribute("role","treeitem"),"toc-node"==r||"toc-container"==r){U(a,"height","0px");const t=e.firstElementChild;t&&"a"===t.localName&&(t.tabIndex=-1)}else n.setAttribute("role","tree")}else"toc-node"==r&&(a.setAttribute("data-adapt-class","toc-container"),a.setAttribute("role","group"),a.setAttribute("aria-hidden","true"));return fi(a)}}showTOC(e,t,n,i,o){if(this.page)return fi(this.page);const s=this,r=pi("showTOC"),a=new Yr(e,e);this.page=a;const l=this.url+"?viv-toc-box";return this.store.load(l).then(i=>{const l=this.store.resources[this.url];l&&l.body&&l.body.getAttribute("data-vivliostyle-primary-entry")&&i.body.setAttribute("data-vivliostyle-primary-entry",!0);const h=s.store.getStyleForDoc(i),c=h.sizeViewport(n,1e5,o);t=new zu(t.window,c.fontSize,t.root,c.width,c.height);const u=s.makeCustomRenderer(i),d=new Qu(h,i,s.lang,t,s.clientLayout,s.fontMapper,u,s.fallbackMap,0,s.documentURLTransformer,s.counterStore);s.instance=d,d.pref=s.pref,d.init().then(()=>{d.layoutNextPage(a,null).then(()=>{Array.from(a.container.querySelectorAll("[data-vivliostyle-toc-box]>*>*>*>*>*[style*='display: none']")).forEach(e=>{e.setAttribute("aria-hidden","true"),e.setAttribute("hidden","hidden")}),s.setAutoHeight(e,2),r.finish(a)})})}),r.result()}hideTOC(){this.page&&(this.page.container.style.visibility="hidden",this.page.container.setAttribute("aria-hidden","true"))}isTOCVisible(){return!!this.page&&"visible"===this.page.container.style.visibility}}function dd(e){const t=e.target,n=t.textContent==ld;t.textContent=n?hd:ld;const i=t.parentNode;t.setAttribute("aria-expanded",n?"true":"false"),i.setAttribute("aria-expanded",n?"true":"false");let o=i.firstChild;for(;o;){if(1===o.nodeType){const e=o,t=e.getAttribute("data-adapt-class");if("toc-container"===t){if(e.setAttribute("aria-hidden",n?"false":"true"),e.firstChild){o=e.firstChild;continue}}else if("toc-node"===t&&(e.style.height=n?"auto":"0px",e.children.length>=2&&(e.children[1].tabIndex=n?0:-1),e.children.length>=3&&(e.children[0].tabIndex=n?0:-1,!n))){const t=e.children[0];if(t.textContent==hd){t.textContent=ld,t.setAttribute("aria-expanded","false"),e.setAttribute("aria-expanded","false"),o=e.children[2];continue}}}for(;!o.nextSibling&&o.parentNode!==i;)o=o.parentNode;o=o.nextSibling}e.stopPropagation()}class pd extends id{constructor(){super(null),this.opfByURL={},this.primaryOPFByEPubURL={},this.deobfuscators={},this.documents={},this.fontDeobfuscator=this.makeDeobfuscatorFactory(),this.plainXMLStore=new ki(Wu,Ai.DOCUMENT),this.jsonStore=new ki(Fi,Ai.TEXT)}makeDeobfuscatorFactory(){const e=this;return t=>e.deobfuscators[t]}loadAsPlainXML(e,t,n){return this.plainXMLStore.load(e,t,n)}startLoadingAsPlainXML(e){this.plainXMLStore.fetch(e)}loadAsJSON(e,t,n){return this.jsonStore.load(e,t,n)}startLoadingAsJSON(e){this.jsonStore.fetch(e)}loadPubDoc(e,t){const n=pi("loadPubDoc");return Ri(e,null,"HEAD").then(i=>{if(i.status>=400)this.loadEPUBDoc(e,t).then(t=>{t?n.finish(t):(h.error(`Failed to fetch a source document from ${e} (${i.status}${i.statusText?" "+i.statusText:""})`),n.finish(null))});else if(i.status||i.responseXML||i.responseText||i.responseBlob||i.contentType||/\/[^/.]+(?:[#?]|$)/.test(e)&&(e=e.replace(/([#?]|$)/,"/$1")),"application/oebps-package+xml"==i.contentType||/\.opf(?:[#?]|$)/.test(e)){const[,i,o]=e.match(/^((?:.*\/)?)([^/]*)$/);this.loadOPF(i,o,t).thenFinish(n)}else"application/ld+json"==i.contentType||"application/webpub+json"==i.contentType||"application/audiobook+json"==i.contentType||"application/json"==i.contentType||/\.json(?:ld)?(?:[#?]|$)/.test(e)?this.loadAsJSON(e,!0).then(t=>{if(!t)return h.error(`Received an empty response for ${e}. This may be caused by the server not allowing cross-origin resource sharing (CORS).`),void n.finish(null);const i=new Cd(this,e);i.initWithWebPubManifest(t).then(()=>{n.finish(i)})}):this.loadWebPub(e).then(i=>{i?n.finish(i):this.loadEPUBDoc(e,t).then(t=>{t?n.finish(t):(h.error(`Failed to load ${e}.`),n.finish(null))})})}),n.result()}loadEPUBDoc(e,t){const n=pi("loadEPUBDoc");e.endsWith("/")||(e+="/"),t&&this.startLoadingAsJSON(e+"?r=list"),this.startLoadingAsPlainXML(e+"META-INF/encryption.xml");const i=e+"META-INF/container.xml";return this.loadAsPlainXML(i).then(i=>{if(i){const o=i.doc().child("container").child("rootfiles").child("rootfile").attribute("full-path");for(const i of o)if(i)return void this.loadOPF(e,i,t).thenFinish(n);n.finish(null)}}),n.result()}loadOPF(e,t,n){const i=this,o=e+t;let s=i.opfByURL[o];if(s)return fi(s);const r=pi("loadOPF");return i.loadAsPlainXML(o,!0,`Failed to fetch EPUB OPF ${o}`).then(t=>{t?i.loadAsPlainXML(`${e}META-INF/encryption.xml`).then(a=>{(n?i.loadAsJSON(`${e}?r=list`):fi(null)).then(n=>{s=new Cd(i,e),s.initWithXMLDoc(t,a,n,`${e}?r=manifest`).then(()=>{i.opfByURL[o]=s,i.primaryOPFByEPubURL[e]=s,r.finish(s)})})}):h.error(`Received an empty response for EPUB OPF ${o}. This may be caused by the server not allowing cross-origin resource sharing (CORS).`)}),r.result()}loadWebPub(e){const t=pi("loadWebPub");return this.load(e).then(n=>{if(n)if(n.document.querySelector("a[href='META-INF/'],a[href$='/META-INF/']"))t.finish(null);else{const i=n.document,o=new Cd(this,e);i.body&&i.body.setAttribute("data-vivliostyle-primary-entry",!0);const s=i.querySelector("link[rel='publication'],link[rel='manifest'][type='application/webpub+json']");if(s){const n=s.getAttribute("href");if(/^#/.test(n)){const e=C(i.getElementById(n.substr(1)).textContent);o.initWithWebPubManifest(e,i).then(()=>{t.finish(o)})}else this.loadAsJSON(O(s.getAttribute("href"),e)).then(e=>{o.initWithWebPubManifest(e,i).then(()=>{t.finish(o)})})}else o.initWithWebPubManifest({},i).then(()=>{o.xhtmlToc&&o.xhtmlToc.src===n.url&&(i.querySelector("[role=doc-toc], [role=directory], nav, .toc, #toc")||(o.xhtmlToc=null)),t.finish(o)})}else h.error(`Received an empty response for ${e}. This may be caused by the server not allowing cross-origin resource sharing (CORS).`)}),t.result()}addDocument(e,t){const n=pi("EPUBDocStore.load"),i=T(e);return(this.documents[i]=this.parseOPSResource({status:200,statusText:"",url:i,contentType:t.contentType,responseText:null,responseXML:t,responseBlob:null})).thenFinish(n),n.result()}load(e){const t=T(e);let n=this.documents[t];if(n)return n.isPending()?n:fi(n.get());{const e=pi("EPUBDocStore.load");return n=super.load(t,!0,`Failed to fetch a source document from ${t}`),n.then(n=>{n?e.finish(n):t.startsWith("data:")?h.error(`Failed to load ${t}. Invalid data.`):t.startsWith("http:")&&x.startsWith("https:")?h.error(`Failed to load ${t}. Mixed Content ("http:" content on "https:" context) is not allowed.`):h.error(`Received an empty response for ${t}. This may be caused by the server not allowing cross-origin resource sharing (CORS).`)}),e.result()}}}class fd{constructor(){this.id=null,this.src="",this.mediaType=null,this.title=null,this.itemRefElement=null,this.spineIndex=-1,this.compressedSize=0,this.compressed=null,this.epage=0,this.epageCount=0,this.startPage=null,this.skipPagesBefore=null,this.itemProperties=v}initWithElement(e,t){this.id=e.getAttribute("id"),this.src=O(e.getAttribute("href"),t),this.mediaType=e.getAttribute("media-type");const n=e.getAttribute("properties");n&&(this.itemProperties=function(e){const t={};for(let n=0;n<e.length;n++)t[e[n]]=!0;return t}(n.split(/\s+/)))}initWithParam(e){this.spineIndex=e.index,this.id=`item${e.index+1}`,this.src=e.url,this.startPage=e.startPage,this.skipPagesBefore=e.skipPagesBefore}}function gd(e){return e.id}function md(e){const t=function(e){const t=rd(e),n=[];for(const e of t)n.push(e>>>24&255,e>>>16&255,e>>>8&255,255&e);return n}(e);return e=>{const n=pi("deobfuscator");let i,o;return e.slice?(i=e.slice(0,1040),o=e.slice(1040,e.size)):(i=e.webkitSlice(0,1040),o=e.webkitSlice(1040,e.size-1040)),function(e){const t=pi("readBlob"),n=new FileReader,i=t.suspend(n);return n.addEventListener("load",()=>{i.schedule(n.result)},!1),n.readAsArrayBuffer(e),t.result()}(i).then(e=>{const i=new DataView(e);for(let e=0;e<i.byteLength;e++){let n=i.getUint8(e);n^=t[e%20],i.setUint8(e,n)}n.finish(Li([i,o]))}),n.result()}}const bd={dcterms:"http://purl.org/dc/terms/",marc:"http://id.loc.gov/vocabulary/",media:"http://www.idpf.org/epub/vocab/overlays/#",rendition:"http://www.idpf.org/vocab/rendition/#",onix:"http://www.editeur.org/ONIX/book/codelists/current.html#",xsd:"http://www.w3.org/2001/XMLSchema#"},wd="http://idpf.org/epub/vocab/package/#",Ed={language:`${bd.dcterms}language`,title:`${bd.dcterms}title`,creator:`${bd.dcterms}creator`,layout:`${bd.rendition}layout`,titleType:`${wd}title-type`,displaySeq:`${wd}display-seq`,alternateScript:`${wd}alternate-script`};function yd(e,t){const n={};return(i,o)=>{let s,r;const a=i.r||n,l=o.r||n;if(e==Ed.title&&(s="main"==a[Ed.titleType],r="main"==l[Ed.titleType],s!=r))return s?-1:1;let h=parseInt(a[Ed.displaySeq],10);isNaN(h)&&(h=Number.MAX_VALUE);let c=parseInt(l[Ed.displaySeq],10);return isNaN(c)&&(c=Number.MAX_VALUE),h!=c?h-c:e!=Ed.language&&t&&(s=(a[Ed.language]||a[Ed.alternateScript])==t,r=(l[Ed.language]||l[Ed.alternateScript])==t,s!=r)?s?-1:1:i.o-o.o}}function Sd(){const e=window.MathJax;return e?e.Hub:null}const Nd={"application/xhtml+xml":!0,"image/jpeg":!0,"image/png":!0,"image/svg+xml":!0,"image/gif":!0,"audio/mp3":!0},vd="viv-id-";class Cd{constructor(e,t){this.store=e,this.pubURL=t,this.opfXML=null,this.encXML=null,this.items=null,this.spine=null,this.itemMap=null,this.itemMapByPath=null,this.uid=null,this.bindings={},this.lang=null,this.epageCount=0,this.prePaginated=!1,this.epageIsRenderedPage=!0,this.epageCountCallback=null,this.metadata={},this.ncxToc=null,this.xhtmlToc=null,this.cover=null,this.fallbackMap={},this.pageProgression=null,this.documentURLTransformer=this.createDocumentURLTransformer(),Sd()&&(Io[L.MATHML]=!0)}createDocumentURLTransformer(){const e=this;return new class{transformFragment(e,t){return vd+K(t+(e?`#${e}`:""),":")}transformURL(t,n){const i=t.match(/^([^#]*)#?(.*)$/);if(i){const t=i[1]||n,o=i[2];if(t&&e.items.some(e=>e.src===t))return`#${this.transformFragment(o,t)}`}return t}restoreURL(e){"#"===e.charAt(0)&&(e=e.substring(1)),0===e.indexOf(vd)&&(e=e.substring(vd.length));const t=q(e,":").match(/^([^#]*)#?(.*)$/);return t?[t[1],t[2]]:[]}}}getMetadata(){return this.metadata}getPathFromURL(e){if(e.startsWith("data:"))return e===this.pubURL?"":e;if(this.pubURL){let t=O("",this.pubURL);return e===t||e+"/"===t?"":("/"!=t.charAt(t.length-1)&&(t+="/"),e.substr(0,t.length)==t?decodeURI(e.substr(t.length)):null)}return e}initWithXMLDoc(e,t,n,o){const s=this;this.opfXML=e,this.encXML=t;const r=e.doc().child("package"),a=r.attribute("unique-identifier")[0];if(a){const t=e.getElement(`${e.url}#${a}`);t&&(this.uid=t.textContent.replace(/[ \n\r\t]/g,""))}const l={};this.items=r.child("manifest").child("item").asArray().map(t=>{const n=new fd,i=t;n.initWithElement(i,e.url);const o=i.getAttribute("fallback");return o&&!Nd[n.mediaType]&&(l[n.src]=o),!s.xhtmlToc&&n.itemProperties.nav&&(s.xhtmlToc=n),!s.cover&&n.itemProperties["cover-image"]&&(s.cover=n),n}),this.itemMap=J(this.items,gd),this.itemMapByPath=J(this.items,e=>s.getPathFromURL(e.src));for(const e in l){let t=e;for(;;){const n=this.itemMap[l[t]];if(!n)break;if(Nd[n.mediaType]){this.fallbackMap[e]=n.src;break}t=n.src}}this.spine=r.child("spine").child("itemref").asArray().map((e,t)=>{const n=e,i=n.getAttribute("idref"),o=s.itemMap[i];return o&&(o.itemRefElement=n,o.spineIndex=t),o});const h=r.child("spine").attribute("toc")[0];h&&(this.ncxToc=this.itemMap[h]);const c=r.child("spine").attribute("page-progression-direction")[0];c&&(this.pageProgression=i(c));const u=t?t.doc().child("encryption").child("EncryptedData").predicate(ju.withChild("EncryptionMethod",ju.withAttribute("Algorithm","http://www.idpf.org/2008/embedding"))).child("CipherData").child("CipherReference").attribute("URI"):[],d=r.child("bindings").child("mediaType").asArray();for(let e=0;e<d.length;e++){const t=d[e].getAttribute("handler"),n=d[e].getAttribute("media-type");n&&t&&this.itemMap[t]&&(this.bindings[n]=this.itemMap[t].src)}if(this.metadata=function(e,t){let n;if(t){n={};for(const e in bd)n[e]=bd[e];let e;for(;null!=(e=t.match(/^\s*([A-Z_a-z\u007F-\uFFFF][-.A-Z_a-z0-9\u007F-\uFFFF]*):\s*(\S+)/));)t=t.substr(e[0].length),n[e[1]]=e[2]}else n=bd;const i=e=>{if(e){const t=e.match(/^\s*(([^:]*):)?(\S+)\s*$/);if(t){const e=t[2]?n[t[2]]:wd;if(e)return e+t[3]}}return null};let o=1;const s=e.childElements().forEachNonNull(e=>{if("meta"==e.localName){const t=i(e.getAttribute("property"));if(t)return{name:t,value:e.textContent,id:e.getAttribute("id"),order:o++,refines:e.getAttribute("refines"),lang:null,scheme:i(e.getAttribute("scheme"))}}else if(e.namespaceURI==L.DC)return{name:bd.dcterms+e.localName,order:o++,lang:e.getAttribute("xml:lang"),value:e.textContent,id:e.getAttribute("id"),refines:null,scheme:null};return null}),r=ee(s,e=>e.refines),a=e=>(function(e,t){const n={};for(const i in e)n[i]=t(e[i],i);return n})(e,(e,t)=>e.map(e=>{const t={v:e.value,o:e.order};if(e.schema&&(t.s=e.scheme),e.id||e.lang){let n=r[e.id];if(n||e.lang){if(e.lang){const t={name:Ed.language,value:e.lang,lang:null,id:null,refines:e.id,scheme:null,order:e.order};n?n.push(t):n=[t]}const i=ee(n,e=>e.name);t.r=a(i)}}return t})),l=a(ee(s,e=>e.refines?null:e.name));let h=null;l[Ed.language]&&(h=l[Ed.language][0].v);const c=e=>{for(const t in e){const n=e[t];n.sort(yd(t,h));for(let e=0;e<n.length;e++){const t=n[e].r;t&&c(t)}}};return c(l),l}(r.child("metadata"),r.attribute("prefix")[0]),this.metadata[Ed.language]&&(this.lang=this.metadata[Ed.language][0].v),this.metadata[Ed.layout]&&(this.prePaginated="pre-paginated"===this.metadata[Ed.layout][0].v),!n){if(u.length>0&&this.uid){const e=md(this.uid);for(let t=0;t<u.length;t++)this.store.deobfuscators[this.pubURL+u[t]]=e}return this.prePaginated&&this.assignAutoPages(),fi(!0)}const p=new H,f={};if(u.length>0&&this.uid){const e=function(e){return`1040:${ad(e)}`}(this.uid);for(let t=0;t<u.length;t++)f[u[t]]=e}for(let e=0;e<n.length;e++){const t=n[e],i=t.n;if(i){const e=decodeURI(i),n=this.itemMapByPath[e];let o=null;n&&(n.compressed=0!=t.m,n.compressedSize=t.c,n.mediaType&&(o=n.mediaType.replace(/\s+/g,"")));const s=f[e];(o||s)&&(p.append(i),p.append(" "),p.append(o||"application/octet-stream"),s&&(p.append(" "),p.append(s)),p.append("\n"))}}return s.assignAutoPages(),Ri(o,Ai.DEFAULT,"POST",p.toString(),"text/plain")}assignAutoPages(){let e=0;for(const t of this.spine){const n=this.prePaginated?1:Math.ceil(t.compressedSize/1024);t.epage=e,t.epageCount=n,e+=n}this.epageCount=e,this.epageCountCallback&&this.epageCountCallback(this.epageCount)}setEPageCountMode(e){this.epageIsRenderedPage=e||this.prePaginated}countEPages(e){if(this.epageCountCallback=e,this.epageIsRenderedPage)return this.prePaginated&&0==this.epageCount&&this.assignAutoPages(),fi(!0);let t=0,n=0;const i=pi("countEPages");return i.loopWithFrame(e=>{if(n===this.spine.length)return void e.breakLoop();const i=this.spine[n++];i.epage=t,this.store.load(i.src).then(n=>{let o=1800;const s=n.lang||this.lang;s&&s.match(/^(ja|ko|zh)/)&&(o/=3),i.epageCount=Math.ceil(n.getTotalOffset()/o),t+=i.epageCount,this.epageCount=t,this.epageCountCallback&&this.epageCountCallback(this.epageCount),e.continueLoop()})}).thenFinish(i),i.result()}initWithChapters(e,t){this.itemMap={},this.itemMapByPath={},this.items=[],this.spine=this.items;const n=this.opfXML=new Hu(null,"",(new DOMParser).parseFromString("<spine></spine>","text/xml"));return e.forEach(e=>{const t=new fd;t.initWithParam(e);const i=n.document.createElement("itemref");i.setAttribute("idref",t.id),n.root.appendChild(i),t.itemRefElement=i,this.itemMap[t.id]=t;let o=this.getPathFromURL(e.url);null==o&&(o=e.url),this.itemMapByPath[o]=t,this.items.push(t)}),t?this.store.addDocument(e[0].url,t):fi(null)}initWithWebPubManifest(e,t){e.readingProgression&&(this.pageProgression=e.readingProgression),void 0===this.metadata&&(this.metadata={});const n=t&&t.title||e.name||e.metadata&&e.metadata.title;n&&(this.metadata[Ed.title]=[{v:n}]);const i=this.getPathFromURL(this.pubURL);if(!e.readingOrder&&t&&null!==i){e.readingOrder=[encodeURI(i)];const n="[role=doc-toc] a[href],[role=directory] a[href],nav li a[href],.toc a[href],#toc a[href]";Array.from(t.querySelectorAll(n)).forEach(t=>{const n=T(O(t.getAttribute("href"),this.pubURL)),i=this.getPathFromURL(n),o=null!==i?encodeURI(i):n;-1==e.readingOrder.indexOf(o)&&e.readingOrder.push(o)})}const o=[];let s=0,r=-1;[e.readingOrder,e.resources].forEach(t=>{t instanceof Array&&t.forEach(t=>{const n=e.readingOrder.includes(t),i="string"==typeof t?t:t.url||t.href,a="string"==typeof t?"":t.encodingFormat||t.href&&t.type||"";if(n||"text/html"===a||"application/xhtml+xml"===a||/(^|\/)([^/]+\.(x?html|htm|xht)|[^/.]*)([#?]|$)/.test(i)){const e={url:O(R(i),this.pubURL),index:s++,startPage:null,skipPagesBefore:null};"contents"===t.rel&&-1===r&&(r=e.index),o.push(e)}})});const a=pi("initWithWebPubManifest");return this.initWithChapters(o).then(()=>{-1!==r&&(this.xhtmlToc=this.items[r]),this.xhtmlToc||(this.xhtmlToc=this.itemMapByPath[i]),a.finish(!0)}),a.result()}getCFI(e,t){const n=this.spine[e],i=pi("getCFI");return this.store.load(n.src).then(e=>{const o=e.getNodeByOffset(t);let s=null;if(o){const i=e.getNodeOffset(o,0,!1),r=t-i,a=new me;a.prependPathFromNode(o,r,!1,null),n.itemRefElement&&a.prependPathFromNode(n.itemRefElement,0,!1,null),s=a.toString()}i.finish(s)}),i.result()}resolveFragment(e){const t=this;return gi("resolveFragment",n=>{if(!e)return void n.finish(null);let i,o=new me;if(o.fromString(e),t.opfXML){const e=o.navigate(t.opfXML.document);if(1!=e.node.nodeType||e.after||!e.ref)return void n.finish(null);const s=e.node,r=s.getAttribute("idref");if("itemref"!=s.localName||!r||!t.itemMap[r])return void n.finish(null);i=t.itemMap[r],o=e.ref}else i=t.spine[0];t.store.load(i.src).then(e=>{const t=o.navigate(e.document),s=e.getNodeOffset(t.node,t.offset,t.after);n.finish({spineIndex:i.spineIndex,offsetInItem:s,pageIndex:-1})})},(t,n)=>{h.warn(n,"Cannot resolve fragment:",e),t.finish(null)})}resolveEPage(e){const t=this;return gi("resolveEPage",n=>{if(e<=0)return void n.finish({spineIndex:0,offsetInItem:0,pageIndex:-1});if(t.epageIsRenderedPage){let i=t.spine.findIndex(t=>0==t.epage&&0==t.epageCount||t.epage<=e&&t.epage+t.epageCount>e);-1==i&&(i=t.spine.length-1);let o=t.spine[i];o&&0!=o.epageCount||(o=t.spine[--i]);const s=Math.floor(e-o.epage);return void n.finish({spineIndex:i,offsetInItem:-1,pageIndex:s})}let i=Z(t.spine.length,n=>{const i=t.spine[n];return i.epage+i.epageCount>e});i==t.spine.length&&i--;const o=t.spine[i];t.store.load(o.src).then(t=>{(e-=o.epage)>o.epageCount&&(e=o.epageCount);let s=0;if(e>0){const n=t.getTotalOffset();s=Math.round(n*e/o.epageCount),s==n&&s--}n.finish({spineIndex:i,offsetInItem:s,pageIndex:-1})})},(t,n)=>{h.warn(n,"Cannot resolve epage:",e),t.finish(null)})}getEPageFromPosition(e){const t=this.spine[e.spineIndex];if(this.epageIsRenderedPage)return fi(t.epage+e.pageIndex);if(e.offsetInItem<=0)return fi(t.epage);const n=pi("getEPage");return this.store.load(t.src).then(i=>{const o=i.getTotalOffset(),s=Math.min(o,e.offsetInItem);n.finish(t.epage+s*t.epageCount/o)}),n.result()}}const Td=(e,t)=>({page:e,position:{spineIndex:e.spineIndex,pageIndex:t,offsetInItem:e.offset}});class xd{constructor(e,t,n,i,o){this.opf=e,this.viewport=t,this.fontMapper=n,this.pageSheetSizeReporter=o,this.spineItems=[],this.spineItemLoadingContinuations=[],this.tocAutohide=!1,this.pref=be(i),this.clientLayout=new Uu(t),this.counterStore=new Tn(e.documentURLTransformer)}getPage(e){const t=this.spineItems[e.spineIndex];return t?t.pages[e.pageIndex]:null}getCurrentPageProgression(e){if(this.opf.pageProgression)return this.opf.pageProgression;{const t=this.spineItems[e?e.spineIndex:0];return t?t.instance.pageProgression:null}}finishPageContainer(e,t,n){t.container.style.display="none",t.container.style.visibility="visible",t.container.style.position="",t.container.style.top="",t.container.style.left="",t.container.setAttribute("data-vivliostyle-page-side",t.side);const i=e.pages[n];if(t.isFirstPage=0==e.item.spineIndex&&0==n,e.pages[n]=t,this.opf.epageIsRenderedPage){if(0==n&&e.item.spineIndex>0){const t=this.opf.spine[e.item.spineIndex-1];e.item.epage=t.epage+t.epageCount}e.item.epageCount=e.pages.length,this.opf.epageCount=this.opf.spine.reduce((e,t)=>e+t.epageCount,0),this.opf.epageCountCallback&&this.opf.epageCountCallback(this.opf.epageCount)}if(i)e.instance.viewport.contentContainer.replaceChild(t.container,i.container),i.dispatchEvent({type:"replaced",target:null,currentTarget:null,preventDefault:null,newPage:t});else{let i=null;if(n>0)i=e.pages[n-1].container.nextElementSibling;else for(let t=e.item.spineIndex+1;t<this.spineItems.length;t++){const e=this.spineItems[t];if(e&&e.pages[0]){i=e.pages[0].container;break}}e.instance.viewport.contentContainer.insertBefore(t.container,i)}this.pageSheetSizeReporter({width:e.instance.pageSheetWidth,height:e.instance.pageSheetHeight},e.instance.pageSheetSize,e.item.spineIndex,e.instance.pageNumberOffset+n)}renderSinglePage(e,t){const n=pi("renderSinglePage");let i=this.makePage(e,t);const o=this;return e.instance.layoutNextPage(i,t).then(s=>{const r=(t=s)?t.page-1:e.layoutPositions.length-1;o.finishPageContainer(e,i,r),o.counterStore.finishPage(i.spineIndex,r);let a=null;if(t){const n=e.layoutPositions[t.page];e.layoutPositions[t.page]=t,n&&e.pages[t.page]&&(t.isSamePosition(n)||(a=o.renderSinglePage(e,t)))}a||(a=fi(!0)),a.then(()=>{const s=o.counterStore.getUnresolvedRefsToPage(i);let a=0;n.loopWithFrame(e=>{if(a++,a>s.length)return void e.breakLoop();const t=s[a-1];t.refs=t.refs.filter(e=>!e.isResolved()),0!==t.refs.length?o.getPageViewItem(t.spineIndex).then(n=>{if(!n)return void e.continueLoop();o.counterStore.pushPageCounters(t.pageCounters),o.counterStore.pushReferencesToSolve(t.refs);const s=n.layoutPositions[t.pageIndex];o.renderSinglePage(n,s).then(t=>{o.counterStore.popPageCounters(),o.counterStore.popReferencesToSolve();const n=t.pageAndPosition.position;n.spineIndex===i.spineIndex&&n.pageIndex===r&&(i=t.pageAndPosition.page),e.continueLoop()})}):e.continueLoop()}).then(()=>{i.container.parentElement||(i=e.pages[r]),i.isLastPage=!t&&e.item.spineIndex===o.opf.spine.length-1,i.isLastPage&&(o.viewport,o.counterStore.finishLastPage(o.viewport)),n.finish({pageAndPosition:Td(i,r),nextLayoutPosition:t})})})}),n.result()}normalizeSeekPosition(e,t){let n=e.pageIndex,i=-1;if(n<0){i=e.offsetInItem;const o=Z(t.layoutPositions.length,e=>t.instance.getPosition(t.layoutPositions[e],!0)>i);n=o===t.layoutPositions.length?t.complete?t.layoutPositions.length-1:Number.POSITIVE_INFINITY:o-1}else n===Number.POSITIVE_INFINITY&&-1!==e.offsetInItem&&(i=e.offsetInItem);return{spineIndex:e.spineIndex,pageIndex:n,offsetInItem:i}}findPage(e,t){const n=this,i=pi("findPage");return n.getPageViewItem(e.spineIndex).then(o=>{if(!o)return void i.finish(null);let s,r=null;i.loopWithFrame(a=>{const l=n.normalizeSeekPosition(e,o);s=l.pageIndex,r=o.pages[s],r?a.breakLoop():o.complete?(s=o.layoutPositions.length-1,r=o.pages[s],a.breakLoop()):t?n.renderPage(l).then(e=>{e&&(r=e.page,s=e.position.pageIndex),a.breakLoop()}):i.sleep(100).then(()=>{a.continueLoop()})}).then(()=>{i.finish(Td(r,s))})}),i.result()}renderPage(e){const t=this,n=pi("renderPage");return t.getPageViewItem(e.spineIndex).then(i=>{if(!i)return void n.finish(null);const o=t.normalizeSeekPosition(e,i);let s=o.pageIndex;const r=o.offsetInItem;let a=i.pages[s];a?n.finish(Td(a,s)):n.loopWithFrame(e=>{if(s<i.layoutPositions.length)return void e.breakLoop();if(i.complete)return s=i.layoutPositions.length-1,void e.breakLoop();let n=i.layoutPositions[i.layoutPositions.length-1];t.renderSinglePage(i,n).then(t=>{const o=t.pageAndPosition.page;if(n=t.nextLayoutPosition,n){if(r>=0&&i.instance.getPosition(n)>r)return a=o,s=i.layoutPositions.length-2,void e.breakLoop();e.continueLoop()}else a=o,s=t.pageAndPosition.position.pageIndex,i.complete=!0,e.breakLoop()})}).then(()=>{a=a||i.pages[s];const e=i.layoutPositions[s];a?n.finish(Td(a,s)):t.renderSinglePage(i,e).then(e=>{e.nextLayoutPosition||(i.complete=!0),n.finish(e.pageAndPosition)})})}),n.result()}renderAllPages(){return this.renderPagesUpto({spineIndex:this.opf.spine.length-1,pageIndex:Number.POSITIVE_INFINITY,offsetInItem:-1},!1)}renderPagesUpto(e,t){const n=this,i=pi("renderPagesUpto");e||(e={spineIndex:0,pageIndex:0,offsetInItem:0});const o=e.spineIndex,s=e.pageIndex;let r,a=0;return t&&(a=o),i.loopWithFrame(t=>{const i={spineIndex:a,pageIndex:a===o?s:Number.POSITIVE_INFINITY,offsetInItem:a===o?e.offsetInItem:-1};n.renderPage(i).then(e=>{r=e,++a>o?t.breakLoop():t.continueLoop()})}).then(()=>{i.finish(r)}),i.result()}firstPage(e,t){return this.findPage({spineIndex:0,pageIndex:0,offsetInItem:-1},t)}lastPage(e,t){return this.findPage({spineIndex:this.opf.spine.length-1,pageIndex:Number.POSITIVE_INFINITY,offsetInItem:-1},t)}nextPage(e,t){const n=this;let i=e.spineIndex,o=e.pageIndex;const s=pi("nextPage");return n.getPageViewItem(i).then(e=>{if(e){if(e.complete&&o==e.layoutPositions.length-1){if(i>=n.opf.spine.length-1)return void s.finish(null);i++,o=0;const t=this.spineItems[i],r=t&&t.pages[0],a=e.pages[e.pages.length-1];r&&a&&r.side==a.side&&(t.pages.forEach(e=>{e.container&&e.container.remove()}),this.spineItems[i]=null,this.spineItemLoadingContinuations[i]=null)}else o++;n.findPage({spineIndex:i,pageIndex:o,offsetInItem:-1},t).thenFinish(s)}else s.finish(null)}),s.result()}previousPage(e,t){let n=e.spineIndex,i=e.pageIndex;if(0==i){if(0==n)return fi(null);n--,i=Number.POSITIVE_INFINITY}else i--;return this.findPage({spineIndex:n,pageIndex:i,offsetInItem:-1},t)}isRectoPage(e,n){const i=e.side===t.PageSide.LEFT,o=this.getCurrentPageProgression(n)===t.PageProgression.LTR;return!i&&o||i&&!o}getSpread(e,n){const i=pi("getCurrentSpread"),o=this.getPage(e);if(!o)return fi({left:null,right:null});const s=o.side===t.PageSide.LEFT;let r;return r=this.isRectoPage(o,e)?this.previousPage(e,n):this.nextPage(e,n),r.then(t=>{const n=this.getPage(e);let o=t&&t.page;o&&o.side===n.side&&(o=null),s?i.finish({left:n,right:o}):i.finish({left:o,right:n})}),i.result()}nextSpread(e,t){const n=this.getPage(e);if(!n)return fi(null);const i=this.isRectoPage(n,e),o=this.nextPage(e,t);if(i)return o;{const e=this;return o.thenAsync(i=>{if(i){if(i.page.side===n.side)return o;const s=e.nextPage(i.position,t);return s.thenAsync(e=>e?s:o)}return fi(null)})}}previousSpread(e,t){const n=this.getPage(e);if(!n)return fi(null);const i=this.isRectoPage(n,e),o=this.previousPage(e,t),s=n.container.previousElementSibling;if(i){const e=this;return o.thenAsync(i=>i?i.page.side===n.side?o:i.page.container!==s?o:e.previousPage(i.position,t):fi(null))}return o}navigateToEPage(e,t,n){const i=pi("navigateToEPage"),o=this;return this.opf.resolveEPage(e).then(e=>{e?o.findPage(e,n).thenFinish(i):i.finish(null)}),i.result()}navigateToFragment(e,t,n){const i=pi("navigateToCFI"),o=this;return o.opf.resolveFragment(e).then(e=>{e?o.findPage(e,n).thenFinish(i):i.finish(null)}),i.result()}navigateTo(e,t,n){h.debug("Navigate to",e);let i=this.opf.getPathFromURL(T(e));if(!i){if(this.opf.opfXML&&e.match(/^#epubcfi\(/))i=this.opf.getPathFromURL(this.opf.opfXML.url);else if("#"===e.charAt(0)){const t=this.opf.documentURLTransformer.restoreURL(e);this.opf.opfXML?(i=this.opf.getPathFromURL(t[0]),null==i&&(i=t[0])):i=t[0],e=t[0]+(t[1]?`#${t[1]}`:"")}if(null==i)return fi(null)}const o=this.opf.itemMapByPath[i];if(!o){if(this.opf.opfXML&&i==this.opf.getPathFromURL(this.opf.opfXML.url)){const i=e.indexOf("#");if(i>=0)return this.navigateToFragment(e.substr(i+1),t,n)}return fi(null)}const s=pi("navigateTo"),r=this;return r.getPageViewItem(o.spineIndex).then(i=>{if(!i)return void s.finish(null);const a=i.xmldoc.getElement(e);a?r.findPage({spineIndex:o.spineIndex,pageIndex:-1,offsetInItem:i.xmldoc.getElementOffset(a)},n).thenFinish(s):t.spineIndex!==o.spineIndex?r.findPage({spineIndex:o.spineIndex,pageIndex:0,offsetInItem:-1},n).thenFinish(s):s.finish(null)}),s.result()}makePage(e,n){const i=e.instance.viewport,o=i.document.createElement("div");o.setAttribute("data-vivliostyle-page-container","true"),o.setAttribute("role","region"),o.style.position="absolute",o.style.top="0",o.style.left="0",t.isDebug||(o.style.visibility="hidden",o.setAttribute("aria-hidden","true")),i.layoutBox.appendChild(o);const s=i.document.createElement("div");s.setAttribute("data-vivliostyle-bleed-box","true"),o.appendChild(s);const r=new Yr(o,s);if(r.spineIndex=e.item.spineIndex,r.position=n,r.offset=e.instance.getPosition(n),0===r.offset){const t=this.opf.documentURLTransformer.transformFragment("",e.item.src);s.setAttribute("id",t),r.registerElementWithId(s,t)}if(i!==this.viewport){const e=ye(this.viewport.width,this.viewport.height,i.width,i.height),t=mo(null,new hi(e,null),"");r.delayedItems.push(new Xr(o,"transform",t))}return r}makeObjectView(e,t,n,i){let o=t.getAttribute("data"),s=null;if(o){o=O(o,e.url);let n=t.getAttribute("media-type");if(!n){const e=this.opf.getPathFromURL(o);if(e){const t=this.opf.itemMapByPath[e];t&&(n=t.mediaType)}}if(n){const e=this.opf.bindings[n];if(e){s=this.viewport.document.createElement("iframe"),s.style.border="none";const i=X(o),r=X(n),a=new H;a.append(e),a.append("?src="),a.append(i),a.append("&type="),a.append(r);for(let e=t.firstChild;e;e=e.nextSibling)if(1==e.nodeType){const t=e;if("param"==t.localName&&t.namespaceURI==L.XHTML){const e=t.getAttribute("name"),n=t.getAttribute("value");e&&n&&(a.append("&"),a.append(encodeURIComponent(e)),a.append("="),a.append(encodeURIComponent(n)))}}s.setAttribute("src",a.toString());const l=t.getAttribute("width");l&&s.setAttribute("width",l);const h=t.getAttribute("height");h&&s.setAttribute("height",h)}}}return s||(s=this.viewport.document.createElement("span"),s.setAttribute("data-adapt-process-children","true")),fi(s)}makeMathJaxView(e,t,n,i){const o=Sd();if(o){const i=n.ownerDocument,s=i.createElement("span");n.appendChild(s);const r=i.importNode(t,!0);this.resolveURLsInMathML(r,e),s.appendChild(r);const a=o.queue;a.Push(["Typeset",o,s]);const l=pi("makeMathJaxView"),h=l.suspend();return a.Push(()=>{h.schedule(s)}),l.result()}return fi(null)}resolveURLsInMathML(e,t){if(null!=e){if(1===e.nodeType&&"mglyph"===e.tagName){const n=Array.from(e.attributes);for(const i of n){if("src"!==i.name)continue;const n=O(i.nodeValue,t.url);i.namespaceURI?e.setAttributeNS(i.namespaceURI,i.name,n):e.setAttribute(i.name,n)}}e.firstChild&&this.resolveURLsInMathML(e.firstChild,t),e.nextSibling&&this.resolveURLsInMathML(e.nextSibling,t)}}makeSSEView(e,t,n,i){const o=n?n.ownerDocument:this.viewport.document,s=t.localName;let r;switch(s){case"t":case"tab":case"ec":case"nt":case"fraction":case"comment":case"mark":r="span";break;case"ruby":case"rp":case"rt":r=s;break;default:r="div"}const a=o.createElement(r);return a.setAttribute("data-adapt-process-children","true"),fi(a)}makeCustomRenderer(e){const t=this;return(n,i,o)=>"object"==n.localName&&n.namespaceURI==L.XHTML?t.makeObjectView(e,n,i,o):n.namespaceURI==L.MATHML?t.makeMathJaxView(e,n,i,o):n.namespaceURI==L.SSE?t.makeSSEView(e,n,i,o):n.dataset&&"true"==n.dataset.mathTypeset?t.makeMathJaxView(e,n,i,o):fi(null)}getPageViewItem(e){const t=this;if(-1===e||e>=t.opf.spine.length)return fi(null);let n=t.spineItems[e];if(n)return fi(n);const i=pi("getPageViewItem");let o=this.spineItemLoadingContinuations[e];if(o){const e=i.suspend();return o.push(e),i.result()}o=this.spineItemLoadingContinuations[e]=[];const s=t.opf.spine[e],r=t.opf.store;return r.load(s.src).then(a=>{s.title=a.document.title;const l=r.getStyleForDoc(a),h=t.makeCustomRenderer(a);let c=t.viewport;const u=l.sizeViewport(c.width,c.height,c.fontSize,t.pref);u.width==c.width&&u.height==c.height&&u.fontSize==c.fontSize||(c=new zu(c.window,u.fontSize,c.root,u.width,u.height));const d=t.spineItems[e-1];let p;null!==s.startPage?p=s.startPage-1:(!(e>0)||d&&d.complete?p=d?d.instance.pageNumberOffset+d.pages.length:0:(p=s.epage||e,t.opf.prePaginated||p%2!=0||p++),null!==s.skipPagesBefore&&(p+=s.skipPagesBefore)),t.counterStore.forceSetPageCounter(p);const f=new Qu(l,a,t.opf.lang,c,t.clientLayout,t.fontMapper,h,t.opf.fallbackMap,p,t.opf.documentURLTransformer,t.counterStore,t.opf.pageProgression);f.pref=t.pref;const g=t.opf.metadata&&t.opf.metadata[Ed.title];f.pubTitle=g&&g[0]&&g[0].v||"",f.docTitle=s.title||"",f.init().then(()=>{n={item:s,xmldoc:a,instance:f,layoutPositions:[null],pages:[],complete:!1},t.spineItems[e]=n,i.finish(n),o.forEach(e=>{e.schedule(n)})})}),i.result()}removeRenderedPages(){const e=this.spineItems;for(const t of e)t&&t.pages.splice(0);this.viewport.clear()}hasAutoSizedPages(){const e=this.spineItems;for(const t of e)if(t){const e=t.pages;for(const t of e)if(t.isAutoPageWidth&&t.isAutoPageHeight)return!0}return!1}hasPages(){return this.spineItems.some(e=>e&&e.pages.length>0)}showTOC(e){const t=this.opf,n=t.xhtmlToc||t.ncxToc;if(this.tocAutohide=e,!n)return fi(null);if(this.tocView&&this.tocView.page)return this.tocView.page.container.style.visibility="visible",this.tocView.page.container.setAttribute("aria-hidden","false"),fi(this.tocView.page);const i=pi("showTOC");this.tocView||(this.tocView=new ud(t.store,n.src,t.lang,this.clientLayout,this.fontMapper,this.pref,this,t.fallbackMap,t.documentURLTransformer,this.counterStore));const o=this.viewport,s=Math.min(350,Math.round(.67*o.width)-16),r=o.height-6,a=o.document.createElement("div");return o.root.appendChild(a),a.style.visibility="hidden",a.style.width=`${s+10}px`,a.style.maxHeight=`${r}px`,a.setAttribute("data-vivliostyle-toc-box","true"),a.setAttribute("role","navigation"),this.tocView.showTOC(a,o,s,r,this.viewport.fontSize).then(e=>{a.style.visibility="visible",a.setAttribute("aria-hidden","false"),i.finish(e)}),i.result()}hideTOC(){this.tocView&&this.tocView.hideTOC()}isTOCVisible(){return!!this.tocView&&this.tocView.isTOCVisible()}}const Id="data-vivliostyle-viewer-status",Pd="data-vivliostyle-spread-view";var Ad,Od;!function(e){e.SINGLE_PAGE="singlePage",e.SPREAD="spread",e.AUTO_SPREAD="autoSpread"}(Ad||(Ad={}));class Rd{constructor(e,n,i,o){this.window=e,this.viewportElement=n,this.instanceId=i,this.callbackFn=o,this.pageSheetSizeAlreadySet=!1,this.renderTask=null;const s=this;n.setAttribute("data-vivliostyle-viewer-viewport",!0),t.isDebug&&n.setAttribute("data-vivliostyle-debug",!0),n.setAttribute(Id,"loading");const r=e.document;this.fontMapper=new wc(r.head,n),this.init(),this.kick=()=>{},this.sendCommand=()=>{},this.resizeListener=()=>{s.needResize=!0,s.kick()},this.pageReplacedListener=this.pageReplacedListener.bind(this),this.hyperlinkListener=e=>{},this.pageRuleStyleElement=r.getElementById("vivliostyle-page-rules"),this.actions={loadPublication:this.loadPublication,loadXML:this.loadXML,configure:this.configure,moveTo:this.moveTo,toc:this.showTOC},this.addLogListeners()}init(){this.readyState=t.ReadyState.LOADING,this.packageURL=[],this.opf=null,this.haveZipMetadata=!1,this.touchActive=!1,this.touchX=0,this.touchY=0,this.needResize=!1,this.needRefresh=!1,this.viewportSize=null,this.currentPage=null,this.currentSpread=null,this.pagePosition=null,this.fontSize=16,this.zoom=1,this.fitToScreen=!1,this.pageViewMode=Ad.SINGLE_PAGE,this.waitForLoading=!1,this.renderAllPages=!0,this.pref={fontFamily:"serif",lineHeight:1.25,margin:8,hyphenate:!1,columnWidth:25,horizontal:!1,nightMode:!1,spreadView:!1,pageBorder:1,enabledMediaTypes:{vivliostyle:!0,print:!0},defaultPaperSize:void 0},this.pageSizes=[]}addLogListeners(){const e=r;h.addListener(e.DEBUG,e=>{this.callback({t:"debug",content:e})}),h.addListener(e.INFO,e=>{this.callback({t:"info",content:e})}),h.addListener(e.WARN,e=>{this.callback({t:"warn",content:e})}),h.addListener(e.ERROR,e=>{this.callback({t:"error",content:e})})}callback(e){e.i=this.instanceId,this.callbackFn(e)}setReadyState(e){this.readyState!==e&&(this.readyState=e,this.viewportElement.setAttribute(Id,e),this.callback({t:"readystatechange"}))}loadPublication(e){S.registerStartTiming("beforeRender"),this.setReadyState(t.ReadyState.LOADING);const n=e.url,i=e.fragment,o=!!e.zipmeta,s=e.authorStyleSheet,r=e.userStyleSheet;this.viewport=null;const a=pi("loadPublication"),l=this;return l.configure(e).then(()=>{const e=new pd;e.init(s,r).then(()=>{const t=O(R(n),l.window.location.href);l.packageURL=[t],e.loadPubDoc(t,o).then(e=>{e?(l.opf=e,l.render(i).then(()=>{a.finish(!0)})):a.finish(!1)})})}),a.result()}loadXML(e){S.registerStartTiming("beforeRender"),this.setReadyState(t.ReadyState.LOADING);const n=e.url,i=e.document,o=e.fragment,s=e.authorStyleSheet,r=e.userStyleSheet;this.viewport=null;const a=pi("loadXML"),l=this;return l.configure(e).then(()=>{const e=new pd;e.init(s,r).then(()=>{const t=n.map((e,t)=>({url:O(R(e.url),l.window.location.href),index:t,startPage:e.startPage,skipPagesBefore:e.skipPagesBefore}));l.packageURL=t.map(e=>e.url),l.opf=new Cd(e,""),l.opf.initWithChapters(t,i).then(()=>{l.render(o).then(()=>{a.finish(!0)})})})}),a.result()}render(e){this.cancelRenderingTask();const t=this;let n;return n=e?this.opf.resolveFragment(e).thenAsync(e=>(t.pagePosition=e,fi(!0))):fi(!0),n.thenAsync(()=>(S.registerEndTiming("beforeRender"),t.resize()))}resolveLength(e){const t=parseFloat(e);let n;if("string"==typeof e&&(n=e.match(/[a-z]+$/))){const e=n[0];if("em"===e||"rem"===e)return t*this.fontSize;if("ex"===e)return t*Ie.ex*this.fontSize/Ie.em;const i=Ie[e];if(i)return t*i}return t}configure(e){if("boolean"==typeof e.autoresize&&(e.autoresize?(this.viewportSize=null,this.window.addEventListener("resize",this.resizeListener,!1),this.needResize=!0):this.window.removeEventListener("resize",this.resizeListener,!1)),"number"==typeof e.fontSize){const t=e.fontSize;t>=5&&t<=72&&this.fontSize!=t&&(this.fontSize=t,this.needResize=!0)}if("object"==typeof e.viewport&&e.viewport){const t=e.viewport,n={marginLeft:this.resolveLength(t["margin-left"])||0,marginRight:this.resolveLength(t["margin-right"])||0,marginTop:this.resolveLength(t["margin-top"])||0,marginBottom:this.resolveLength(t["margin-bottom"])||0,width:this.resolveLength(t.width)||0,height:this.resolveLength(t.height)||0};(n.width>=200||n.height>=200)&&(this.window.removeEventListener("resize",this.resizeListener,!1),this.viewportSize=n,this.needResize=!0)}return"boolean"==typeof e.hyphenate&&(this.pref.hyphenate=e.hyphenate,this.needResize=!0),"boolean"==typeof e.horizontal&&(this.pref.horizontal=e.horizontal,this.needResize=!0),"boolean"==typeof e.nightMode&&(this.pref.nightMode=e.nightMode,this.needResize=!0),"number"==typeof e.lineHeight&&(this.pref.lineHeight=e.lineHeight,this.needResize=!0),"number"==typeof e.columnWidth&&(this.pref.columnWidth=e.columnWidth,this.needResize=!0),"string"==typeof e.fontFamily&&(this.pref.fontFamily=e.fontFamily,this.needResize=!0),"boolean"==typeof e.load&&(this.waitForLoading=e.load),"boolean"==typeof e.renderAllPages&&(this.renderAllPages=e.renderAllPages),"string"==typeof e.userAgentRootURL&&(I(e.userAgentRootURL.replace(/resources\/?$/,"")),A(e.userAgentRootURL)),"string"==typeof e.rootURL&&(I(e.rootURL),A(`${x}resources/`)),"string"==typeof e.pageViewMode&&e.pageViewMode!==this.pageViewMode&&(this.pageViewMode=e.pageViewMode,this.needResize=!0),"number"==typeof e.pageBorder&&e.pageBorder!==this.pref.pageBorder&&(this.viewport=null,this.pref.pageBorder=e.pageBorder,this.needResize=!0),"number"==typeof e.zoom&&e.zoom!==this.zoom&&(this.zoom=e.zoom,this.needRefresh=!0),"boolean"==typeof e.fitToScreen&&e.fitToScreen!==this.fitToScreen&&(this.fitToScreen=e.fitToScreen,this.needRefresh=!0),"object"==typeof e.defaultPaperSize&&"number"==typeof e.defaultPaperSize.width&&"number"==typeof e.defaultPaperSize.height&&(this.viewport=null,this.pref.defaultPaperSize=e.defaultPaperSize,this.needResize=!0),this.configurePlugins(e),fi(!0)}configurePlugins(e){p(t.HOOKS.CONFIGURATION).forEach(t=>{const n=t(e);this.needResize=n.needResize||this.needResize,this.needRefresh=n.needRefresh||this.needRefresh})}pageReplacedListener(e){const t=this.currentPage,n=this.currentSpread,i=e.target;n?n.left!==i&&n.right!==i||this.showCurrent(e.newPage):t===e.target&&this.showCurrent(e.newPage)}forCurrentPages(e){const t=[];this.currentPage&&t.push(this.currentPage),this.currentSpread&&(t.push(this.currentSpread.left),t.push(this.currentSpread.right)),t.forEach(t=>{t&&e(t)})}removePageListeners(){this.forCurrentPages(e=>{e.removeEventListener("hyperlink",this.hyperlinkListener,!1),e.removeEventListener("replaced",this.pageReplacedListener,!1)})}hidePages(){this.removePageListeners(),this.forCurrentPages(e=>{U(e.container,"display","none"),e.container.setAttribute("aria-hidden","true")}),this.currentPage=null,this.currentSpread=null}showSinglePage(e){e.addEventListener("hyperlink",this.hyperlinkListener,!1),e.addEventListener("replaced",this.pageReplacedListener,!1),U(e.container,"visibility","visible"),U(e.container,"display","block"),e.container.setAttribute("aria-hidden","false")}showPage(e){this.hidePages(),this.currentPage=e,e.container.style.marginLeft="",e.container.style.marginRight="",this.showSinglePage(e)}showSpread(e){if(this.hidePages(),this.currentSpread=e,e.left&&e.right){let t=parseFloat(e.left.container.style.width),n=parseFloat(e.right.container.style.width);t&&n&&t!==n&&(t<n?e.left.container.style.marginLeft=`${n-t}px`:e.right.container.style.marginRight=`${t-n}px`)}e.left&&(this.showSinglePage(e.left),e.right?e.left.container.removeAttribute("data-vivliostyle-unpaired-page"):e.left.container.setAttribute("data-vivliostyle-unpaired-page",!0)),e.right&&(this.showSinglePage(e.right),e.left?e.right.container.removeAttribute("data-vivliostyle-unpaired-page"):e.right.container.setAttribute("data-vivliostyle-unpaired-page",!0))}reportPosition(){const e=pi("reportPosition"),t=this;return t.pagePosition,t.opf.getCFI(this.pagePosition.spineIndex,this.pagePosition.offsetInItem).then(n=>{const i=t.currentPage;(t.waitForLoading&&i.fetchers.length>0?Ii(i.fetchers):fi(!0)).then(()=>{t.sendLocationNotification(i,n).thenFinish(e)})}),e.result()}createViewport(){const e=this.viewportElement;if(this.viewportSize){const t=this.viewportSize;return e.style.marginLeft=`${t.marginLeft}px`,e.style.marginRight=`${t.marginRight}px`,e.style.marginTop=`${t.marginTop}px`,e.style.marginBottom=`${t.marginBottom}px`,new zu(this.window,this.fontSize,e,t.width,t.height)}return new zu(this.window,this.fontSize,e)}resolveSpreadView(e){switch(this.pageViewMode){case Ad.SINGLE_PAGE:return!1;case Ad.SPREAD:return!0;case Ad.AUTO_SPREAD:default:return e.width/e.height>=1.45&&e.width>800}}updateSpreadView(e){this.pref.spreadView=e,this.viewportElement.setAttribute(Pd,e.toString())}sizeIsGood(){const e=this.createViewport(),t=this.resolveSpreadView(e),n=this.pref.spreadView!==t;return this.updateSpreadView(t),!(this.viewportSize||!this.viewport||this.viewport.fontSize!=this.fontSize||(n||e.width!=this.viewport.width||e.height!=this.viewport.height)&&(n||e.width!=this.viewport.width||e.height==this.viewport.height||!/Android|iPhone|iPad|iPod/.test(navigator.userAgent))&&(!this.opfView||!this.opfView.hasPages()||this.opfView.hasAutoSizedPages()||(this.viewport.width=e.width,this.viewport.height=e.height,this.needRefresh=!0,0)))}setPageSize(e,t,n,i){this.pageSizes[i]=e,this.setPageSizePageRules(t,n,i)}setPageSizePageRules(e,t,n){if(!this.pageSheetSizeAlreadySet&&this.pageRuleStyleElement){let t="";Object.keys(e).forEach(n=>{t+=`@page ${n}{margin:0;size:`;const i=e[n];t+=`${i.width}px ${i.height}px;}`}),this.pageRuleStyleElement.textContent=t,this.pageSheetSizeAlreadySet=!0}}removePageSizePageRules(){this.pageRuleStyleElement&&(this.pageRuleStyleElement.textContent="",this.pageSheetSizeAlreadySet=!1)}reset(){let e=!1,t=!1;this.opfView&&(e=this.opfView.isTOCVisible(),t=this.opfView.tocAutohide,this.opfView.hideTOC(),this.opfView.removeRenderedPages()),this.removePageSizePageRules(),this.viewport=this.createViewport(),this.viewport.resetZoom(),this.opfView=new xd(this.opf,this.viewport,this.fontMapper,this.pref,this.setPageSize.bind(this)),e&&this.sendCommand({a:"toc",v:"show",autohide:t})}showCurrent(e,t){this.needRefresh=!1,this.removePageListeners();const n=this;return this.pref.spreadView?this.opfView.getSpread(this.pagePosition,t).thenAsync(t=>(n.showSpread(t),n.setSpreadZoom(t),n.currentPage=e,fi(null))):(this.showPage(e),this.setPageZoom(e),this.currentPage=e,fi(null))}setPageZoom(e){const t=this.getAdjustedZoomFactor(e.dimensions);this.viewport.zoom(e.dimensions.width,e.dimensions.height,t)}setSpreadZoom(e){const t=this.getSpreadDimensions(e);this.viewport.zoom(t.width,t.height,this.getAdjustedZoomFactor(t))}getAdjustedZoomFactor(e){return this.fitToScreen?this.calculateZoomFactorToFitInsideViewPort(e):this.zoom}getSpreadDimensions(e){let t=0,n=0;return e.left&&(t+=e.left.dimensions.width,n=e.left.dimensions.height),e.right&&(t+=e.right.dimensions.width,n=Math.max(n,e.right.dimensions.height)),e.left&&e.right&&(t+=2*this.pref.pageBorder,t+=Math.abs(e.left.dimensions.width-e.right.dimensions.width)),{width:t,height:n}}queryZoomFactor(e){if(!this.currentPage)throw new Error("no page exists.");switch(e){case Od.FIT_INSIDE_VIEWPORT:{let e;return this.pref.spreadView?(this.currentSpread,e=this.getSpreadDimensions(this.currentSpread)):e=this.currentPage.dimensions,this.calculateZoomFactorToFitInsideViewPort(e)}default:throw new Error(`unknown zoom type: ${e}`)}}calculateZoomFactorToFitInsideViewPort(e){const t=this.viewport.width/e.width,n=this.viewport.height/e.height;return Math.min(t,n)}cancelRenderingTask(){this.renderTask&&this.renderTask.interrupt(new Ld),this.renderTask=null}resize(){if(this.needResize=!1,this.needRefresh=!1,this.sizeIsGood())return fi(!0);const e=this;this.setReadyState(t.ReadyState.LOADING),this.cancelRenderingTask();const n=di().getScheduler().run(()=>gi("resize",i=>{e.opf?(e.renderTask=n,S.registerStartTiming("render (resize)"),e.reset(),e.pagePosition&&(0==e.pagePosition.pageIndex&&0==e.pagePosition.offsetInItem||(e.pagePosition.pageIndex=-1)),e.opf.setEPageCountMode(e.renderAllPages),e.opfView.renderPagesUpto(e.pagePosition,!e.renderAllPages).then(o=>{o?(e.pagePosition=o.position,e.showCurrent(o.page,!0).then(()=>{e.setReadyState(t.ReadyState.INTERACTIVE),e.opf.countEPages(t=>{const n={t:"nav",epageCount:t,first:e.currentPage.isFirstPage,last:e.currentPage.isLastPage,metadata:e.opf.metadata,docTitle:e.opf.spine[e.pagePosition.spineIndex].title};(e.currentPage.isFirstPage||0==e.pagePosition.pageIndex&&e.opf.spine[e.pagePosition.spineIndex].epage)&&(n.epage=e.opf.spine[e.pagePosition.spineIndex].epage),e.callback(n)}).then(()=>{e.reportPosition().then(o=>{(e.renderAllPages?e.opfView.renderAllPages():fi(null)).then(()=>{e.renderTask===n&&(e.renderTask=null),S.registerEndTiming("render (resize)"),e.renderAllPages&&e.setReadyState(t.ReadyState.COMPLETE),e.callback({t:"loaded"}),i.finish(o)})})})})):i.finish(!1)})):i.finish(!1)},(e,t)=>{if(!(t instanceof Ld))throw t;S.registerEndTiming("render (resize)"),h.debug(t.message)}));return fi(!0)}sendLocationNotification(e,t){const n=pi("sendLocationNotification"),i={t:"nav",first:e.isFirstPage,last:e.isLastPage,metadata:this.opf.metadata,docTitle:this.opf.spine[e.spineIndex].title},o=this;return this.opf.getEPageFromPosition(o.pagePosition).then(e=>{i.epage=e,i.epageCount=o.opf.epageCount,t&&(i.cfi=t),o.callback(i),n.finish(!0)}),n.result()}getCurrentPageProgression(){return this.opfView?this.opfView.getCurrentPageProgression(this.pagePosition):null}moveTo(e){let n;const i=this;if(this.readyState!==t.ReadyState.COMPLETE&&"next"!==e.where&&this.setReadyState(t.ReadyState.LOADING),"string"==typeof e.where){let t;switch(e.where){case"next":t=this.pref.spreadView?this.opfView.nextSpread:this.opfView.nextPage;break;case"previous":t=this.pref.spreadView?this.opfView.previousSpread:this.opfView.previousPage;break;case"last":t=this.opfView.lastPage;break;case"first":t=this.opfView.firstPage;break;default:return fi(!0)}t&&(n=()=>t.call(i.opfView,i.pagePosition,!i.renderAllPages))}else if("number"==typeof e.epage){const t=e.epage;n=()=>i.opfView.navigateToEPage(t,i.pagePosition,!i.renderAllPages)}else{if("string"!=typeof e.url)return fi(!0);{const t=e.url;n=()=>i.opfView.navigateTo(t,i.pagePosition,!i.renderAllPages)}}const o=pi("moveTo");return n.call(i.opfView).then(e=>{let n;if(e){i.pagePosition=e.position;const t=pi("moveTo.showCurrent");n=t.result(),i.showCurrent(e.page,!i.renderAllPages).then(()=>{i.reportPosition().thenFinish(t)})}else n=fi(!0);n.then(e=>{i.readyState===t.ReadyState.LOADING&&i.setReadyState(t.ReadyState.INTERACTIVE),o.finish(e)})}),o.result()}showTOC(e){const t=!!e.autohide,n=e.v,i=this.opfView.isTOCVisible(),o=t!=this.opfView.tocAutohide&&"hide"!=n;if(i){if("show"==n&&!o)return fi(!0)}else if("hide"==n)return fi(!0);if(i&&"show"!=n)return this.opfView.hideTOC(),fi(!0);{const e=this,n=pi("showTOC");return this.opfView.showTOC(t).then(i=>{if(i){if(o&&(i.listeners={}),t){const t=()=>{e.opfView.hideTOC()};i.addEventListener("hyperlink",t,!1)}i.addEventListener("hyperlink",e.hyperlinkListener,!1)}n.finish(!0)}),n.result()}}runCommand(e){const t=this,n=e.a||"";return gi("runCommand",i=>{const o=t.actions[n];o?o.call(t,e).then(()=>{t.callback({t:"done",a:n}),i.finish(!0)}):(h.error("No such action:",n),i.finish(!0))},(e,t)=>{h.error(t,"Error during action:",n),e.finish(!0)})}initEmbed(e){let t=kd(e),n=null;const i=this;mi(()=>{const e=pi("commandLoop"),o=di().getScheduler();return i.hyperlinkListener=e=>{const t=e,n="#"===t.href.charAt(0)||i.packageURL.some(e=>t.href.substr(0,e.length)==e);if(n){e.preventDefault();const s={t:"hyperlink",href:t.href,internal:n};o.run(()=>(i.callback(s),fi(!0)))}},e.loopWithFrame(e=>{if(i.needResize)i.resize().then(()=>{e.continueLoop()});else if(i.needRefresh)i.currentPage&&i.showCurrent(i.currentPage).then(()=>{e.continueLoop()});else if(t){const n=t;t=null,i.runCommand(n).then(()=>{e.continueLoop()})}else{const t=pi("waitForCommand");n=t.suspend(self),t.result().then(()=>{e.continueLoop()})}}).thenFinish(e),e.result()}),i.kick=()=>{const e=n;e&&(n=null,e.schedule(!0))},i.sendCommand=e=>!t&&(t=kd(e),i.kick(),!0),this.window.adapt_command=i.sendCommand}}!function(e){e.FIT_INSIDE_VIEWPORT="fit inside viewport"}(Od||(Od={}));class Ld extends Error{constructor(){super(),this.name="RenderingCanceledError",this.message="Page rendering has been canceled",Object.setPrototypeOf(this,Ld.prototype),this.stack=(new Error).stack}}function kd(e){return"string"==typeof e?C(e):e}const Fd=t.PageProgression;function Dd(e){const t={};return Object.keys(e).forEach(n=>{const i=e[n];switch(n){case"autoResize":t.autoresize=i;break;case"pageBorderWidth":t.pageBorder=i;break;default:t[n]=i}}),t}class _d{constructor(e,t){this.settings=e,this.initialized=!1,n(e.debug),this.adaptViewer_=new Rd(e.window||window,e.viewportElement,"main",this.dispatcher.bind(this)),this.options={autoResize:!0,fontSize:16,pageBorderWidth:1,renderAllPages:!0,pageViewMode:Ad.AUTO_SPREAD,zoom:1,fitToScreen:!1,defaultPaperSize:void 0},t&&this.setOptions(t),this.eventTarget=new te,Object.defineProperty(this,"readyState",{get(){return this.adaptViewer_.readyState}})}setOptions(e){const t=Object.assign({a:"configure"},Dd(e));this.adaptViewer_.sendCommand(t),Object.assign(this.options,e)}dispatcher(e){const t={type:e.t},n=e;Object.keys(n).forEach(e=>{"t"!==e&&(t[e]=n[e])}),this.eventTarget.dispatchEvent(t)}addListener(e,t){this.eventTarget.addEventListener(e,t,!1)}removeListener(e,t){this.eventTarget.removeEventListener(e,t,!1)}loadDocument(e,t,n){e||this.eventTarget.dispatchEvent({type:"error",content:"No URL specified"}),this.loadDocumentOrPublication(e,null,t,n)}loadPublication(e,t,n){e||this.eventTarget.dispatchEvent({type:"error",content:"No URL specified"}),this.loadDocumentOrPublication(null,e,t,n)}loadDocumentOrPublication(e,t,n,i){const o=n||{};function s(e){return e?e.map(e=>({url:e.url||null,text:e.text||null})):void 0}const r=s(o.authorStyleSheet),a=s(o.userStyleSheet);i&&Object.assign(this.options,i);const l=Object.assign({a:e?"loadXML":"loadPublication",userAgentRootURL:this.settings.userAgentRootURL,url:Bd(e)||t,document:o.documentObject,fragment:o.fragment,authorStyleSheet:r,userStyleSheet:a},Dd(this.options));this.initialized?this.adaptViewer_.sendCommand(l):(this.initialized=!0,this.adaptViewer_.initEmbed(l))}getCurrentPageProgression(){return this.adaptViewer_.getCurrentPageProgression()}resolveNavigation(e){switch(e){case t.Navigation.LEFT:return this.getCurrentPageProgression()===Fd.LTR?t.Navigation.PREVIOUS:t.Navigation.NEXT;case t.Navigation.RIGHT:return this.getCurrentPageProgression()===Fd.LTR?t.Navigation.NEXT:t.Navigation.PREVIOUS;default:return e}}navigateToPage(e,n){e===t.Navigation.EPAGE?this.adaptViewer_.sendCommand({a:"moveTo",epage:n}):this.adaptViewer_.sendCommand({a:"moveTo",where:this.resolveNavigation(e)})}navigateToInternalUrl(e){this.adaptViewer_.sendCommand({a:"moveTo",url:e})}isTOCVisible(){return this.adaptViewer_.opfView&&this.adaptViewer_.opfView.opf&&(this.adaptViewer_.opfView.opf.xhtmlToc||this.adaptViewer_.opfView.opf.ncxToc)?!!this.adaptViewer_.opfView.isTOCVisible():null}showTOC(e,t){const n=null==e?"toggle":e?"show":"hide";this.adaptViewer_.sendCommand({a:"toc",v:n,autohide:t})}queryZoomFactor(e){return this.adaptViewer_.queryZoomFactor(e)}getPageSizes(){return this.adaptViewer_.pageSizes}}function Bd(e){function t(e){return"number"==typeof e?e:null}function n(e){return"string"==typeof e?{url:e,startPage:null,skipPagesBefore:null}:{url:e.url,startPage:t(e.startPage),skipPagesBefore:t(e.skipPagesBefore)}}return Array.isArray(e)?e.map(n):e?[n(e)]:null}!function(e){e.PREVIOUS="previous",e.NEXT="next",e.LEFT="left",e.RIGHT="right",e.FIRST="first",e.LAST="last",e.EPAGE="epage"}(t.Navigation||(t.Navigation={}));const Md=Od,Ud=Ad,zd={CoreViewer:_d,PageViewMode:Ud,ZoomType:Md};S.forceRegisterEndTiming("load_vivliostyle");var Vd="/*\n * Copyright 2015 Trim-marks Inc.\n * Copyright 2019 Vivliostyle Foundation\n *\n * Vivliostyle.js is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Vivliostyle.js is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Vivliostyle.js.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n[data-vivliostyle-layout-box] {\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    overflow: hidden;\n    z-index: -1;\n}\n\n[data-vivliostyle-debug] [data-vivliostyle-layout-box] {\n    right: auto;\n    bottom: auto;\n    overflow: visible;\n    z-index: auto;\n}\n\n[data-vivliostyle-page-container] {\n    position: relative;\n    overflow: hidden;\n}\n\n[data-vivliostyle-bleed-box] {\n    position: absolute;\n    overflow: hidden;\n    max-width: 100%;\n    max-height: 100%;\n    box-sizing: border-box;\n}\n\n[data-vivliostyle-page-box] ~ [data-vivliostyle-page-box] {\n    display: none;\n}\n\n[data-vivliostyle-toc-box] {\n    position: absolute;\n    left: 3px;\n    top: 3px;\n    overflow: scroll;\n    overflow-x: hidden;\n    background: rgba(248,248,248,0.9);\n    border-radius: 2px;\n    box-shadow: 1px 1px 2px rgba(0,0,0,0.4);\n}\n\n@media print {\n    [data-vivliostyle-toc-box] {\n        display: none;\n    }\n\n    [data-vivliostyle-outer-zoom-box], [data-vivliostyle-spread-container] {\n        width: 100% !important;\n        height: 100% !important;\n    }\n\n    [data-vivliostyle-spread-container], [data-vivliostyle-page-container] {\n        -moz-transform: none !important;\n        -ms-transform: none !important;\n        -webkit-transform: none !important;\n        transform: none !important;\n    }\n\n    [data-vivliostyle-page-container] {\n        display: block !important;\n        max-width: 100%;\n        height: 100% !important;\n        max-height: 100%;\n    }\n\n    /* Workaround for Chrome printing problem */\n    /* [data-vivliostyle-page-box] {\n        padding-bottom: 0 !important;\n        overflow: visible !important;\n    } */\n    [data-vivliostyle-bleed-box] > div > div::before {\n        display: block;\n        content: \"\";\n        padding-top: 0.015625px;\n        margin-bottom: -0.015625px;\n    }\n\n    /* Gecko-only hack, see https://bugzilla.mozilla.org/show_bug.cgi?id=267029#c17 */\n    @-moz-document regexp('.*') {\n        [data-vivliostyle-page-container]:nth-last-child(n+2) {\n            top: -1px;\n            margin-top: 1px;\n            margin-bottom: -1px;\n        }\n    }\n}\n",Hd="/*\n * Copyright 2017 Trim-marks Inc.\n *\n * Vivliostyle.js is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Vivliostyle.js is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Vivliostyle.js.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n@media screen {\n\n    [data-vivliostyle-viewer-viewport] {\n        background: #AAAAAA;\n    }\n\n    [data-vivliostyle-page-container] {\n        background: white;\n    }\n\n    [data-vivliostyle-viewer-viewport] {\n        display: -webkit-flex;\n        display: flex;\n        overflow: auto;\n        position: relative;\n    }\n\n    [data-vivliostyle-outer-zoom-box] {\n        margin: auto;\n        overflow: hidden;\n        -webkit-flex: none;\n        flex: none;\n    }\n\n    [data-vivliostyle-viewer-viewport] [data-vivliostyle-spread-container] {\n        display: -webkit-flex;\n        display: flex;\n        -webkit-flex: none;\n        flex: none;\n        -webkit-justify-content: center;\n        justify-content: center;\n        -moz-transform-origin: left top;\n        -ms-transform-origin: left top;\n        -webkit-transform-origin: left top;\n        transform-origin: left top;\n    }\n\n    [data-vivliostyle-viewer-viewport][data-vivliostyle-page-progression=ltr] [data-vivliostyle-spread-container] {\n        -webkit-flex-direction: row;\n        flex-direction: row;\n    }\n\n    [data-vivliostyle-viewer-viewport][data-vivliostyle-page-progression=rtl] [data-vivliostyle-spread-container] {\n        -webkit-flex-direction: row-reverse;\n        flex-direction: row-reverse;\n    }\n\n    [data-vivliostyle-viewer-viewport] [data-vivliostyle-page-container] {\n        margin: 0 auto;\n        -webkit-flex: none;\n        flex: none;\n        transform-origin: center top;\n    }\n\n    [data-vivliostyle-viewer-viewport][data-vivliostyle-spread-view=true] [data-vivliostyle-page-container][data-vivliostyle-page-side=left] {\n        margin-right: 1px;\n        transform-origin: right top;\n    }\n\n    [data-vivliostyle-viewer-viewport][data-vivliostyle-spread-view=true] [data-vivliostyle-page-container][data-vivliostyle-page-side=right] {\n        margin-left: 1px;\n        transform-origin: left top;\n    }\n\n    [data-vivliostyle-viewer-viewport][data-vivliostyle-spread-view=true] [data-vivliostyle-page-container][data-vivliostyle-unpaired-page=true] {\n        margin-left: auto;\n        margin-right: auto;\n        transform-origin: center top;\n    }\n\n}\n";class Gd{constructor(e,{title:t="",printCallback:n=(e=>e.print()),hideIframe:i=!0,removeIframe:o=!0}){this.htmlDoc=e,this.title=t,this.printCallback=n,this.hideIframe=i,this.removeIframe=o}init(){this.iframe=document.createElement("iframe"),this.hideIframe&&(this.iframe.style.width="0",this.iframe.style.height="0",this.iframe.style.borderWidth="0"),this.window=window,this.window.printInstance=this,this.iframe.srcdoc=`\n      <!DOCTYPE html>\n      <html data-vivliostyle-paginated="true">\n        <head>\n          <meta charset='utf-8'/>\n          <meta name='viewport' content='width=device-width, initial-scale=1.0'/>\n          <title>${this.title}</title>\n          <style>${Vd}</style>\n          <style>${Hd}</style>\n          <style>\n            html[data-vivliostyle-paginated] {\n              width: 100%;\n              height: 100%;\n            }\n            html[data-vivliostyle-paginated] body,\n            html[data-vivliostyle-paginated] [data-vivliostyle-viewer-viewport] {\n              width: 100% !important;\n              height: 100% !important;\n            }\n            html[data-vivliostyle-paginated],\n            html[data-vivliostyle-paginated] body {\n              margin: 0;\n              padding: 0;\n            }\n          </style>\n          <style id='vivliostyle-page-rules'></style>\n        </head>\n        <body onload='parent.printInstance.runInIframe(window)'>\n          <div id="vivliostyle-viewer-viewport"></div>\n        </body>\n      </html>`,document.body.appendChild(this.iframe)}runInIframe(e){return this.iframeWin=e,this.preparePrint().then(()=>this.browserPrint()).then(()=>this.cleanUp())}preparePrint(){this.iframeWin.document.title=this.title;const e=new Blob([this.htmlDoc],{type:"text/html"}),t=URL.createObjectURL(e),n=new _d({viewportElement:this.iframeWin.document.body.firstElementChild,window:this.iframeWin,debug:!0},{defaultPaperSize:{width:794,height:1122}});return new Promise(e=>{n.addListener("readystatechange",()=>{"complete"===n.readyState&&e()}),n.loadDocument({url:t})})}browserPrint(){this.printCallback(this.iframeWin)}cleanUp(){delete this.window.printInstance,this.removeIframe&&this.iframe.parentElement.removeChild(this.iframe)}}t.CoreViewer=_d,t.PageViewMode=Ud,t.Profiler=g,t.ZoomType=Md,t.constants=s,t.getHooksForName=p,t.pageProgressionOf=i,t.plugin=f,t.printHTML=function(e,t){new Gd(e,t).init()},t.profile=N,t.profiler=S,t.registerHook=u,t.removeHook=d,t.setDebug=n,t.viewer=zd})),s=(t=o)&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t,r=o.isDebug,a=o.PageProgression,l=o.PageSide,h=o.ReadyState,c=o.HOOKS,u=o.Navigation,d=o.CoreViewer,p=o.PageViewMode,f=o.Profiler,g=o.ZoomType,m=o.constants,b=o.getHooksForName,w=o.pageProgressionOf,E=o.plugin,y=o.printHTML,S=o.profile,N=o.profiler,v=o.registerHook,C=o.removeHook,T=o.setDebug,x=o.viewer,I=Object.freeze({__proto__:null,default:s,__moduleExports:o,isDebug:r,PageProgression:a,PageSide:l,ReadyState:h,HOOKS:c,Navigation:u,CoreViewer:d,PageViewMode:p,Profiler:f,ZoomType:g,constants:m,getHooksForName:b,pageProgressionOf:w,plugin:E,printHTML:y,profile:S,profiler:N,registerHook:v,removeHook:C,setDebug:T,viewer:x});!function(e){e.Default="",e.Auto="auto",e.Preset="preset",e.Custom="custom",e.Zero="0"}(n||(n={}));const P=[{name:"A5",description:"A5"},{name:"A4",description:"A4"},{name:"A3",description:"A3"},{name:"B5",description:"B5 (ISO)"},{name:"B4",description:"B4 (ISO)"},{name:"JIS-B5",description:"B5 (JIS)"},{name:"JIS-B4",description:"B4 (JIS)"},{name:"letter",description:"letter"},{name:"legal",description:"legal"},{name:"ledger",description:"ledger"}],A={customWidth:"210mm",customHeight:"297mm",customMargin:"10%",baseFontSize:"12pt",baseLineHeight:"1.2",baseFontFamily:"serif",viewerFontSize:16};class O{constructor(e){this.PresetSize=O.PresetSize,this.pageSizeMode=i.observable(n.Default),this.presetSize=i.observable(P[1]),this.isLandscape=i.observable(!1),this.customWidth=i.observable(A.customWidth),this.customHeight=i.observable(A.customHeight),this.pageSizeImportant=i.observable(!1),this.pageMarginMode=i.observable(n.Default),this.customMargin=i.observable(A.customMargin),this.pageMarginImportant=i.observable(!1),this.firstPageMarginZero=i.observable(!1),this.firstPageMarginZeroImportant=i.observable(!1),this.forceHtmlBodyMarginZero=i.observable(!1),this.widowsOrphans=i.observable(""),this.widowsOrphansImportant=i.observable(!1),this.imageMaxSizeToFitPage=i.observable(!1),this.imageMaxSizeToFitPageImportant=i.observable(!1),this.imageKeepAspectRatio=i.observable(!1),this.imageKeepAspectRatioImportant=i.observable(!1),this.baseFontSize=i.observable(A.baseFontSize),this.baseFontSizeSpecified=i.observable(!1),this.baseFontSizeImportant=i.observable(!1),this.baseLineHeight=i.observable(A.baseLineHeight),this.baseLineHeightSpecified=i.observable(!1),this.baseLineHeightImportant=i.observable(!1),this.baseFontFamily=i.observable(A.baseFontFamily),this.baseFontFamilySpecified=i.observable(!1),this.baseFontFamilyImportant=i.observable(!1),this.allImportant=i.observable(!1),this.pageOtherStyle=i.observable(""),this.firstPageOtherStyle=i.observable(""),this.rootOtherStyle=i.observable(""),this.beforeOtherStyle=i.observable(""),this.afterOtherStyle=i.observable(""),this.viewerFontSize=null,this.setViewerFontSizeObservable=e=>{this.viewerFontSize=e;const t=document.getElementsByName("vivliostyle-settings_viewer-font-size")[0];t&&(t.value=this.fontSizePxToPercent(Number(e()),100,5).toString())},this.viewerFontSizePercent=i.pureComputed({read(){if(!this.viewerFontSize)return 100;return this.fontSizePxToPercent(Number(this.viewerFontSize()),100,5)},write(e){if(!this.viewerFontSize)return;const t=parseFloat(String(e));let n=t&&this.fontSizePercentToPx(t);if(!n||n<5||n>72){const e=document.getElementsByName("vivliostyle-settings_viewer-font-size")[0];e&&(e.value="100"),n=A.viewerFontSize}this.viewerFontSize(Number(n))},owner:this}),this.cssText=i.pureComputed({read:this.toCSSText,write:this.fromCSSText,owner:this}),this.allImportant.subscribe(e=>{this.pageSizeImportant(e),this.pageMarginImportant(e),this.firstPageMarginZeroImportant(e),this.widowsOrphansImportant(e),this.imageMaxSizeToFitPageImportant(e),this.imageKeepAspectRatioImportant(e),this.baseFontSizeImportant(e),this.baseLineHeightImportant(e),this.baseFontFamilyImportant(e)}),this.pageStyleRegExp=new RegExp("^((?:\\n|.)*?)\\/\\*<viewer>\\*\\/\\s*(?:@page\\s*\\{\\s*(?:size:\\s*([^\\s!;{}]+)(?:\\s+([^\\s!;{}]+))?\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?(?:margin:\\s*([^\\s!;{}]+(?:\\s+[^\\s!;{}]+)?(?:\\s+[^\\s!;{}]+)?(?:\\s+[^\\s!;{}]+)?)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?((?:[^{}]+|\\{[^{}]*\\})*)\\}\\s*)?(?:@page\\s*:first\\s*\\{\\s*(margin:\\s*0(?:\\w+|%)?\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?((?:[^{}]+|\\{[^{}]*\\})*)\\}\\s*)?((?:html|:root),\\s*body\\s*\\{\\s*margin:\\s*0(?:\\w+|%)?\\s*!important(?:;|(?=[\\s{}]))\\s*\\}\\s*)?(?:(?:html|:root)\\s*\\{\\s*(?:font-size:\\s*(calc\\([^()]+\\)|[^\\s!;{}]+)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?(?:line-height:\\s*([^\\s!;{}]+)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?(?:font-family:\\s*([^!;{}]+)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?([^{}]*)\\}\\s*)?(?:body\\s*\\{\\s*(?:[-\\w]+:\\s*inherit\\s*!important(?:;|(?=[\\s{}]))\\s*)+\\}\\s*)?(?:\\*\\s*\\{\\s*widows:\\s*(1|999)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*orphans:\\s*\\19\\s*\\20(?:;|(?=[\\s{}]))\\s*\\}\\s*)?(?:img,\\s*svg\\s*\\{\\s*(max-inline-size:\\s*100%\\s*(!important)?(?:;|(?=[\\s{}]))\\s*max-block-size:\\s*100vb\\s*\\22(?:;|(?=[\\s{}]))\\s*)?(object-fit:\\s*contain\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?\\}\\s*)?((?:\\n|.)*)$"),e&&this.copyFrom(e)}fontSizePxToPercent(e,t,n){let i=e/A.viewerFontSize*(t||100);return n&&(i=i.toPrecision(n).replace(/(?:\.0*|(\.\d*?)0+)$/,"$1")),i}fontSizePercentToPx(e,t,n){let i=e/(t||100)*A.viewerFontSize;return n&&(i=i.toPrecision(n).replace(/(?:\.0*|(\.\d*?)0+)$/,"$1")),i}fromCSSText(e){const t=this.pageStyleRegExp.exec(e);if(t){const[,e,i,o,s,r,a,l,h,c,u,d,p,f,g,m,b,w,E,y,S,N,v,C,T,x]=t;let I=x,A=b,O=p,R=u,L=l,k=E,F=i,D=o,_=0,B=0;if(this.beforeOtherStyle(e),"landscape"==F||"portrait"==F?(this.isLandscape("landscape"==F),F=D,D=null):"landscape"!=D&&"portrait"!=D||(this.isLandscape("landscape"==D),D=null),null!=F){if(null==D)if("auto"==F)this.pageSizeMode(n.Auto);else{const e=P.find(e=>e.name.toLowerCase()==F.toLowerCase());e?(this.pageSizeMode(n.Preset),this.presetSize(e)):(this.pageSizeMode(n.Custom),this.customWidth(F),this.customHeight(F))}else this.pageSizeMode(n.Custom),this.customWidth(F),this.customHeight(D);this.pageSizeImportant(!!s),s?_++:B++}else this.pageSizeMode(n.Default);null!=r?(this.pageMarginMode("0"==r?n.Zero:n.Custom),"0"==r?this.pageMarginMode(n.Zero):(this.pageMarginMode(n.Custom),this.customMargin(r)),this.pageMarginImportant(!!a),a?_++:B++):this.pageMarginMode(n.Default),L=L||"",this.pageOtherStyle(L),h?(this.firstPageMarginZero(!0),this.firstPageMarginZeroImportant(!!c),c?_++:B++):this.firstPageMarginZero(!1),R=R||"",this.firstPageOtherStyle(R),d?this.forceHtmlBodyMarginZero(!0):this.forceHtmlBodyMarginZero(!1),null!=O?(O=O.replace(/^\s*calc\([.\d]+\s*\*\s*([.\d]+\w+)\)\s*$/,"$1"),this.baseFontSizeSpecified(!0),this.baseFontSize(O),this.baseFontSizeImportant(!!f),f?_++:B++):this.baseFontSizeSpecified(!1),null!=g?(this.baseLineHeightSpecified(!0),this.baseLineHeight(g),this.baseLineHeightImportant(!!m),m?_++:B++):this.baseLineHeightSpecified(!1),null!=A?(A=A.trim(),this.baseFontFamilySpecified(!0),this.baseFontFamily(A),this.baseFontFamilyImportant(!!w),w?_++:B++):this.baseFontFamilySpecified(!1),k=k||"",this.rootOtherStyle(k),null!=y?(this.widowsOrphans(y),this.widowsOrphansImportant(!!S),S?_++:B++):this.widowsOrphans(n.Default),N?(this.imageMaxSizeToFitPage(!0),this.imageMaxSizeToFitPageImportant(!!v),v?_++:B++):this.imageMaxSizeToFitPage(!1),C?(this.imageKeepAspectRatio(!0),this.imageKeepAspectRatioImportant(!!T),T?_++:B++):this.imageKeepAspectRatio(!1),I=I.replace(/\/\*<\/?viewer>\*\/\n?/g,"")||"",this.afterOtherStyle(I),this.allImportant(_>0&&0==B)}else{const t=e.replace(/\/\*<\/?viewer>\*\/\n?/g,"")||"";this.afterOtherStyle(t)}}toCSSText(){function e(e){return e?" !important":""}let t=this.beforeOtherStyle();if(t+="/*<viewer>*/\n",this.pageSizeMode()!=n.Default||this.pageMarginMode()!=n.Default||this.pageOtherStyle()){if(t+="@page { ",this.pageSizeMode()!=n.Default){switch(t+="size: ",this.pageSizeMode()){case n.Auto:t+="auto";break;case n.Preset:t+=this.presetSize().name,this.isLandscape()&&(t+=" landscape");break;case n.Custom:t+=`${this.customWidth()} ${this.customHeight()}`;break;default:throw new Error(`Unknown pageSizeMode ${this.pageSizeMode()}`)}t+=`${e(this.pageSizeImportant())}; `}if(this.pageMarginMode()!=n.Default){switch(t+="margin: ",this.pageMarginMode()){case n.Auto:t+="auto";break;case n.Zero:t+="0";break;case n.Custom:t+=`${this.customMargin()}`;break;default:throw new Error(`Unknown pageMarginMode ${this.pageMarginMode()}`)}t+=`${e(this.pageMarginImportant())}; `}t+=this.pageOtherStyle(),t+="}\n"}if((this.firstPageMarginZero()||this.firstPageOtherStyle())&&(t+="@page :first { ",this.firstPageMarginZero()&&(t+=`margin: 0${e(this.firstPageMarginZeroImportant())}; `),t+=this.firstPageOtherStyle(),t+="}\n"),this.forceHtmlBodyMarginZero()&&(t+=":root, body { margin: 0 !important; }\n"),this.baseFontSizeSpecified()||this.baseLineHeightSpecified()||this.baseFontFamilySpecified()||this.rootOtherStyle()){t+=":root { ";const n=this.baseFontSize();if(this.baseFontSizeSpecified())if(this.viewerFontSize&&this.viewerFontSize()!=A.viewerFontSize&&!n.endsWith("%")){t+=`font-size: calc(${this.fontSizePxToPercent(Number(this.viewerFontSize()),1,5)} * ${n})${e(this.baseFontSizeImportant())}; `}else t+=`font-size: ${this.baseFontSize()}${e(this.baseFontSizeImportant())}; `;this.baseLineHeightSpecified()&&(t+=`line-height: ${this.baseLineHeight()}${e(this.baseLineHeightImportant())}; `),this.baseFontFamilySpecified()&&(t+=`font-family: ${this.baseFontFamily()}${e(this.baseFontFamilyImportant())}; `),t+=this.rootOtherStyle(),t+="}\n"}return(this.baseFontSizeSpecified()&&this.baseFontSizeImportant()||this.baseLineHeightSpecified()&&this.baseLineHeightImportant()||this.baseFontFamilySpecified()&&this.baseFontFamilyImportant())&&(t+="body { ",this.baseFontSizeSpecified()&&this.baseFontSizeImportant()&&(t+="font-size: inherit !important; "),this.baseLineHeightSpecified()&&this.baseLineHeightImportant()&&(t+="line-height: inherit !important; "),this.baseFontFamilySpecified()&&this.baseFontFamilyImportant()&&(t+="font-family: inherit !important; "),t+="}\n"),this.widowsOrphans()&&(t+="* { ",t+=`widows: ${this.widowsOrphans()}${e(this.widowsOrphansImportant())}; `,t+=`orphans: ${this.widowsOrphans()}${e(this.widowsOrphansImportant())}; `,t+="}\n"),(this.imageMaxSizeToFitPage()||this.imageKeepAspectRatio())&&(t+="img, svg { ",this.imageMaxSizeToFitPage()&&(t+=`max-inline-size: 100%${e(this.imageMaxSizeToFitPageImportant())}; `,t+=`max-block-size: 100vb${e(this.imageMaxSizeToFitPageImportant())}; `),this.imageKeepAspectRatio()&&(t+=`object-fit: contain${e(this.imageKeepAspectRatioImportant())}; `),t+="}\n"),t+="/*</viewer>*/\n",t+=this.afterOtherStyle(),t}copyFrom(e){this.pageSizeMode(e.pageSizeMode()),this.presetSize(e.presetSize()),this.isLandscape(e.isLandscape()),this.customWidth(e.customWidth()),this.customHeight(e.customHeight()),this.pageSizeImportant(e.pageSizeImportant()),this.pageMarginMode(e.pageMarginMode()),this.customMargin(e.customMargin()),this.pageMarginImportant(e.pageMarginImportant()),this.firstPageMarginZero(e.firstPageMarginZero()),this.firstPageMarginZeroImportant(e.firstPageMarginZeroImportant()),this.forceHtmlBodyMarginZero(e.forceHtmlBodyMarginZero()),this.widowsOrphans(e.widowsOrphans()),this.widowsOrphansImportant(e.widowsOrphansImportant()),this.imageMaxSizeToFitPage(e.imageMaxSizeToFitPage()),this.imageMaxSizeToFitPageImportant(e.imageMaxSizeToFitPageImportant()),this.imageKeepAspectRatio(e.imageKeepAspectRatio()),this.imageKeepAspectRatioImportant(e.imageKeepAspectRatioImportant()),this.baseFontSize(e.baseFontSize()),this.baseFontSizeSpecified(e.baseFontSizeSpecified()),this.baseFontSizeImportant(e.baseFontSizeImportant()),this.baseLineHeight(e.baseLineHeight()),this.baseLineHeightSpecified(e.baseLineHeightSpecified()),this.baseLineHeightImportant(e.baseLineHeightImportant()),this.baseFontFamily(e.baseFontFamily()),this.baseFontFamilySpecified(e.baseFontFamilySpecified()),this.baseFontFamilyImportant(e.baseFontFamilyImportant()),this.allImportant(e.allImportant()),this.pageOtherStyle(e.pageOtherStyle()),this.firstPageOtherStyle(e.firstPageOtherStyle()),this.rootOtherStyle(e.rootOtherStyle()),this.beforeOtherStyle(e.beforeOtherStyle()),this.afterOtherStyle(e.afterOtherStyle()),this.viewerFontSize&&e.viewerFontSize&&this.viewerFontSize(e.viewerFontSize())}equivalentTo(e){return this.pageSizeMode()===e.pageSizeMode()&&((this.pageSizeMode()!==n.Preset||this.presetSize()===e.presetSize())&&((this.pageSizeMode()!==n.Preset||this.isLandscape()===e.isLandscape())&&((this.pageSizeMode()!==n.Custom||this.customWidth()===e.customWidth())&&((this.pageSizeMode()!==n.Custom||this.customHeight()===e.customHeight())&&(this.pageSizeImportant()===e.pageSizeImportant()&&(this.pageMarginMode()===e.pageMarginMode()&&((this.pageMarginMode()!==n.Custom||this.customMargin()===e.customMargin())&&(this.pageMarginImportant()===e.pageMarginImportant()&&(this.firstPageMarginZero()===e.firstPageMarginZero()&&(this.firstPageMarginZeroImportant()===e.firstPageMarginZeroImportant()&&(this.forceHtmlBodyMarginZero()===e.forceHtmlBodyMarginZero()&&(this.widowsOrphans()===e.widowsOrphans()&&(this.widowsOrphansImportant()===e.widowsOrphansImportant()&&(this.imageMaxSizeToFitPage()===e.imageMaxSizeToFitPage()&&(this.imageMaxSizeToFitPageImportant()===e.imageMaxSizeToFitPageImportant()&&(this.imageKeepAspectRatio()===e.imageKeepAspectRatio()&&(this.imageKeepAspectRatioImportant()===e.imageKeepAspectRatioImportant()&&(this.baseFontSizeSpecified()===e.baseFontSizeSpecified()&&((!this.baseFontSizeSpecified()||this.baseFontSize()===e.baseFontSize())&&(this.baseFontSizeImportant()===e.baseFontSizeImportant()&&(this.baseLineHeightSpecified()===e.baseLineHeightSpecified()&&((!this.baseLineHeightSpecified()||this.baseLineHeight()===e.baseLineHeight())&&(this.baseLineHeightImportant()===e.baseLineHeightImportant()&&(this.baseFontFamilySpecified()===e.baseFontFamilySpecified()&&((!this.baseFontFamilySpecified()||this.baseFontFamily()===e.baseFontFamily())&&(this.baseFontFamilyImportant()===e.baseFontFamilyImportant()&&(this.allImportant()===e.allImportant()&&(this.pageOtherStyle()===e.pageOtherStyle()&&(this.firstPageOtherStyle()===e.firstPageOtherStyle()&&(this.rootOtherStyle()===e.rootOtherStyle()&&(this.beforeOtherStyle()===e.beforeOtherStyle()&&(this.afterOtherStyle()===e.afterOtherStyle()&&!(!this.viewerFontSize!=!e.viewerFontSize||this.viewerFontSize&&this.viewerFontSize()!==e.viewerFontSize())))))))))))))))))))))))))))))))))}}O.Mode=n,O.Constants=A,O.PresetSize=P;var R={escapeUnicodeChar:e=>`\\u${(65536|e.charCodeAt(0)).toString(16).substring(1)}`,escapeUnicodeString(e){return e.replace(/[^-a-zA-Z0-9_]/g,this.escapeUnicodeChar)},percentEncodeAmpersandAndUnencodedPercent:e=>e.replace(/%(?![0-9A-Fa-f]{2})/g,"%25").replace(/&/g,"%26"),percentEncodeAmpersandAndPercent:e=>e.replace(/%/g,"%25").replace(/&/g,"%26"),percentDecodeAmpersandAndPercent:e=>e.replace(/%26/g,"&").replace(/%25/g,"%"),percentEncodeForDataURI:e=>encodeURI(e).replace(/#/g,"%23").replace(/&/g,"%26")};function L(e){return new RegExp(`[#&]${R.escapeUnicodeString(e)}=([^&]*)`,"g")}const k=new class{constructor(){this.history=window?window.history:null,this.location=window?window.location:{href:""},this.storedUrl=this.location.href}getBaseURL(){let e=this.location.href;return e=e.replace(/#.*$/,""),e.replace(/\/[^/]*$/,"/")}hasParameter(e){const t=this.location.href;return L(e).test(t)}getParameter(e){const t=this.location.href,n=L(e),i=[];let o;for(;o=n.exec(t);)i.push(o[1]);return i}setParameter(e,t,n){const i=this.location.href;let o;const s=L(e);let r=s.exec(i);if(r&&n)for(;n-- >=1;)r=s.exec(i);if(r){const e=r[1].length,n=r.index+r[0].length-e;o=i.substring(0,n)+t+i.substring(n+e)}else o=`${i+(i.match(/[#&]$/)?"":i.match(/#/)?"&":"#")+e}=${t}`;null!==this.history&&this.history.replaceState?this.history.replaceState(null,"",o):this.location.href=o,this.storedUrl=o}removeParameter(e,t){const n=this.location.href;let i;const o=L(e);let s=o.exec(n);if(s&&t&&(s=o.exec(n)),s){for(i=n;s;s=o.exec(i)){const e=s.index+s[0].length;i="#"==s[0].charAt(0)?i.substring(0,s.index+1)+i.substring(e+1):i.substring(0,s.index)+i.substring(e),o.lastIndex-=s[0].length}i=i.replace(/^(.*?)[#&]$/,"$1"),null!==this.history&&this.history.replaceState?this.history.replaceState(null,"",i):this.location.href=i}this.storedUrl=i}};class F{constructor(){const e=function(){const e=k.getParameter("b"),t=k.getParameter("x"),n=k.getParameter("f"),i=k.getParameter("style"),o=k.getParameter("userStyle");return{bookUrl:e[0]||null,xUrl:!e[0]&&t.length&&t[0]?t:null,fragment:n[0]||null,authorStyleSheet:i.length?i:[],userStyleSheet:o.length?o:[]}}();this.bookUrl=i.observable(e.bookUrl||""),this.xUrl=i.observable(e.xUrl||null),this.fragment=i.observable(e.fragment||""),this.authorStyleSheet=i.observable(e.authorStyleSheet),this.userStyleSheet=i.observable(e.userStyleSheet),this.pageStyle=new O,this.dataUserStyleIndex=-1,this.fragment.subscribe(e=>{if(/^epubcfi\(\/([246]\/)?2!\)/.test(e))k.removeParameter("f");else{const t=e.replace(/[\s+&?=#\u007F-\uFFFF]+/g,encodeURIComponent);k.setParameter("f",t)}}),e.userStyleSheet.find((e,t)=>{if(/^data:,.*?\/\*(?:<|%3C)viewer(?:>|%3E)\*\//.test(e)){this.dataUserStyleIndex=t;const n=e.replace(/^data:,/,"").replace(/%(?![0-9A-Fa-f]{2})/g,"%25"),i=decodeURIComponent(n);return this.pageStyle.cssText(i),!0}return!1}),this.pageStyle.cssText.subscribe(e=>{this.updateUserStyleSheetFromCSSText(e)})}toObject(){function e(e){return e.map(e=>({url:e}))}const t=e(this.userStyleSheet());return this.pageStyle.pageSizeMode()==O.Mode.Default&&t.unshift({text:"@page{size:auto}"}),{fragment:this.fragment(),authorStyleSheet:e(this.authorStyleSheet()),userStyleSheet:t}}updateUserStyleSheetFromCSSText(e){null==e&&(e=this.pageStyle.toCSSText());const t=this.userStyleSheet();if((!e||/^\s*(\/\*.*?\*\/\s*)*$/.test(e))&&t.length<=(-1==this.dataUserStyleIndex?0:1))return t.pop(),this.dataUserStyleIndex=-1,this.userStyleSheet(t),void k.removeParameter("userStyle");const n="data:,"+R.percentEncodeForDataURI(e.trim());-1==this.dataUserStyleIndex?(t.push(n),this.dataUserStyleIndex=t.length-1):t[this.dataUserStyleIndex]=n,this.userStyleSheet(t),k.setParameter("userStyle",n,this.dataUserStyleIndex)}}class D{toSpreadViewString(){switch(this){case _.SPREAD:return"true";case _.SINGLE_PAGE:return"false";case _.AUTO_SPREAD:return"auto";default:throw new Error("Invalid PageViewMode")}}toString(){switch(this){case _.SPREAD:return"spread";case _.SINGLE_PAGE:return"singlePage";case _.AUTO_SPREAD:return"autoSpread";default:throw new Error("Invalid PageViewMode")}}}const _={AUTO_SPREAD:new D,SINGLE_PAGE:new D,SPREAD:new D,defaultMode(){return this.AUTO_SPREAD},fromSpreadViewString(e){switch(e){case"true":return this.SPREAD;case"false":return this.SINGLE_PAGE;case"auto":default:return this.AUTO_SPREAD}},of(e){switch(e){case p.SPREAD:return this.SPREAD;case p.SINGLE_PAGE:return this.SINGLE_PAGE;case p.AUTO_SPREAD:return this.AUTO_SPREAD;default:throw new Error(`Invalid PageViewMode name: ${e}`)}}};class B{constructor(e){this.zoom=e}get fitToScreen(){return null}getCurrentZoomFactor(e){return 1}toggleFitToScreen(){return new B(1)}zoomIn(e){return new U(1.25*this.getCurrentZoomFactor(e))}zoomOut(e){return new U(.8*this.getCurrentZoomFactor(e))}zoomToActualSize(){return new U(1)}static createDefaultOptions(){return new M}static createFromZoomFactor(e){return new U(e)}}class M extends B{constructor(){super(1)}get fitToScreen(){return!0}toggleFitToScreen(){return new U(1)}getCurrentZoomFactor(e){return e.queryZoomFactor(g.FIT_INSIDE_VIEWPORT)}}class U extends B{get fitToScreen(){return!1}toggleFitToScreen(){return new M}getCurrentZoomFactor(){return this.zoom}}function z(){return{renderAllPages:k.hasParameter("x"),fontSize:16,profile:!1,pageViewMode:_.defaultMode(),zoom:B.createDefaultOptions()}}class V{constructor(e){if(this.renderAllPages=i.observable(),this.fontSize=i.observable(),this.profile=i.observable(),this.pageViewMode=i.observable(),this.zoom=i.observable(),e)this.copyFrom(e);else{const e=z(),t=function(){const e=k.getParameter("renderAllPages")[0],t=k.getParameter("fontSize")[0],n=/^([\d.]+)(?:(%25|%)|\/([\d.]+))?$/.exec(t);let i=null;if(n){const[,e,t,o]=n;i=parseFloat(e),(t||o)&&(i=16*i/(t?100:parseFloat(o))),i<5&&(i=5),i>72&&(i=72)}return{renderAllPages:"true"===e||"false"!==e&&null,fontSize:i,profile:"true"===k.getParameter("profile")[0],pageViewMode:_.fromSpreadViewString(k.getParameter("spread")[0]),zoom:void 0}}();this.renderAllPages(null!==t.renderAllPages?t.renderAllPages:e.renderAllPages),this.fontSize(t.fontSize||e.fontSize),this.profile(t.profile||e.profile),this.pageViewMode(t.pageViewMode||e.pageViewMode),this.zoom(e.zoom),this.pageViewMode.subscribe(t=>{t===e.pageViewMode?k.removeParameter("spread"):k.setParameter("spread",t.toSpreadViewString())}),this.renderAllPages.subscribe(t=>{t===e.renderAllPages?k.removeParameter("renderAllPages"):k.setParameter("renderAllPages",t.toString())}),this.fontSize.subscribe(t=>{"number"==typeof t&&(t=t.toPrecision(10).replace(/(?:\.0*|(\.\d*?)0+)$/,"$1")),Number(t)==e.fontSize?k.removeParameter("fontSize"):k.setParameter("fontSize",`${t}/${e.fontSize}`)})}}copyFrom(e){this.renderAllPages(e.renderAllPages()),this.fontSize(e.fontSize()),this.profile(e.profile()),this.pageViewMode(e.pageViewMode()),this.zoom(e.zoom())}toObject(){return{renderAllPages:this.renderAllPages(),fontSize:Number(this.fontSize()),pageViewMode:this.pageViewMode().toString(),fitToScreen:this.zoom().fitToScreen,zoom:this.zoom().zoom}}}V.getDefaultValues=z;var H,G=i.observableArray();!function(e){e.Debug="debug",e.Info="info",e.Warn="warn",e.Error="error"}(H||(H={}));class ${constructor(){this.logLevel=H.Error}static getLogger(){return new $}setLogLevel(e){this.logLevel=e}debug(e){this.logLevel===H.Debug&&G.push({type:"debug",content:e})}info(e){this.logLevel!==H.Debug&&this.logLevel!==H.Info||G.push({type:"info",content:e})}warn(e){this.logLevel!==H.Debug&&this.logLevel!==H.Info&&this.logLevel!==H.Warn||G.push({type:"warn",content:e})}error(e){this.logLevel!==H.Debug&&this.logLevel!==H.Info&&this.logLevel!==H.Warn&&this.logLevel!==H.Error||G.push({type:"error",content:e})}}const W={readonlyObservable(e){const t=i.observable(e);return{getter:i.pureComputed(()=>t()),value:t}}};class X{constructor(e,t){this.viewerOptions_=t,this.documentOptions_=null,this.coreViewer_=new d(e,t.toObject());const n=this.state_={status:W.readonlyObservable(h.LOADING),pageProgression:W.readonlyObservable(a.LTR)};this.state={status:n.status.getter.extend({rateLimit:{timeout:100,method:"notifyWhenChangesStop"},notify:"always"}),navigatable:i.pureComputed(()=>n.status.value()&&n.status.value()!==h.LOADING),pageProgression:n.pageProgression.getter},this.epage=i.observable(),this.epageCount=i.observable(),this.firstPage=i.observable(),this.lastPage=i.observable(),this.tocVisible=i.observable(),this.tocPinned=i.observable(),this.inputUrl=i.observable(""),this.setupViewerEventHandler(),this.setupViewerOptionSubscriptions()}setupViewerEventHandler(){const e=$.getLogger();this.coreViewer_.addListener("debug",t=>{e.debug(t.content)}),this.coreViewer_.addListener("info",t=>{e.info(t.content)}),this.coreViewer_.addListener("warn",t=>{e.warn(t.content)}),this.coreViewer_.addListener("error",t=>{e.error(t.content)}),this.coreViewer_.addListener("readystatechange",()=>{const e=this.coreViewer_.readyState;e!==h.INTERACTIVE&&e!==h.COMPLETE||this.state_.pageProgression.value(this.coreViewer_.getCurrentPageProgression()),this.state_.status.value(e)}),this.coreViewer_.addListener("loaded",()=>{this.viewerOptions_.profile()&&N.printTimings()}),this.coreViewer_.addListener("nav",e=>{const{cfi:t,first:n,last:i,epage:o,epageCount:s,metadata:r,docTitle:a}=e;if(t&&this.documentOptions_.fragment(t),void 0!==n&&this.firstPage(n),void 0!==i&&this.lastPage(i),void 0!==o&&this.epage(o),void 0!==s&&this.epageCount(s),r||a){const e=r&&r["http://purl.org/dc/terms/title"],t=e&&e[0]&&e[0].v;t?!a||a===t||this.firstPage()||/\.xhtml$/.test(a)?document.title=t:document.title=`${a} | ${t}`:document.title=a||"Vivliostyle Viewer"}const l=this.tocVisible(),h=this.coreViewer_.isTOCVisible();l&&!h||this.tocVisible(h)}),this.coreViewer_.addListener("hyperlink",e=>{e.internal?(this.navigateToInternalUrl(e.href),this.tocVisible()&&this.tocVisible(!1),document.getElementById("vivliostyle-viewer-viewport").focus()):window.location.href=e.href})}setupViewerOptionSubscriptions(){i.computed((function(){const e=this.viewerOptions_.toObject();this.coreViewer_.setOptions(e)}),this).extend({rateLimit:0})}loadDocument(e,t){this.state_.status.value(h.LOADING),t&&this.viewerOptions_.copyFrom(t),this.documentOptions_=e,e.xUrl()?this.coreViewer_.loadDocument(e.xUrl(),e.toObject(),this.viewerOptions_.toObject()):e.bookUrl()?this.coreViewer_.loadPublication(e.bookUrl(),e.toObject(),this.viewerOptions_.toObject()):this.state_.status.value("")}navigateToPrevious(){this.coreViewer_.navigateToPage(u.PREVIOUS)}navigateToNext(){this.coreViewer_.navigateToPage(u.NEXT)}navigateToLeft(){this.coreViewer_.navigateToPage(u.LEFT)}navigateToRight(){this.coreViewer_.navigateToPage(u.RIGHT)}navigateToFirst(){this.coreViewer_.navigateToPage(u.FIRST)}navigateToLast(){this.coreViewer_.navigateToPage(u.LAST)}navigateToEPage(e){this.coreViewer_.navigateToPage(u.EPAGE,e)}navigateToInternalUrl(e){this.coreViewer_.navigateToInternalUrl(e)}queryZoomFactor(e){return this.coreViewer_.queryZoomFactor(e)}epageToPageNumber(e){if(!e&&0!=e)return;return Math.round(e+1)}epageFromPageNumber(e){if(!e&&0!=e)return;return e-1}showTOC(e,t){if(null==this.coreViewer_.isTOCVisible())return;const n=null==e?!this.tocVisible():e;this.tocVisible(n),this.tocPinned(!!n&&!t),this.coreViewer_.showTOC(n,t)}}const j={Unidentified:"Unidentified",ArrowDown:"ArrowDown",ArrowLeft:"ArrowLeft",ArrowRight:"ArrowRight",ArrowUp:"ArrowUp",Home:"Home",End:"End",PageDown:"PageDown",PageUp:"PageUp",Escape:"Escape",Enter:"Enter",Space:" "};var K={Keys:j,identifyKeyFromEvent:function(e){const t=e.key,n=e.keyIdentifier,i=e.location;return t===j.ArrowDown||"Down"===t||"Down"===n?e.metaKey?j.End:j.ArrowDown:t===j.ArrowLeft||"Left"===t||"Left"===n?j.ArrowLeft:t===j.ArrowRight||"Right"===t||"Right"===n?j.ArrowRight:t===j.ArrowUp||"Up"===t||"Up"===n?e.metaKey?j.Home:j.ArrowUp:t===j.Escape||"Esc"===t||"U+001B"===n?j.Escape:t===j.Enter||"Enter"===n?j.Enter:t===j.Space||"U+0020"===n?j.Space:"0"===t||"U+0030"===n?"0":"+"===t||"Add"===t||"U+002B"===n||"U+00BB"===n||"U+004B"===n&&i===KeyboardEvent.DOM_KEY_LOCATION_NUMPAD?"+":"-"===t||"Subtract"===t||"U+002D"===n||"U+00BD"===n||"U+004D"===n&&i===KeyboardEvent.DOM_KEY_LOCATION_NUMPAD?"-":t||n||j.Unidentified}};const{Keys:Y}=K;class q{constructor(e,t,n,o){this.viewerOptions_=e,this.viewer_=t,this.settingsPanel_=n,this.justClicked=!1,this.isDisabled=i.pureComputed(()=>this.settingsPanel_.opened()&&!this.settingsPanel_.pinned()||!this.viewer_.state.navigatable());const s=i.pureComputed(()=>o.disablePageNavigation||this.isDisabled());s.subscribe(e=>{const t=document.getElementById("vivliostyle-page-number");t&&(t.disabled=e)}),this.isPageNumberDisabled=i.pureComputed(()=>s()),this.isNavigateToPreviousDisabled=i.pureComputed(()=>!!s()||void 0!==this.viewer_.state.status&&this.viewer_.firstPage()),this.isNavigateToNextDisabled=i.pureComputed(()=>!!s()||void 0!==this.viewer_.state.status&&((!this.viewerOptions_.renderAllPages()||this.viewer_.state.status()==h.COMPLETE)&&this.viewer_.lastPage())),this.isNavigateToLeftDisabled=i.pureComputed(()=>!!s()||void 0!==this.viewer_.state.pageProgression&&(this.viewer_.state.pageProgression()===a.LTR?this.isNavigateToPreviousDisabled():this.isNavigateToNextDisabled())),this.isNavigateToRightDisabled=i.pureComputed(()=>!!s()||void 0!==this.viewer_.state.pageProgression&&(this.viewer_.state.pageProgression()===a.LTR?this.isNavigateToNextDisabled():this.isNavigateToPreviousDisabled())),this.isNavigateToFirstDisabled=this.isNavigateToPreviousDisabled,this.isNavigateToLastDisabled=i.pureComputed(()=>!!s()||void 0!==this.viewer_.state.status&&(!(!this.viewerOptions_.renderAllPages()||this.viewer_.state.status()==h.COMPLETE)||this.viewer_.lastPage())),this.hidePageNavigation=!!o.disablePageNavigation;const r=i.pureComputed(()=>o.disableZoom||this.isDisabled());this.isZoomOutDisabled=r,this.isZoomInDisabled=r,this.isZoomToActualSizeDisabled=r,this.isToggleFitToScreenDisabled=r,this.hideZoom=!!o.disableZoom,this.fitToScreen=i.pureComputed(()=>e.zoom().fitToScreen);const l=i.pureComputed(()=>o.disableFontSizeChange||this.isDisabled());this.isIncreaseFontSizeDisabled=i.pureComputed(()=>!!l()||this.viewerOptions_.fontSize()>=72),this.isDecreaseFontSizeDisabled=i.pureComputed(()=>!!l()||this.viewerOptions_.fontSize()<=5),this.isDefaultFontSizeDisabled=l,this.hideFontSizeChange=!!o.disableFontSizeChange,this.isTOCToggleDisabled=i.pureComputed(()=>o.disableTOCNavigation||this.isDisabled()||null==this.viewer_.tocVisible()),this.hideTOCNavigation=!!o.disableTOCNavigation,this.pageNumber=i.pureComputed({read(){return this.viewer_.epageToPageNumber(this.viewer_.epage())},write(e){const t=this.viewer_.epage(),n=this.viewer_.epageToPageNumber(t);let i=parseFloat(e.toString().replace(/[０-９]/g,e=>String.fromCharCode(e.charCodeAt(0)-65248)))||0;if(/^[-+]/.test(e.toString())&&(i=n+i),i<1)i=1;else{const e=this.viewer_.epageCount();this.viewerOptions_.renderAllPages()?i>e&&(i=e):i>e+1&&(i=e+1)}const o=this.viewer_.epageFromPageNumber(i),s=document.getElementById("vivliostyle-page-number");s.value=i.toString(),this.viewer_.navigateToEPage(o),setTimeout(()=>{this.viewer_.state.status()!=h.LOADING&&this.viewer_.epage()===t&&(s.value=n.toString()),document.getElementById("vivliostyle-viewer-viewport").focus()},10)},owner:this}),this.totalPages=i.pureComputed(()=>{let e=this.viewer_.epageCount();if(!e)return e;const t=Number(this.pageNumber());return this.viewer_.lastPage()?e=t:t>=e&&e++,e}),["navigateToPrevious","navigateToNext","navigateToLeft","navigateToRight","navigateToFirst","navigateToLast","zoomIn","zoomOut","zoomToActualSize","toggleFitToScreen","increaseFontSize","decreaseFontSize","defaultFontSize","onclickViewport","toggleTOC"].forEach(e=>{this[e]=this[e].bind(this)})}static PREVIOUS(e){throw new Error("Method not implemented.")}static NEXT(e){throw new Error("Method not implemented.")}static LEFT(e){throw new Error("Method not implemented.")}static RIGHT(e){throw new Error("Method not implemented.")}static FIRST(e){throw new Error("Method not implemented.")}static LAST(e){throw new Error("Method not implemented.")}static EPAGE(e,t){throw new Error("Method not implemented.")}navigateToPrevious(){return!this.isNavigateToPreviousDisabled()&&(this.viewer_.navigateToPrevious(),!0)}navigateToNext(){return!this.isNavigateToNextDisabled()&&(this.viewer_.navigateToNext(),!0)}navigateToLeft(){return!this.isNavigateToLeftDisabled()&&(this.viewer_.navigateToLeft(),!0)}navigateToRight(){return!this.isNavigateToRightDisabled()&&(this.viewer_.navigateToRight(),!0)}navigateToFirst(){return!this.isNavigateToFirstDisabled()&&(this.viewer_.navigateToFirst(),!0)}navigateToLast(){return!this.isNavigateToLastDisabled()&&(this.viewer_.navigateToLast(),!0)}zoomIn(){if(this.isZoomInDisabled())return!1;{const e=this.viewerOptions_.zoom();return this.viewerOptions_.zoom(e.zoomIn(this.viewer_)),!0}}zoomOut(){if(this.isZoomOutDisabled())return!1;{const e=this.viewerOptions_.zoom();return this.viewerOptions_.zoom(e.zoomOut(this.viewer_)),!0}}zoomToActualSize(){if(this.isZoomToActualSizeDisabled())return!1;{const e=this.viewerOptions_.zoom();return this.viewerOptions_.zoom(e.zoomToActualSize()),!0}}toggleFitToScreen(){if(this.isToggleFitToScreenDisabled())return!1;{const e=this.viewerOptions_.zoom();return this.viewerOptions_.zoom(e.toggleFitToScreen()),!0}}increaseFontSize(){if(this.isIncreaseFontSizeDisabled())return!1;{let e=Number(this.viewerOptions_.fontSize());return e=e<10?Math.floor(e)+1:e<20?2*(Math.floor(e/2)+1):e<40?4*(Math.floor(e/4)+1):e<72?8*(Math.floor(e/8)+1):72,this.viewerOptions_.fontSize(e),this.updateFontSizeSettings(),!0}}decreaseFontSize(){if(this.isDecreaseFontSizeDisabled())return!1;{let e=Number(this.viewerOptions_.fontSize());return e=e>40?8*(Math.ceil(e/8)-1):e>20?4*(Math.ceil(e/4)-1):e>10?2*(Math.ceil(e/2)-1):e>5?Math.ceil(e)-1:5,this.viewerOptions_.fontSize(e),this.updateFontSizeSettings(),!0}}defaultFontSize(){if(this.isDefaultFontSizeDisabled())return!1;{const e=V.getDefaultValues().fontSize;return this.viewerOptions_.fontSize(e),this.updateFontSizeSettings(),!0}}updateFontSizeSettings(){this.settingsPanel_.state.viewerOptions.fontSize(this.viewerOptions_.fontSize()),this.viewer_.documentOptions_.pageStyle.baseFontSizeSpecified()&&(this.viewer_.documentOptions_.updateUserStyleSheetFromCSSText(),this.viewer_.loadDocument(this.viewer_.documentOptions_,this.viewerOptions_))}onclickViewport(){if(this.settingsPanel_.justClicked)return!0;if(this.viewer_.tocVisible()&&!this.viewer_.tocPinned()){const e=document.querySelector("[data-vivliostyle-toc-box]");e&&!e.contains(document.activeElement)&&this.toggleTOC()}return this.settingsPanel_.opened()&&!this.settingsPanel_.pinned()&&this.settingsPanel_.close(),!0}toggleTOC(){if(this.isTOCToggleDisabled())return!1;{let e=null;return this.viewer_.tocVisible()?this.justClicked?(this.viewer_.showTOC(!0,!1),this.justClicked=!1):(null!==e&&(clearInterval(e),e=null),this.viewer_.showTOC(!1),this.justClicked=!0,setTimeout(()=>{this.justClicked&&(document.getElementById("vivliostyle-viewer-viewport").focus(),this.justClicked=!1)},300)):(this.justClicked?(this.viewer_.showTOC(!0,!1),this.justClicked=!1):(this.viewer_.showTOC(!0,!0),this.justClicked=!0),e=setInterval(()=>{const t=document.querySelector("[data-vivliostyle-toc-box]");t&&"visible"===t.style.visibility&&(t.tabIndex=0,t.focus(),clearInterval(e),e=null),this.justClicked=!1},300)),!0}}navigateTOC(e){const t=Array.from(document.querySelectorAll("[data-vivliostyle-toc-box]>*>*>*>*>*:not([hidden]) [tabindex='0'],[data-vivliostyle-toc-box]>*>*>*>*>*:not([hidden]) a[href]:not([tabindex='-1'])"));let n=t.indexOf(document.activeElement);const i=e=>t[e]&&"button"===t[e].getAttribute("role"),o=e=>t[e]&&"true"===t[e].getAttribute("aria-expanded");switch(e){case Y.ArrowLeft:if(-1==n){n=t.length-1;break}if(!i(n)&&i(n-1)&&n--,i(n)&&o(n))t[n].click();else for(let e=n-1;e>=0;e--)if(i(e)&&t[e].parentElement.contains(t[n])){n=e;break}break;case Y.ArrowRight:if(-1==n){n=0;break}!i(n)&&i(n-1)&&n--,i(n)&&(o(n)?n+=2:t[n].click());break;case Y.ArrowDown:n++;break;case Y.ArrowUp:if(-1==n){n=t.length-1;break}n>0&&i(--n)&&n--;break;case Y.Home:n=0;break;case Y.End:n=t.length-1;break;case Y.Space:!i(n)&&i(n-1)&&n--,i(n)&&t[n].click()}return i(n)&&n++,t[n]&&t[n].focus(),!0}handleKey(e){if(this.settingsPanel_.opened()&&this.settingsPanel_.settingsToggle.contains(document.activeElement))return!0;const t=document.getElementById("vivliostyle-page-number"),n=document.getElementById("vivliostyle-viewer-viewport"),i=n.scrollWidth>n.clientWidth,o=n.scrollHeight>n.clientHeight,s=t===document.activeElement,r=this.viewer_.tocVisible()&&!s&&n!=document.activeElement;switch(e){case"+":return s||!this.increaseFontSize();case"-":return s||!this.decreaseFontSize();case"0":return s||!this.defaultFontSize();case"1":return s||!this.zoomToActualSize();case Y.ArrowLeft:return r?!this.navigateTOC(e):s||i||!this.navigateToLeft();case Y.ArrowRight:return r?!this.navigateTOC(e):s||i||!this.navigateToRight();case Y.ArrowDown:return r?!this.navigateTOC(e):(n.focus(),o||!this.navigateToNext());case Y.ArrowUp:return r?!this.navigateTOC(e):(n.focus(),o||!this.navigateToPrevious());case Y.PageDown:return!!r||(n.focus(),!this.navigateToNext());case Y.PageUp:return!!r||(n.focus(),!this.navigateToPrevious());case Y.Home:return r?!this.navigateTOC(e):(n.focus(),!this.navigateToFirst());case Y.End:return r?!this.navigateTOC(e):(n.focus(),!this.navigateToLast());case"o":case"O":return n.focus(),!this.zoomOut();case"i":case"I":return n.focus(),!this.zoomIn();case"f":case"F":return n.focus(),!this.toggleFitToScreen();case"g":case"G":return t.focus(),!1;case"t":case"T":return n.focus(),!this.toggleTOC();case Y.Escape:return this.viewer_.tocVisible()?!this.toggleTOC():(n.focus(),!0);case Y.Space:return r?!this.navigateTOC(e):"button"!==document.activeElement.getAttribute("role")||(document.activeElement.click(),!1);default:return!0}}}const{Keys:Z}=K;class Q{constructor(e,t,n,o,s){this.viewerOptions_=e,this.documentOptions_=t,this.viewer_=n,this.isPageStyleChangeDisabled=!!s.disablePageStyleChange,this.isOverrideDocumentStyleSheetDisabled=this.isPageStyleChangeDisabled,this.isPageViewModeChangeDisabled=!!s.disablePageViewModeChange,this.isRenderAllPagesChangeDisabled=!!s.disableRenderAllPagesChange,this.justClicked=!1,this.settingsToggle=document.getElementById("vivliostyle-menu-item_settings-toggle"),this.opened=i.observable(!1),this.pinned=i.observable(!1),this.state={viewerOptions:new V(e),pageStyle:new O(t.pageStyle),pageViewMode:i.pureComputed({read:()=>this.state.viewerOptions.pageViewMode().toString(),write:e=>{this.state.viewerOptions.pageViewMode(_.of(e))}}),renderAllPages:i.pureComputed({read:()=>this.state.viewerOptions.renderAllPages(),write:e=>{this.state.viewerOptions.renderAllPages(e)}})},this.state.pageStyle.setViewerFontSizeObservable(this.state.viewerOptions.fontSize),this.defaultPageStyle=new O,["close","toggle","apply","cancel","resetUserStyle"].forEach((function(e){this[e]=this[e].bind(this)}),this),o.visible.subscribe((function(e){e&&this.close()}),this)}close(){this.opened(!1),this.pinned(!1);const e=document.getElementById("vivliostyle-viewer-viewport");return e&&e.focus(),!0}toggle(){this.opened()?this.justClicked?(this.justClicked=!1,this.pinned(!0)):(this.close(),this.justClicked=!0,setTimeout(()=>{this.justClicked=!1},300)):(this.viewer_.tocPinned()||this.viewer_.showTOC(!1),this.opened(!0),this.justClicked?(this.justClicked=!1,this.pinned(!0)):(this.pinned(!1),this.justClicked=!0,this.focusToFirstItem(),setTimeout(()=>{this.justClicked=!1},300)))}apply(){this.state.renderAllPages()===this.viewerOptions_.renderAllPages()&&this.state.pageStyle.equivalentTo(this.documentOptions_.pageStyle)?this.viewerOptions_.copyFrom(this.state.viewerOptions):(this.documentOptions_.pageStyle.copyFrom(this.state.pageStyle),this.documentOptions_.pageStyle.baseFontSizeSpecified()&&this.documentOptions_.updateUserStyleSheetFromCSSText(),this.viewer_.loadDocument(this.documentOptions_,this.state.viewerOptions)),this.pinned()?this.focusToFirstItem():this.close()}cancel(){this.state.viewerOptions.copyFrom(this.viewerOptions_),this.state.pageStyle.copyFrom(this.documentOptions_.pageStyle),this.close()}resetUserStyle(){return this.state.pageStyle.copyFrom(this.defaultPageStyle),this.state.viewerOptions.fontSize(V.getDefaultValues().fontSize),setTimeout(()=>{document.getElementsByName("vivliostyle-settings_reset-user-style")[0].checked=!1},200),!0}focusToFirstItem(e){const t=e||this.settingsToggle,n=["input","textarea","summary"].includes(t.localName)?t:Array.from(t.getElementsByTagName("input")).find(e=>!e.disabled&&("radio"!=e.type||e.checked));if(n){for(let e=n.parentElement;e&&e!=this.settingsToggle;e=e.parentElement)"details"==e.localName&&(e.open=!0);n.focus()}}handleKey(e){const t=this.opened()&&this.settingsToggle.contains(document.activeElement),n=t&&("text"==document.activeElement.type||"select"==document.activeElement.localName),i=t&&"textarea"==document.activeElement.localName,o=t&&!n&&!i;switch(e){case Z.Escape:return this.opened()&&(this.cancel(),this.close()),!0;case"s":case"S":return!(!this.opened()||o||!t)||(this.toggle(),!1);case"p":case"P":return!o||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-view-and-rendering").firstElementChild),!1);case"v":case"V":return!o||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-view-mode")),!1);case"a":case"A":return!o||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_render-all-pages")[0]),!1);case"u":case"U":return!o||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_user-style").firstElementChild),!1);case"z":case"Z":return!o||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-size")),!1);case"m":case"M":return!o||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-margin")),!1);case"b":case"B":return!o||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-breaks")),!1);case"i":case"I":return!o||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_images")),!1);case"t":case"T":return!o||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_text")),!1);case"o":case"O":return!o||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_override-document-stylesheets")[0]),!1);case"c":case"C":return!o||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_css-details")[0]),!1);case"r":case"R":return!o||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_reset-user-style")[0]),!1);case Z.Enter:return!(n||o&&"vivliostyle-menu-button_apply"!==document.activeElement.id&&"vivliostyle-menu-button_reset"!==document.activeElement.id)||(document.getElementById("vivliostyle-menu-button_apply").focus(),!1);default:return!0}}}class J{constructor(e){this.list=e,this.visible=i.pureComputed(()=>e().length>0)}getDisplayMessage(e){const t=e.error;let n=t&&(t.toString()||t.frameTrace||t.stack);return n&&(n=n.split("\n",1)[0]),n||(n=e.messages.join("\n")),n}}function ee(){this.documentOptions=new F,this.viewerOptions=new V,this.documentOptions.pageStyle.setViewerFontSizeObservable(this.viewerOptions.fontSize),this.viewerOptions.profile()&&I.profiler.enable(),this.isDebug="true"===k.getParameter("debug")[0],this.viewerSettings={userAgentRootURL:`${k.getBaseURL()}resources/`,viewportElement:document.getElementById("vivliostyle-viewer-viewport"),debug:this.isDebug},k.getParameter("b")[0]&&(k.removeParameter("b",!0),k.removeParameter("x")),k.removeParameter("f",!0),k.removeParameter("spread",!0),k.removeParameter("renderAllPages",!0),k.removeParameter("fontSize",!0),k.removeParameter("profile",!0),k.removeParameter("debug",!0),this.viewer=new X(this.viewerSettings,this.viewerOptions),this.viewer.inputUrl.subscribe(e=>{""!=e?(k.hasParameter("b")||k.history.pushState&&k.history.pushState(null,""),e=e.startsWith("<")?"data:,"+R.percentEncodeForDataURI(e):R.percentEncodeAmpersandAndUnencodedPercent(e),k.setParameter("b",e)):k.removeParameter("b")}),this.messageDialog=new J(G);this.settingsPanel=new Q(this.viewerOptions,this.documentOptions,this.viewer,this.messageDialog,{disablePageStyleChange:!1,disablePageViewModeChange:!1,disableRenderAllPagesChange:!1});this.navigation=new q(this.viewerOptions,this.viewer,this.settingsPanel,{disableTOCNavigation:!1,disablePageNavigation:!1,disableZoom:!1,disableFontSizeChange:!1}),this.handleKey=(e,t)=>{const n=K.identifyKeyFromEvent(t);if("vivliostyle-input-url"===document.activeElement.id)return"Enter"!==n||13!==t.keyCode||(this.documentOptions.bookUrl(k.getParameter("b")[0]),this.viewer.loadDocument(this.documentOptions),!1);if("Home"!==n&&"End"!==n&&(t.ctrlKey||t.metaKey)||t.altKey||t.shiftKey)return!0;let i=this.settingsPanel.handleKey(n);return i&&(i=this.navigation.handleKey(n)),i},this.viewer.loadDocument(this.documentOptions),window.onhashchange=()=>{window.location.href!=k.storedUrl&&window.location.reload()}}const te="ontouchstart"in window;i.bindingHandlers.menuButton={init(e,t){i.unwrap(t())&&(te?(e.addEventListener("touchstart",()=>{i.utils.toggleDomNodeCssClass(e,"hover active",!0)}),e.addEventListener("touchend",()=>{i.utils.toggleDomNodeCssClass(e,"hover active",!1)})):(e.addEventListener("mouseover",()=>{i.utils.toggleDomNodeCssClass(e,"hover",!0)}),e.addEventListener("mousedown",()=>{i.utils.toggleDomNodeCssClass(e,"active",!0)}),e.addEventListener("mouseup",()=>{i.utils.toggleDomNodeCssClass(e,"active",!1)}),e.addEventListener("mouseout",()=>{i.utils.toggleDomNodeCssClass(e,"hover",!1),i.utils.toggleDomNodeCssClass(e,"active",!1),window.getSelection().removeAllRanges()})))}};const ne="ontouchstart"in window;let ie=null,oe=null,se=null;i.bindingHandlers.swipePages={init(e,t){ne&&i.unwrap(t())&&(e.addEventListener("touchstart",e=>{if(e.touches.length>1)return;if(window.visualViewport&&window.visualViewport.scale>1)return;const t=document.getElementById("vivliostyle-viewer-viewport");t&&t.scrollWidth>t.clientWidth||(ie=e.touches[0].clientX,oe=e.touches[0].clientY)}),e.addEventListener("touchmove",e=>{if(!(e.touches.length>1)&&null!==ie&&null!==oe){const t=e.touches[0].clientX-ie,n=e.touches[0].clientY-oe;Math.abs(t)>Math.abs(n)&&(se=t<0?document.getElementById("vivliostyle-page-navigation-right"):document.getElementById("vivliostyle-page-navigation-left")),Math.abs(t)+Math.abs(n)>=16&&(se&&(se.click(),i.utils.toggleDomNodeCssClass(se,"active",!0)),ie=null,oe=null)}}),e.addEventListener("touchend",()=>{se&&i.utils.toggleDomNodeCssClass(se,"active",!1),se=null,ie=null,oe=null}))}},{start(){function e(){i.applyBindings(new ee)}window.__loaded?e():window.onload=e}}.start()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
